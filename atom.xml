<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>统乾</title>
  <subtitle>ZhouTongqian&#39;s Blog</subtitle>
  <link href="/zhoutq.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/zhoutq/zhoutq.github.io/"/>
  <updated>2017-09-10T13:06:13.000Z</updated>
  <id>https://github.com/zhoutq/zhoutq.github.io/</id>
  
  <author>
    <name>zhoutq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[转]教你搭建App内测下载平台</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2017/08/10/%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BAApp%E5%86%85%E6%B5%8B%E4%B8%8B%E8%BD%BD%E5%B9%B3%E5%8F%B0/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2017/08/10/教你搭建App内测下载平台/</id>
    <published>2017-08-10T03:22:13.000Z</published>
    <updated>2017-09-10T13:06:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自简书作者:<a href="http://www.jianshu.com/p/48b38a2d0bbb" target="_blank" rel="external">zhao0</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>App开发测试过程中，我们会把安装包传到各种第三方的内测分发平台方便下载。这些平台或多或少有这样那样的限制，比如下载量啊、付费啊、不能方便找到历史版本啊。还有一方面，我们经常会打Debug版本的包方便调试，又不希望Debug包流传到外部去，这样就很有必要自己搭一个下载平台，于是就有了这个项目(<a href="https://github.com/zhao0/ipapk-server">github地址</a>)。</p>
<div class="image-package"><br><img src="http://upload-images.jianshu.io/upload_images/2057602-ba63d6a985727af3.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><div class="image-caption"></div><br></div>

<h2 id="技术调研"><a href="#技术调研" class="headerlink" title="技术调研"></a>技术调研</h2><h5 id="怎么下载"><a href="#怎么下载" class="headerlink" title="怎么下载"></a>怎么下载</h5><p>先说安卓，apk文件通过最简单的http/ftp下载就可以安装了，略过。<br>iOS稍微复杂一点，需要两步才能完成。<br>第一，下载链接必须是这样的格式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">itms-services://?action=download-manifest&amp;amp;url=一个plist文件的地址</div></pre></td></tr></table></figure>
<p>第二，plist内容如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;</div><div class="line">&amp;lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&amp;gt;</div><div class="line">&amp;lt;plist version="1.0"&amp;gt;</div><div class="line">&amp;lt;dict&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;items&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;array&amp;gt;</div><div class="line">&amp;lt;dict&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;assets&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;array&amp;gt;</div><div class="line">&amp;lt;dict&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;kind&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;string&amp;gt;software-package&amp;lt;/string&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;url&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;string&amp;gt;ipa文件的地址&amp;lt;/string&amp;gt;</div><div class="line">&amp;lt;/dict&amp;gt;</div><div class="line">&amp;lt;/array&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;metadata&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;dict&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;bundle-identifier&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;string&amp;gt;bundleID&amp;lt;/string&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;bundle-version&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;string&amp;gt;1.0&amp;lt;/string&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;kind&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;string&amp;gt;software&amp;lt;/string&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;title&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;string&amp;gt;AppTitle&amp;lt;/string&amp;gt;</div><div class="line">&amp;lt;/dict&amp;gt;</div><div class="line">&amp;lt;/dict&amp;gt;</div><div class="line">&amp;lt;/array&amp;gt;</div><div class="line">&amp;lt;/dict&amp;gt;</div><div class="line">&amp;lt;/plist&amp;gt;</div></pre></td></tr></table></figure></p>
<p>其中，最重要的就是ipa文件的地址，要求必须是https协议，那就需要SSL证书，幸运的是我们可以信任自签名的证书。下载的过程就是这样，当然我们希望这个链接和plist的生成是自动完成的。</p>
<h5 id="自签名证书"><a href="#自签名证书" class="headerlink" title="自签名证书"></a>自签名证书</h5><p>参考<a href="http://www.cnblogs.com/lihuang/articles/4205540.html" target="_blank" rel="external">如何创建一个自签名的SSL证书(X509)</a></p>
<h5 id="包信息提取"><a href="#包信息提取" class="headerlink" title="包信息提取"></a>包信息提取</h5><p>单单只能下载还不够，我们希望看到更多的信息：App名字、版本号、build号、更新时间、图标等。这些信息虽然可以留给上传者在上传的时候一并带上，但是作为有追求的程序员，把方便留给别人的最基本的，因此我们要从ipa/apk中提取这些信息。<br>无论是ipa还是apk，本质都是zip压缩文件。<br>对于iOS的ipa，包信息都放在Info.plist中，主要有CFBundleVersion、CFBundleIdentifier、CFBundleShortVersionString、CFBundleName等。图标文件的名字也是固定的，只要解压就可以得到。不过，苹果对png图片进行了了自定义的<a href="http://pmt.sourceforge.net/pngcrush/" target="_blank" rel="external">pngcrush</a>压缩，有压缩自然就有还原工具<a href="http://www.jongware.com/pngdefry.html" target="_blank" rel="external">pngdefry</a>。<br>对于Android的apk，解压后还能看到AndroidManifest.xml，但是里面的内容经过编码显示为乱码，不方便查看，需要借助开发工具aapt(Android Asset Packaging Tool)，方法如下<br><code>aapt dump badging apkPath</code><br>输出的文本格式如下，不是标准的歌声，需要手动转换一下。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">package: name='com.jianshu.haruki' versionCode='16070101' versionName='1.11.2'</div><div class="line">sdkVersion:'14'</div><div class="line">targetSdkVersion:'22'</div><div class="line">...</div><div class="line">application: label='简书' icon='res/drawable-hdpi-v4/icon_jianshu_new.png'</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="找轮子"><a href="#找轮子" class="headerlink" title="找轮子"></a>找轮子</h2><p>程序员有一个习惯，需要某个东西的时候会先一番搜索，直接用别人写好的，用着用着发现别人写的东西有这样那样的不足，然后撸起袖子自己造一个。这次也不例外，我在github上找到了一个<a href="https://github.com/bumaociyuan/ios-ipa-server">ios-ipa-server</a>，它的特点是简单，ipa文件存储在一个目录下，没有数据库，包信息只有上传时间(其实就是文件更新时间)，不能对app归类，只靠文件名区别，不支持上传，如下图：</p>
<div class="image-package"><br><img src="http://upload-images.jianshu.io/upload_images/2057602-31224eefc821b5a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><div class="image-caption"></div><br></div>

<p>浏览器访问下载页面时，后端实时解析包信息、解压icon图片，这样做效率是非常低的。<br>这么多不足我们就有了造轮子的理由了。</p>
<h2 id="自己造一个"><a href="#自己造一个" class="headerlink" title="自己造一个"></a>自己造一个</h2><p>既然<a href="https://github.com/bumaociyuan/ios-ipa-server">ios-ipa-server</a>是基于node-express写的，正好我<strong>没写过</strong>nodejs，那就在它的基础上继续写吧，借机学(zhuang)习(bi)一下。<br>整个项目的结构是这样的，提供四个API：包上传、获取所有App最新版本、获取某个App的所有版本、动态生成plist文件，数据存储使用sqlite3。</p>
<h5 id="包上传"><a href="#包上传" class="headerlink" title="包上传"></a>包上传</h5><p>接口设计如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">path:</div><div class="line">POST /upload</div><div class="line"></div><div class="line">param: </div><div class="line">package:安装包文件</div><div class="line"></div><div class="line">response:</div><div class="line">&#123;</div><div class="line">id: 6,</div><div class="line">guid: "46269d71-9fda-76fc-3442-a118d6b08bf1",</div><div class="line">bundleID: "com.jianshu.Hugo",</div><div class="line">version: "2.11.4",</div><div class="line">build: "1608051045",</div><div class="line">icon: "https://10.20.30.233:1234/icon/46269d71-9fda-76fc-3442-a118d6b08bf1.png",</div><div class="line">name: "Hugo",</div><div class="line">uploadTime: "2016-12-01 20:50:05",</div><div class="line">platform: "ios",</div><div class="line">url: "itms-services://?action=download-manifest&amp;amp;url=https://10.20.30.233:1234/plist/46269d71-9fda-76fc-3442-a118d6b08bf1"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后端需要拿到安装包，提取出包信息和png图标图片，然后插入到数据库中，最后存储安装包文件和png图片，这也是最关键、最复杂的一个API。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">app.post('/upload', function(req, res) &#123;</div><div class="line">var form = new multiparty.Form();</div><div class="line">form.parse(req, function(err, fields, files) &#123;</div><div class="line">var obj = files.package[0];</div><div class="line">var tmp_path = obj.path;</div><div class="line">parseAppAndInsertToDb(tmp_path, info =&amp;gt; &#123;</div><div class="line">storeApp(tmp_path, info["guid"], error =&amp;gt; &#123;</div><div class="line">if (error) &#123;</div><div class="line">errorHandler(error,res)</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">console.log(info)</div><div class="line">res.send(info)</div><div class="line">&#125;, error =&amp;gt; &#123;</div><div class="line">errorHandler(error,res)</div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>接收表单信息用到了multiparty模块，<code>parseAppAndInsertToDb</code>内部完成了包信息的提取和存储，<code>storeApp</code>存储包文件。<br><code>parseAppAndInsertToDb</code>的实现如下，</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">function parseAppAndInsertToDb(filePath, callback, errorCallback) &#123;</div><div class="line">var guid = Guid.create().toString();</div><div class="line">var parse, extract</div><div class="line">if (path.extname(filePath) === ".ipa") &#123;</div><div class="line">parse = parseIpa</div><div class="line">extract = extractIpaIcon</div><div class="line">&#125; else if (path.extname(filePath) === ".apk") &#123;</div><div class="line">parse = parseApk</div><div class="line">extract = extractApkIcon</div><div class="line">&#125;</div><div class="line">Promise.all([parse(filePath),extract(filePath,guid)]).then(values =&amp;gt; &#123;</div><div class="line">var info = values[0]</div><div class="line">info["guid"] = guid</div><div class="line">excuteDB("INSERT INTO info (guid, platform, build, bundleID, version, name) VALUES (?, ?, ?, ?, ?, ?);",</div><div class="line">[info["guid"], info["platform"], info["build"], info["bundleID"], info["version"], info["name"]],function(error)&#123;</div><div class="line">if (!error)&#123;</div><div class="line">callback(info)</div><div class="line">&#125; else &#123;</div><div class="line">errorCallback(error)</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;, reason =&amp;gt; &#123;</div><div class="line">errorCallback(reason)</div><div class="line">&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先根据文件后缀名判断安装包类型，因为ipa和apk的处理逻辑不一样，所以分别对应两个方法，包信息的提取和icon提取可以同时进行，所以这里用了<code>Promise.all</code>。<code>parseIpa</code>和<code>parseApk</code>就是包信息的提取。<code>extractApkIcon</code>和<code>extractIpaIcon</code>则是icon的提取，<code>extractIpaIcon</code>多了一步还原png图片的处理。<br><code>parseIpa</code>用到了<code>ipa-extract-info</code>模块，<code>parseApk</code>则使用了<code>apk-parser3</code>，代码都非常简单。详细可进入<a href="https://github.com/zhao0/ipapk-server">github地址</a>。</p>
<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>其他三个API则比较简单了，无非就是根据参数取数据，不再赘述。</p>
<h2 id="集成和使用"><a href="#集成和使用" class="headerlink" title="集成和使用"></a>集成和使用</h2><p>安装步骤非常简单，首先需要安装node，有了node之后只要一行命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g ipapk-server</div></pre></td></tr></table></figure>
<p>安装完成之后输入命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ipapk-server</div></pre></td></tr></table></figure>
<p>手机浏览器访问<a href="https://ip:port" target="_blank" rel="external">https://ip:port</a> 即可打开下载页面</p>
<div class="image-package"><br><img src="http://upload-images.jianshu.io/upload_images/2057602-778cdf6e0a5be67b.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><div class="image-caption"></div><br></div><div class="image-package"><br><img src="http://upload-images.jianshu.io/upload_images/2057602-ba63d6a985727af3.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><div class="image-caption"></div><br></div>

<p>App的信息获取都设计成了API，提供给开发者更灵活的接入方式，可以做web页面，也可以做成App，我的好朋友mask(<a href="http://www.jianshu.com/users/98ca2b6009b9" target="_blank" rel="external">人格分裂术</a>)贡献了不少工作，完成默认的web下载页面。<br>更详细的内容请参考<a href="https://github.com/zhao0/ipapk-server">github</a>。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>简书作为一个优质原创内容社区，拥有大量优质原创内容，提供了极佳的阅读和书写体验，吸引了大量文字爱好者和程序员。<a href="http://www.jianshu.com/collection/5e84f0a4fbb0" target="_blank" rel="external">简书技术团队</a>在这里分享技术心得体会，是希望抛砖引玉，吸引更多的程序员大神来简书记录、分享、交流自己的心得体会。<a href="http://www.jianshu.com/collection/5e84f0a4fbb0" target="_blank" rel="external">这个专题</a>以后会不定期更新简书技术团队的文章，包括Android、iOS、前端、后端等等，欢迎大家关注。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自简书作者:&lt;a href=&quot;http://www.jianshu.com/p/48b38a2d0bbb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zhao0&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;head
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/"/>
    
      <category term="App内测下载平台" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/App%E5%86%85%E6%B5%8B%E4%B8%8B%E8%BD%BD%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="移动开发" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="App内测下载平台" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/App%E5%86%85%E6%B5%8B%E4%B8%8B%E8%BD%BD%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>[转]简单监测iOS卡顿的demo</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2017/06/21/%E7%AE%80%E5%8D%95%E7%9B%91%E6%B5%8BiOS%E5%8D%A1%E9%A1%BF%E7%9A%84demo/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2017/06/21/简单监测iOS卡顿的demo/</id>
    <published>2017-06-21T10:13:24.000Z</published>
    <updated>2017-09-10T13:06:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自简书作者:<a href="http://www.jianshu.com/p/71cfbcb15842" target="_blank" rel="external">game3108</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文的demo代码也会更新到<a href="https://github.com/game3108/RunloopMonitorDemo">github</a>上。</p>
<p>做这个demo思路来源于微信team的：<a href="http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207890859&amp;idx=1&amp;sn=e98dd604cdb854e7a5808d2072c29162&amp;scene=4#wechat_redirect" target="_blank" rel="external">微信iOS卡顿监控系统</a>。<br>主要思路:通过监测Runloop的kCFRunLoopAfterWaiting，用一个子线程去检查，一次循环是否时间太长。<br>其中主要涉及到了runloop的原理。关于整个原理：<a href="http://blog.ibireme.com/2015/05/18/runloop/" target="_blank" rel="external">深入理解RunLoop</a>讲解的比较仔细。<br>以下就是runloop大概的运行方式：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 1. 通知Observers，即将进入RunLoop</span></div><div class="line"><span class="comment">/// 此处有Observer会创建AutoreleasePool: _objc_autoreleasePoolPush();</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopEntry);</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line"></div><div class="line"><span class="comment">/// 2. 通知 Observers: 即将触发 Timer 回调。</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeTimers);</div><div class="line"><span class="comment">/// 3. 通知 Observers: 即将触发 Source (非基于port的,Source0) 回调。</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeSources);</div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);</div><div class="line"></div><div class="line"><span class="comment">/// 4. 触发 Source0 (非基于port的) 回调。</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__(source0);</div><div class="line"></div><div class="line"><span class="comment">/// 5. GCD处理main block</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);</div><div class="line"></div><div class="line"><span class="comment">/// 6. 通知Observers，即将进入休眠</span></div><div class="line"><span class="comment">/// 此处有Observer释放并新建AutoreleasePool: _objc_autoreleasePoolPop(); _objc_autoreleasePoolPush();</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeWaiting);</div><div class="line"></div><div class="line"><span class="comment">/// 7. sleep to wait msg.</span></div><div class="line">mach_msg() -&amp;gt; mach_msg_trap();</div><div class="line"></div><div class="line"><span class="comment">/// 8. 通知Observers，线程被唤醒</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopAfterWaiting);</div><div class="line"></div><div class="line"><span class="comment">/// 9. 如果是被Timer唤醒的，回调Timer</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__(timer);</div><div class="line"></div><div class="line"><span class="comment">/// 9. 如果是被dispatch唤醒的，执行所有调用 dispatch_async 等方法放入main queue 的 block</span></div><div class="line">__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(dispatched_block);</div><div class="line"></div><div class="line"><span class="comment">/// 9. 如果如果Runloop是被 Source1 (基于port的) 的事件唤醒了，处理这个事件</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__(source1);</div><div class="line"></div><div class="line">&#125; <span class="keyword">while</span> (...);</div><div class="line"></div><div class="line"><span class="comment">/// 10. 通知Observers，即将退出RunLoop</span></div><div class="line"><span class="comment">/// 此处有Observer释放AutoreleasePool: _objc_autoreleasePoolPop();</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopExit);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中UI主要集中在<code>__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__(source0);</code><br>和<code>__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__(source1);</code>之前。<br>获取<code>kCFRunLoopBeforeSources</code>到<code>kCFRunLoopBeforeWaiting</code>再到<code>kCFRunLoopAfterWaiting</code>的状态就可以知道是否有卡顿的情况。</p>
<h2 id="NSTimer的实现"><a href="#NSTimer的实现" class="headerlink" title="NSTimer的实现"></a>NSTimer的实现</h2><p>具体代码如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    <span class="comment">//  MonitorController.h</span></div><div class="line">    <span class="comment">//  RunloopMonitorDemo</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">//  Created by game3108 on 16/4/13.</span></div><div class="line">    <span class="comment">//  Copyright © 2016年 game3108. All rights reserved.</span></div><div class="line">    <span class="comment">//</span></div><div class="line"></div><div class="line">    <span class="meta">#import &amp;lt;Foundation/Foundation.h&amp;gt;</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">@interface</span> <span class="title">MonitorController</span> : <span class="title">NSObject</span></span></div><div class="line">    + (<span class="keyword">instancetype</span>) sharedInstance;</div><div class="line">    - (<span class="keyword">void</span>) startMonitor;</div><div class="line">    - (<span class="keyword">void</span>) endMonitor;</div><div class="line">    - (<span class="keyword">void</span>) printLogTrace;</div><div class="line">    <span class="keyword">@end</span></div><div class="line"></div><div class="line">``` </div><div class="line"></div><div class="line">``` objectivec</div><div class="line"></div><div class="line">    <span class="comment">//  MonitorController.m</span></div><div class="line">    <span class="comment">//  RunloopMonitorDemo</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">//  Created by game3108 on 16/4/13.</span></div><div class="line">    <span class="comment">//  Copyright © 2016年 game3108. All rights reserved.</span></div><div class="line">    <span class="comment">//</span></div><div class="line"></div><div class="line">    <span class="meta">#import <span class="meta-string">"MonitorController.h"</span></span></div><div class="line">    <span class="meta">#include &amp;lt;libkern/OSAtomic.h&amp;gt;</span></div><div class="line">    <span class="meta">#include &amp;lt;execinfo.h&amp;gt;</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">@interface</span> <span class="title">MonitorController</span>()</span>&#123;</div><div class="line">    <span class="built_in">CFRunLoopObserverRef</span> _observer;</div><div class="line">    <span class="keyword">double</span> _lastRecordTime;</div><div class="line">    <span class="built_in">NSMutableArray</span> *_backtrace;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">@end</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">@implementation</span> <span class="title">MonitorController</span></span></div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">double</span> _waitStartTime;</div><div class="line"></div><div class="line">    + (<span class="keyword">instancetype</span>) sharedInstance&#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> once;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">id</span> sharedInstance;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;amp;once, ^&#123;</div><div class="line">    sharedInstance = [[<span class="keyword">self</span> alloc] init];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> sharedInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    - (<span class="keyword">void</span>) startMonitor&#123;</div><div class="line">    [<span class="keyword">self</span> addMainThreadObserver];</div><div class="line">    [<span class="keyword">self</span> addSecondaryThreadAndObserver];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    - (<span class="keyword">void</span>) endMonitor&#123;</div><div class="line">    <span class="keyword">if</span> (!_observer) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">CFRunLoopRemoveObserver</span>(<span class="built_in">CFRunLoopGetMain</span>(), _observer, kCFRunLoopCommonModes);</div><div class="line">    <span class="built_in">CFRelease</span>(_observer);</div><div class="line">    _observer = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">#pragma mark printLogTrace</span></div><div class="line">    - (<span class="keyword">void</span>)printLogTrace&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"====================堆栈\n %@ \n"</span>,_backtrace);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">#pragma mark addMainThreadObserver</span></div><div class="line">    - (<span class="keyword">void</span>) addMainThreadObserver &#123;</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">    <span class="comment">//建立自动释放池</span></div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">    <span class="comment">//获得当前thread的Run loop</span></div><div class="line">    <span class="built_in">NSRunLoop</span> *myRunLoop = [<span class="built_in">NSRunLoop</span> currentRunLoop];</div><div class="line"></div><div class="line">    <span class="comment">//设置Run loop observer的运行环境</span></div><div class="line">    <span class="built_in">CFRunLoopObserverContext</span> context = &#123;<span class="number">0</span>, (__bridge <span class="keyword">void</span> *)(<span class="keyword">self</span>), <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line"></div><div class="line">    <span class="comment">//创建Run loop observer对象</span></div><div class="line">    <span class="comment">//第一个参数用于分配observer对象的内存</span></div><div class="line">    <span class="comment">//第二个参数用以设置observer所要关注的事件，详见回调函数myRunLoopObserver中注释</span></div><div class="line">    <span class="comment">//第三个参数用于标识该observer是在第一次进入run loop时执行还是每次进入run loop处理时均执行</span></div><div class="line">    <span class="comment">//第四个参数用于设置该observer的优先级</span></div><div class="line">    <span class="comment">//第五个参数用于设置该observer的回调函数</span></div><div class="line">    <span class="comment">//第六个参数用于设置该observer的运行环境</span></div><div class="line">    _observer = <span class="built_in">CFRunLoopObserverCreate</span>(kCFAllocatorDefault, kCFRunLoopAllActivities, <span class="literal">YES</span>, <span class="number">0</span>, &amp;amp;myRunLoopObserver, &amp;amp;context);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (_observer) &#123;</div><div class="line">    <span class="comment">//将Cocoa的NSRunLoop类型转换成Core Foundation的CFRunLoopRef类型</span></div><div class="line">    <span class="built_in">CFRunLoopRef</span> cfRunLoop = [myRunLoop getCFRunLoop];</div><div class="line">    <span class="comment">//将新建的observer加入到当前thread的run loop</span></div><div class="line">    <span class="built_in">CFRunLoopAddObserver</span>(cfRunLoop, _observer, kCFRunLoopDefaultMode);</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">void</span> myRunLoopObserver(<span class="built_in">CFRunLoopObserverRef</span> observer, <span class="built_in">CFRunLoopActivity</span> activity, <span class="keyword">void</span> *info) &#123;</div><div class="line">    <span class="keyword">switch</span> (activity) &#123;</div><div class="line">    <span class="comment">//The entrance of the run loop, before entering the event processing loop.</span></div><div class="line">    <span class="comment">//This activity occurs once for each call to CFRunLoopRun and CFRunLoopRunInMode</span></div><div class="line">    <span class="keyword">case</span> kCFRunLoopEntry:</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"run loop entry"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    <span class="comment">//Inside the event processing loop before any timers are processed</span></div><div class="line">    <span class="keyword">case</span> kCFRunLoopBeforeTimers:</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"run loop before timers"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    <span class="comment">//Inside the event processing loop before any sources are processed</span></div><div class="line">    <span class="keyword">case</span> kCFRunLoopBeforeSources:</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"run loop before sources"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    <span class="comment">//Inside the event processing loop before the run loop sleeps, waiting for a source or timer to fire.</span></div><div class="line">    <span class="comment">//This activity does not occur if CFRunLoopRunInMode is called with a timeout of 0 seconds.</span></div><div class="line">    <span class="comment">//It also does not occur in a particular iteration of the event processing loop if a version 0 source fires</span></div><div class="line">    <span class="keyword">case</span> kCFRunLoopBeforeWaiting:&#123;</div><div class="line">    _waitStartTime = <span class="number">0</span>;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"run loop before waiting"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//Inside the event processing loop after the run loop wakes up, but before processing the event that woke it up.</span></div><div class="line">    <span class="comment">//This activity occurs only if the run loop did in fact go to sleep during the current loop</span></div><div class="line">    <span class="keyword">case</span> kCFRunLoopAfterWaiting:&#123;</div><div class="line">    _waitStartTime = [[<span class="built_in">NSDate</span> date] timeIntervalSince1970];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"run loop after waiting"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//The exit of the run loop, after exiting the event processing loop.</span></div><div class="line">    <span class="comment">//This activity occurs once for each call to CFRunLoopRun and CFRunLoopRunInMode</span></div><div class="line">    <span class="keyword">case</span> kCFRunLoopExit:</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"run loop exit"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    A combination of all the preceding stages</div><div class="line">    case kCFRunLoopAllActivities:</div><div class="line">    break;</div><div class="line">    */</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">#pragma mark addSecondaryThreadAndObserver</span></div><div class="line">    - (<span class="keyword">void</span>) addSecondaryThreadAndObserver&#123;</div><div class="line">    <span class="built_in">NSThread</span> *thread = [<span class="keyword">self</span> secondaryThread];</div><div class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(addSecondaryTimer) onThread:thread withObject:<span class="literal">nil</span> waitUntilDone:<span class="literal">YES</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    - (<span class="built_in">NSThread</span> *)secondaryThread &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">NSThread</span> *_secondaryThread = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> oncePredicate;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;amp;oncePredicate, ^&#123;</div><div class="line">    _secondaryThread =</div><div class="line">    [[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span></div><div class="line">    selector:<span class="keyword">@selector</span>(networkRequestThreadEntryPoint:)</div><div class="line">    object:<span class="literal">nil</span>];</div><div class="line">    [_secondaryThread start];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> _secondaryThread;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    - (<span class="keyword">void</span>)networkRequestThreadEntryPoint:(<span class="keyword">id</span>)__unused object &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">    [[<span class="built_in">NSThread</span> currentThread] setName:<span class="string">@"monitorControllerThread"</span>];</div><div class="line">    <span class="built_in">NSRunLoop</span> *runLoop = [<span class="built_in">NSRunLoop</span> currentRunLoop];</div><div class="line">    [runLoop addPort:[<span class="built_in">NSMachPort</span> port] forMode:<span class="built_in">NSRunLoopCommonModes</span>];</div><div class="line">    [runLoop run];</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    - (<span class="keyword">void</span>) addSecondaryTimer&#123;</div><div class="line">    <span class="built_in">NSTimer</span> *myTimer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">0.5</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timerFired:) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</div><div class="line">    [[<span class="built_in">NSRunLoop</span> currentRunLoop] addTimer:myTimer forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    - (<span class="keyword">void</span>)timerFired:(<span class="built_in">NSTimer</span> *)timer&#123;</div><div class="line">    <span class="keyword">if</span> ( _waitStartTime &amp;lt; <span class="number">1</span> )&#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> currentTime = [[<span class="built_in">NSDate</span> date] timeIntervalSince1970];</div><div class="line">    <span class="keyword">double</span> timeDiff = currentTime - _waitStartTime;</div><div class="line">    <span class="keyword">if</span> (timeDiff &amp;gt; <span class="number">2.0</span>)&#123;</div><div class="line">    <span class="keyword">if</span> (_lastRecordTime - _waitStartTime &amp;lt; <span class="number">0.001</span> &amp;amp;&amp;amp; _lastRecordTime != <span class="number">0</span>)&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"last time no :%f %f"</span>,timeDiff, _waitStartTime);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span> logStack];</div><div class="line">    _lastRecordTime = _waitStartTime;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    - (<span class="keyword">void</span>)logStack&#123;</div><div class="line">    <span class="keyword">void</span>* callstack[<span class="number">128</span>];</div><div class="line">    <span class="keyword">int</span> frames = backtrace(callstack, <span class="number">128</span>);</div><div class="line">    <span class="keyword">char</span> **strs = backtrace_symbols(callstack, frames);</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    _backtrace = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:frames];</div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &amp;lt; frames ; i++ )&#123;</div><div class="line">    [_backtrace addObject:[<span class="built_in">NSString</span> stringWithUTF8String:strs[i]]];</div><div class="line">    &#125;</div><div class="line">    free(strs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>主要内容是首先在主线程注册了runloop observer的回调<code>myRunLoopObserver</code><br>每次小循环都会记录一下<code>kCFRunLoopAfterWaiting</code>的时间<code>_waitStartTime</code>，并且在<code>kCFRunLoopBeforeWaiting</code>制空。</p>
<p>另外开了一个子线程并开启他的runloop（模仿了AFNetworking的方式），并加上一个timer每隔1秒去进行监测。</p>
<p>如果当前时长与<code>_waitStartTime</code>差距大于2秒，则认为有卡顿情况，并记录了当前堆栈信息。</p>
<p>PS:整个demo写的比较简单，最后获取堆栈也仅获取了当前线程的堆栈信息(<code>[NSThread callStackSymbols]</code>有同样效果)，也在寻找获取所有线程堆栈的方法，欢迎指点一下。</p>
<hr>
<h4 id="更新："><a href="#更新：" class="headerlink" title="更新："></a>更新：</h4><p>了解到 plcrashreporter (<a href="https://github.com/plausiblelabs/plcrashreporter">github地址</a>) 可以做到获取所有线程堆栈。</p>
<hr>
<h4 id="更新2"><a href="#更新2" class="headerlink" title="更新2:"></a>更新2:</h4><p>这篇文章也介绍了监测卡顿的方法：<a href="http://www.starming.com/index.php?v=index&amp;view=91" target="_blank" rel="external">检测iOS的APP性能的一些方法</a><br>通过Dispatch Semaphore保证同步这里记录一下。</p>
<p>写一个Semaphore版本的代码，也放在<a href="https://github.com/game3108/RunloopMonitorDemo">github</a>上：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//  SeMonitorController.h</span></div><div class="line"><span class="comment">//  RunloopMonitorDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by game3108 on 16/4/14.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 game3108. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import &amp;lt;Foundation/Foundation.h&amp;gt;</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SeMonitorController</span> : <span class="title">NSObject</span></span></div><div class="line">+ (<span class="keyword">instancetype</span>) sharedInstance;</div><div class="line">- (<span class="keyword">void</span>) startMonitor;</div><div class="line">- (<span class="keyword">void</span>) endMonitor;</div><div class="line">- (<span class="keyword">void</span>) printLogTrace;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//  SeMonitorController.m</span></div><div class="line"><span class="comment">//  RunloopMonitorDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by game3108 on 16/4/14.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 game3108. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"SeMonitorController.h"</span></span></div><div class="line"><span class="meta">#import &amp;lt;libkern/OSAtomic.h&amp;gt;</span></div><div class="line"><span class="meta">#import &amp;lt;execinfo.h&amp;gt;</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SeMonitorController</span>()</span>&#123;</div><div class="line"><span class="built_in">CFRunLoopObserverRef</span> _observer;</div><div class="line">dispatch_semaphore_t _semaphore;</div><div class="line"><span class="built_in">CFRunLoopActivity</span> _activity;</div><div class="line"><span class="built_in">NSInteger</span> _countTime;</div><div class="line"><span class="built_in">NSMutableArray</span> *_backtrace;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SeMonitorController</span></span></div><div class="line"></div><div class="line">+ (<span class="keyword">instancetype</span>) sharedInstance&#123;</div><div class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> once;</div><div class="line"><span class="keyword">static</span> <span class="keyword">id</span> sharedInstance;</div><div class="line"><span class="built_in">dispatch_once</span>(&amp;amp;once, ^&#123;</div><div class="line">sharedInstance = [[<span class="keyword">self</span> alloc] init];</div><div class="line">&#125;);</div><div class="line"><span class="keyword">return</span> sharedInstance;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>) startMonitor&#123;</div><div class="line">[<span class="keyword">self</span> registerObserver];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>) endMonitor&#123;</div><div class="line"><span class="keyword">if</span> (!_observer) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">CFRunLoopRemoveObserver</span>(<span class="built_in">CFRunLoopGetMain</span>(), _observer, kCFRunLoopCommonModes);</div><div class="line"><span class="built_in">CFRelease</span>(_observer);</div><div class="line">_observer = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>) printLogTrace&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"====================堆栈\n %@ \n"</span>,_backtrace);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> runLoopObserverCallBack(<span class="built_in">CFRunLoopObserverRef</span> observer, <span class="built_in">CFRunLoopActivity</span> activity, <span class="keyword">void</span> *info)</div><div class="line">&#123;</div><div class="line">SeMonitorController *instrance = [SeMonitorController sharedInstance];</div><div class="line">instrance-&amp;gt;_activity = activity;</div><div class="line"><span class="comment">// 发送信号</span></div><div class="line">dispatch_semaphore_t semaphore = instrance-&amp;gt;_semaphore;</div><div class="line">dispatch_semaphore_signal(semaphore);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)registerObserver</div><div class="line">&#123;</div><div class="line"><span class="built_in">CFRunLoopObserverContext</span> context = &#123;<span class="number">0</span>,(__bridge <span class="keyword">void</span>*)<span class="keyword">self</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;;</div><div class="line">_observer = <span class="built_in">CFRunLoopObserverCreate</span>(kCFAllocatorDefault,</div><div class="line">kCFRunLoopAllActivities,</div><div class="line"><span class="literal">YES</span>,</div><div class="line"><span class="number">0</span>,</div><div class="line">&amp;amp;runLoopObserverCallBack,</div><div class="line">&amp;amp;context);</div><div class="line"><span class="built_in">CFRunLoopAddObserver</span>(<span class="built_in">CFRunLoopGetMain</span>(), _observer, kCFRunLoopCommonModes);</div><div class="line"></div><div class="line"><span class="comment">// 创建信号</span></div><div class="line">_semaphore = dispatch_semaphore_create(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">// 在子线程监控时长</span></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line"><span class="keyword">while</span> (<span class="literal">YES</span>)</div><div class="line">&#123;</div><div class="line"><span class="comment">// 假定连续5次超时50ms认为卡顿(当然也包含了单次超时250ms)</span></div><div class="line"><span class="keyword">long</span> st = dispatch_semaphore_wait(_semaphore, dispatch_time(DISPATCH_TIME_NOW, <span class="number">50</span>*<span class="built_in">NSEC_PER_MSEC</span>));</div><div class="line"><span class="keyword">if</span> (st != <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (_activity==kCFRunLoopBeforeSources || _activity==kCFRunLoopAfterWaiting)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (++_countTime &amp;lt; <span class="number">5</span>)</div><div class="line"><span class="keyword">continue</span>;</div><div class="line">[<span class="keyword">self</span> logStack];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"something lag"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">_countTime = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)logStack&#123;</div><div class="line"><span class="keyword">void</span>* callstack[<span class="number">128</span>];</div><div class="line"><span class="keyword">int</span> frames = backtrace(callstack, <span class="number">128</span>);</div><div class="line"><span class="keyword">char</span> **strs = backtrace_symbols(callstack, frames);</div><div class="line"><span class="keyword">int</span> i;</div><div class="line">_backtrace = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:frames];</div><div class="line"><span class="keyword">for</span> ( i = <span class="number">0</span> ; i &amp;lt; frames ; i++ )&#123;</div><div class="line">[_backtrace addObject:[<span class="built_in">NSString</span> stringWithUTF8String:strs[i]]];</div><div class="line">&#125;</div><div class="line">free(strs);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>用Dispatch Semaphore简化了代码复杂度，更加简洁。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/game3108/article/details/51147946" target="_blank" rel="external">本文csdn地址</a><br>1.<a href="http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207890859&amp;idx=1&amp;sn=e98dd604cdb854e7a5808d2072c29162&amp;scene=4#wechat_redirect" target="_blank" rel="external">微信iOS卡顿监控系统</a><br>2.<a href="http://blog.csdn.net/lingedeng/article/details/6870692" target="_blank" rel="external"> </a><a href="http://blog.csdn.net/lingedeng/article/details/6870692" target="_blank" rel="external">iphone——使用run loop对象</a><br>3.<a href="http://blog.ibireme.com/2015/05/18/runloop/" target="_blank" rel="external">深入理解RunLoop</a><br>4.<a href="http://www.starming.com/index.php?v=index&amp;view=91" target="_blank" rel="external">检测iOS的APP性能的一些方法</a><br>5.<a href="http://www.tanhao.me/code/151113.html/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">iOS实时卡顿监控</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自简书作者:&lt;a href=&quot;http://www.jianshu.com/p/71cfbcb15842&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;game3108&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;h
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/"/>
    
      <category term="性能优化" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/iOS/"/>
    
      <category term="性能优化" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="移动开发" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>[转]iOS开发之AFNetworking 3.0.4使用</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2017/03/08/16.2.9_iOS%E5%BC%80%E5%8F%91%E4%B9%8BAFNetworking3.0.4%E4%BD%BF%E7%94%A8/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2017/03/08/16.2.9_iOS开发之AFNetworking3.0.4使用/</id>
    <published>2017-03-08T08:44:53.000Z</published>
    <updated>2017-09-11T12:03:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://www.jianshu.com/p/11bb0d4dc649" target="_blank" rel="external">http://www.jianshu.com/p/11bb0d4dc649</a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本篇主要介绍Runtime在开发中的一些使用场景，顺便讲解了下MJExtension的底层实现。如果喜欢我的文章，可以关注我微博:<a href="http://weibo.com/2034818060/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo" target="_blank" rel="external">袁峥Seemygo</a>,也可以来<a href="http://www.520it.com" target="_blank" rel="external">小码哥</a>，了解下我们的iOS培训课程。后续还会更新更多内容。。。</p>
<h3 id="一、runtime简介"><a href="#一、runtime简介" class="headerlink" title="一、runtime简介"></a>一、runtime简介</h3><ul>
<li>RunTime简称运行时。OC就是<code>运行时机制</code>，也就是在运行时候的一些机制，其中最主要的是消息机制。</li>
<li>对于C语言，<code>函数的调用在编译的时候会决定调用哪个函数</code>。</li>
<li>昨天使用Cocoapods导入AFN做POST的时候，导入的最新版的3.0.4,突然发现找不到AFHTTPRequestOperationManager了。。。上github上一看，发现没有这个了。刚开始以为是cocoapods没有给我导进去，因为是小demo，就想自己写一个网络请求的，发现也没有这NSURLConnection了，被弃用了，突然意识到，这个就是AFHTTPRequestOperationManager找不到的原因了，它是基于NSURLConnection封装的！！于是找了一下，现在都用的是NSURLSession了，AFN中用的是AFHTTPSessionManager了~~<p></p><br><p>特地记录下来，以便遇到这个的朋友们看看！</p><br><p>ps:如果想用以前的话，cocoapods 就不要用最新的版本了，2.6的上面有。</p><br><hr><br><h3>GET请求</h3><br><p></p><p>  <code></code></p><br><pre><code><br>AFHTTPSessionManager *manager = [AFHTTPSessionManager manager]; </code></pre></li>
</ul>
<p>[manager GET:URL parameters:nil progress:^(NSProgress * _Nonnull downloadProgress) {  </p>
<p>}<br> success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {  </p>
<p> NSLog(@”这里打印请求成功要做的事”);  </p>
<p>}</p>
<p>failure:^(NSURLSessionDataTask <em> _Nullable task, NSError </em> _Nonnull   error) {  </p>
<p>NSLog(@”%@”,error);  //这里打印错误信息</p>
<p>}];</p>
<p></p><h3>POST 请求</h3><p></p>
<p></p><p></p><p>  <code></code></p><p></p>
<p><pre><code><br>AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</code></pre></p>
<p>NSMutableDictionary *parameters = @{@””:@””,@””:@””};</p>
<p>[manager POST:URL parameters:parameters progress:^(NSProgress * _Nonnull uploadProgress) {</p>
<p>} success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {</p>
<p>} failure:^(NSURLSessionDataTask <em> _Nullable task, NSError </em> _Nonnull error) {</p>
<p>}];</p>
<p><hr></p>
<p></p><p>暂时用的比较多的就这两个，用到其他的 再来更新！！</p><p></p>
<p></p><h2>最近又用到了下载，索性 上传下载都研究了一下 ，补充进来</h2><p></p>
<p></p><h3>补充试用AFN3.0下载方法</h3><p></p>
<p><pre><code>/**</code></pre></p>
<ul>
<li><p>AFN3.0 下载<br>*/</p>
<ul>
<li>(void)downLoad{</li>
</ul>
<p>//1.创建管理者对象<br>AFHTTPSessionManager <em>manager = [AFHTTPSessionManager manager];<br>//2.确定请求的URL地址<br>NSURL </em>url = [NSURL URLWithString:@””];</p>
<p>//3.创建请求对象<br>NSURLRequest *request = [NSURLRequest requestWithURL:url];</p>
<p>//下载任务<br>NSURLSessionDownloadTask <em>task = [manager downloadTaskWithRequest:request progress:^(NSProgress </em> _Nonnull downloadProgress) {</p>
<pre><code>//打印下下载进度
WKNSLog(@&quot;%lf&quot;,1.0 * downloadProgress.completedUnitCount / downloadProgress.totalUnitCount);
</code></pre><p>} destination:^NSURL <em> _Nonnull(NSURL </em> _Nonnull targetPath, NSURLResponse * _Nonnull response) {</p>
<pre><code>//下载地址
WKNSLog(@&quot;默认下载地址:%@&quot;,targetPath);

//设置下载路径，通过沙盒获取缓存地址，最后返回NSURL对象
NSString *filePath = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES)lastObject];
return [NSURL fileURLWithPath:filePath];
</code></pre></li>
</ul>
<pre><code>} completionHandler:^(NSURLResponse * _Nonnull response, NSURL * _Nullable filePath, NSError * _Nullable error) {

    //下载完成调用的方法
    WKNSLog(@&quot;下载完成：&quot;);
    WKNSLog(@&quot;%@--%@&quot;,response,filePath);

}];

//开始启动任务
[task resume];
</code></pre><p>}</p>
<p></p><h3>AFN3.0 上传</h3><p></p>
<p><pre><code>/**</code></pre></p>
<ul>
<li>AFN 3.0 上传</li>
<li>有两种方式</li>
<li>upLoad1 和 upLoad2<br>*/</li>
</ul>
<p>//第一种方法是通过工程中的文件进行上传</p>
<ul>
<li><p>(void)upLoad1{</p>
<p>  //1。创建管理者对象<br>  AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</p>
<p>  //2.上传文件<br>  NSDictionary *dict = @{@”username”:@”1234”};</p>
<p>  NSString *urlString = @”22222”;<br>  [manager POST:urlString parameters:dict constructingBodyWithBlock:^(id&lt;AFMultipartFormData&gt;  _Nonnull formData) {</p>
<pre><code>//上传文件参数
UIImage *iamge = [UIImage imageNamed:@&quot;123.png&quot;];
NSData *data = UIImagePNGRepresentation(iamge);
//这个就是参数
[formData appendPartWithFileData:data name:@&quot;file&quot; fileName:@&quot;123.png&quot; mimeType:@&quot;image/png&quot;];
</code></pre><p>  } progress:^(NSProgress * _Nonnull uploadProgress) {</p>
<pre><code>//打印下上传进度
WKNSLog(@&quot;%lf&quot;,1.0 *uploadProgress.completedUnitCount / uploadProgress.totalUnitCount);
</code></pre><p>  } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {</p>
<pre><code>//请求成功
WKNSLog(@&quot;请求成功：%@&quot;,responseObject);
</code></pre><p>  } failure:^(NSURLSessionDataTask <em> _Nullable task, NSError </em> _Nonnull error) {</p>
<pre><code>//请求失败
WKNSLog(@&quot;请求失败：%@&quot;,error);
</code></pre><p>  }];</p>
</li>
</ul>
<p>}</p>
<p>//第二种是通过URL来获取路径，进入沙盒或者系统相册等等</p>
<ul>
<li><p>(void)upLoda2{<br>  //1.创建管理者对象<br>  AFHTTPSessionManager <em>manager = [AFHTTPSessionManager manager];<br>  //2.上传文件<br>  NSDictionary </em>dict = @{@”username”:@”1234”};</p>
<p>  NSString *urlString = @”22222”;<br>  [manager POST:urlString parameters:dict constructingBodyWithBlock:^(id&lt;AFMultipartFormData&gt;  _Nonnull formData) {</p>
<pre><code>[formData appendPartWithFileURL:[NSURL fileURLWithPath:@&quot;文件地址&quot;] name:@&quot;file&quot; fileName:@&quot;1234.png&quot; mimeType:@&quot;application/octet-stream&quot; error:nil];
</code></pre><p>  } progress:^(NSProgress * _Nonnull uploadProgress) {</p>
<pre><code>//打印下上传进度
WKNSLog(@&quot;%lf&quot;,1.0 *uploadProgress.completedUnitCount / uploadProgress.totalUnitCount);
</code></pre><p>  } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {</p>
<pre><code>//请求成功
WKNSLog(@&quot;请求成功：%@&quot;,responseObject);
</code></pre><p>  } failure:^(NSURLSessionDataTask <em> _Nullable task, NSError </em> _Nonnull error) {</p>
<pre><code>//请求失败
WKNSLog(@&quot;请求失败：%@&quot;,error);
</code></pre><p>  }];<br>}<br></p><h3>监测当前网络状态（网络监听）</h3><br><pre><code>- (void)AFNetworkStatus{<p></p>
<p>  //1.创建网络监测者<br>  AFNetworkReachabilityManager *manager = [AFNetworkReachabilityManager sharedManager];</p>
<p>  /*枚举里面四个状态  分别对应 未知 无网络 数据 WiFi<br>   typedef NS_ENUM(NSInteger, AFNetworkReachabilityStatus) {</p>
<pre><code>AFNetworkReachabilityStatusUnknown          = -1,      未知
AFNetworkReachabilityStatusNotReachable     = 0,       无网络
AFNetworkReachabilityStatusReachableViaWWAN = 1,       蜂窝数据网络
AFNetworkReachabilityStatusReachableViaWiFi = 2,       WiFi
</code></pre><p>   };<br>   */</p>
<p>  [manager setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {</p>
<pre><code>//这里是监测到网络改变的block  可以写成switch方便
//在里面可以随便写事件
switch (status) {
    case AFNetworkReachabilityStatusUnknown:
        WKNSLog(@&quot;未知网络状态&quot;);
        break;
    case AFNetworkReachabilityStatusNotReachable:
        WKNSLog(@&quot;无网络&quot;);
        break;

    case AFNetworkReachabilityStatusReachableViaWWAN:
        WKNSLog(@&quot;蜂窝数据网&quot;);
        break;

    case AFNetworkReachabilityStatusReachableViaWiFi:
        WKNSLog(@&quot;WiFi网络&quot;);
        break;

    default:
        break;
}
</code></pre><p>  }] ;<br>}</p></code></pre><br><p>有知道新版本用法的各位大神请不吝赐教，小白再次拜谢了！！</p><br><h5>在使用的过程中遇到了一些问题的 总结，<a href="http://www.jianshu.com/p/95a368c6f7de" target="_blank">在这里</a>，有需要的亲们可以去看一下，就不往这里放了，占地方。。。。</h5><br><hr><br><p>多谢各位道友的指正，在下载里面那个地方return [NSURL fileURLWithPath:filePath]; 已经改过来了</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://www.jianshu.com/p/11bb0d4dc649&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/11bb0d4dc649&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/"/>
    
      <category term="AFNetworking" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/AFNetworking/"/>
    
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/iOS/"/>
    
      <category term="AFNetworking" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/AFNetworking/"/>
    
  </entry>
  
  <entry>
    <title>[转]iOS 架构模式--解密 MVC，MVP，MVVM以及VIPER架构</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2016/12/10/16.12.10%20_iOS%20%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F--%E8%A7%A3%E5%AF%86%20MVC%EF%BC%8CMVP%EF%BC%8CMVVM%E4%BB%A5%E5%8F%8AVIPER%E6%9E%B6%E6%9E%84/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2016/12/10/16.12.10 _iOS 架构模式--解密 MVC，MVP，MVVM以及VIPER架构/</id>
    <published>2016-12-10T08:44:53.000Z</published>
    <updated>2017-09-11T13:53:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://www.cocoachina.com/ios/20160108/14916.html" target="_blank" rel="external">http://www.cocoachina.com/ios/20160108/14916.html</a></p>
<p><img src="http://cc.cocimg.com/api/uploads/20160107/1452151424659945.png" alt="302.png" title="1452151424659945.png"></p>
<ul>
<li><p>本文由<a href="http://www.cocoachina.com/ios/20160107/14916.html" target="_blank" rel="external">CocoaChina</a>译者lynulzy（<a href="http://www.cocoachina.com/bbs/u.php?action=show&amp;uid=308292" target="_blank" rel="external">社区ID</a>）翻译</p>
</li>
<li><p>作者：<a href="https://twitter.com/bohdan_orlov" target="_blank" rel="external">Bohdan Orlov</a></p>
</li>
<li><p>原文：<a href="https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52#.vm64nm3ro" target="_blank" rel="external">iOS Architecture Patterns</a></p>
</li>
</ul>
<hr>
<p>在 iOS 中使用 MVC 架构感觉很奇怪？ 迁移到MVVM架构又怀有疑虑？听说过 VIPER 又不确定是否真的值得切换？</p>
<p>相信你会找到以上问题的答案，如果没找到请在评论中指出。</p>
<p>你将要整理出你在 iOS 环境下所有关于架构模式的知识。我们将带领大家简要的回顾一些流行的架构，并且在理论和实践上对它们进行比较，通过一些小的例子深化你的认知。如果对文中提到的一些关键词有兴趣，可以点击连接去查看更详细的内容。</p>
<p>掌控设计模式可能会使人上瘾，所以要当心，你可能会对一些问题清晰明了，不再像阅读之前那样迷惑，比如下面这些问题：</p>
<p>谁应该来负责网络请求？Model 还是 Controller ？</p>
<p>应该怎样向一个新的页面的 ViewModel 传入一个 Model ?</p>
<p>谁来创建一个 VIPER 模块，是 Router 还是 Presenter ?</p>
<p><img src="http://cc.cocimg.com/api/uploads/20160107/1452151474278586.png" alt="10.png" title="1452151474278586.png"></p>
<p><span style="font-size: 18px; color: rgb(0, 176, 80);"><strong>为什么要关注架构设计？</strong></span></p>
<p>因为假如你不关心架构，那么总有一天，需要在同一个庞大的类中调试若干复杂的事情，你会发现在这样的条件下，根本不可能在这个类中快速的找到以及有效的修改任何bug.当然，把这样的一个类想象为一个整体是困难的，因此，有可能一些重要的细节总会在这个过程中会被忽略。如果现在的你正是处于这样一个开发环境中，很有可能具体的情况就像下面这样：</p>
<ul>
<li><p>这个类是一个UIViewController的子类</p>
</li>
<li><p>数据直接在UIViewController中存储</p>
</li>
<li><p>UIView类几乎不做任何事情</p>
</li>
<li><p>Model 仅仅是一个数据结构</p>
</li>
<li><p>单元测试覆盖不了任何用例</p>
</li>
</ul>
<p>以上这些情况仍旧会出现，即使是你遵循了Apple的指导原则并且实现了其 <a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html" target="_blank" rel="external">MVC</a>(模式，所以，大可不必惊慌。Apple所提出的 <a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html" target="_blank" rel="external">MVC</a> 模式存在一些问题，我们之后会详述。</p>
<p>在此，我们可以定义一个好的架构应该具备的特点：</p>
<ol>
<li><p>任务均衡分摊给具有清晰角色的实体</p>
</li>
<li><p>可测试性通常都来自与上一条（对于一个合适的架构是非常容易）</p>
</li>
<li><p>易用性和低成本维护</p>
</li>
</ol>
<p><span style="font-size: 14px;"><strong>为什么采用分布式?</strong></span></p>
<p>采用分布式可以在我们要弄清楚一些事情的原理时保持一个均衡的负载。如果你认为你的开发工作越多，你的大脑越能习惯复杂的思维，其实这是对的。但是，不能忽略的一个事实是，这种思维能力并不是线性增长的，而且也并不能很快的到达峰值。所以，能够战胜这种复杂性的最简单的方法就是在遵循 <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="external">单一功能原则</a> 的前提下，将功能划分给不同的实体。</p>
<p><span style="font-size: 14px;"><strong>为什么需要易测性？</strong></span></p>
<p>其实这条要求对于哪些习惯了单元测试的人并不是一个问题，因为在添加了新的特性或者要增加一些类的复杂性之后通常会失效。这就意味着，测试可以避免开发者在运行时才发现问题—-当应用到达用户的设备，每一次维护都需要浪费长达至少<a href="http://appreviewtimes.com" target="_blank" rel="external">一周</a>的时间才能再次分发给用户。</p>
<p><span style="font-size: 14px;"><strong>为什么需要易用性？</strong></span></p>
<p>这个问题没有固定的答案，但值得一提的是，最好的代码是那些从未写过的代码。因此，代码写的越少，Bug就越少。这意味着希望写更少的代码不应该被单纯的解释为开发者的懒惰，而且也不应该因为偏爱更聪明的解决方案而忽视了它的维护开销。</p>
<p><span style="color: rgb(0, 176, 80); font-size: 18px;"><strong>MV(X）系列概要</strong></span></p>
<p>当今我们已经有很架构设计模式方面的选择:</p>
<ul>
<li><p><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" target="_blank" rel="external">MVC</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter" target="_blank" rel="external">MVP</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Model_View_ViewModel" target="_blank" rel="external">MVVM</a></p>
</li>
<li><p><a href="https://www.objc.io/issues/13-architecture/viper/" target="_blank" rel="external">VIPER</a></p>
</li>
</ul>
<p>前三种设计模式都把一个应用中的实体分为以下三类：</p>
<ul>
<li><p><strong>Models</strong>–负责主要的数据或者操作数据的<a href="https://en.wikipedia.org/wiki/Data_access_layer" target="_blank" rel="external">数据访问层</a>，可以想象 Perspn 和 PersonDataProvider 类。</p>
</li>
<li><p><strong>Views</strong>–负责展示层（GUI），对于iOS环境可以联想一下以 UI 开头的所有类。</p>
</li>
<li><p><strong>Controller/Presenter/ViewModel</strong>–负责协调 Model 和 View，通常根据用户在View上的动作在Model上作出对应的更改，同时将更改的信息返回到View上。</p>
</li>
</ul>
<p>将实体进行划分给我们带来了以下好处：</p>
<ul>
<li><p>更好的理解它们之间的关系</p>
</li>
<li><p>复用（尤其是对于View和Model）</p>
</li>
<li><p>独立的测试</p>
</li>
</ul>
<p>让我们开始了解MV(X)系列，之后再返回到VIPER模式。</p>
<p><span style="color: rgb(0, 176, 80); font-size: 18px;"><strong>MVC的</strong></span><span style="font-size: 18px; color: rgb(0, 176, 80);"><strong>过去</strong></span></p>
<p>在我们探讨Apple的MVC模式之前，我们来看下<a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" target="_blank" rel="external">传统的MVC模式</a>。</p>
<p><img src="http://cc.cocimg.com/api/uploads/20160107/1452152223816977.png" alt="1-E9A5fOrSr0yVmc7Kly5C6A.png" title="1452152223816977.png"></p>
<p>传统的MVC</p>
<p>在这里，View并没有任何界限，仅仅是简单的在Controller中呈现出Model的变化。想象一下，就像网页一样，在点击了跳转到某个其他页面的连接之后就会完全的重新加载页面。尽管在iOS平台上实现这这种MVC模式是没有任何难度的，但是它并不会为我们解决架构问题带来任何裨益。因为它本身也是，三个实体间相互都有通信，而且是紧密耦合的。这很显然会大大降低了三者的复用性，而这正是我们不愿意看到的。鉴于此我们不再给出例子。</p>
<p><span style="color: rgb(127, 127, 127); font-size: 16px;"><strong>“传统的MVC架构不适用于当下的iOS开发”</strong></span></p>
<p><span style="font-size: 18px; color: rgb(0, 176, 80);"><strong>苹果推荐的MVC–</strong></span><span style="font-size: 18px; color: rgb(0, 176, 80);"><strong>愿景</strong></span></p>
<p><img src="http://cc.cocimg.com/api/uploads/20160107/1452152304301101.png" alt="02.png" title="1452152304301101.png"></p>
<p>Cocoa MVC</p>
<p>由于Controller是一个介于View 和 Model之间的协调器，所以View和Model之间没有任何直接的联系。Controller是一个最小可重用单元，这对我们来说是一个好消息，因为我们总要找一个地方来写逻辑复杂度较高的代码，而这些代码又不适合放在Model中。</p>
<p>理论上来讲，这种模式看起来非常直观，但你有没有感到哪里有一丝诡异？你甚至听说过，有人将MVC的缩写展开成（Massive View Controller），更有甚者，<a href="https://www.objc.io/issues/1-view-controllers/lighter-view-controllers/" target="_blank" rel="external">为View controller减负</a>也成为iOS开发者面临的一个重要话题。如果苹果继承并且对MVC模式有一些进展，所有这些为什么还会发生？</p>
<p><span style="color: rgb(0, 176, 80); font-size: 18px;"><strong>苹果推荐的MVC–</strong></span><span style="font-size: 18px; color: rgb(0, 176, 80);"><strong>事实</strong></span></p>
<p><img src="http://cc.cocimg.com/api/uploads/20160107/1452152425723031.png" alt="1-PkWjDU0jqGJOB972cMsrnA.png" title="1452152425723031.png"></p>
<p>Realistic Cocoa MVC</p>
<p>Cocoa的MVC模式驱使人们写出臃肿的视图控制器，因为它们经常被混杂到View的生命周期中，因此很难说View和ViewController是分离的。尽管仍可以将业务逻辑和数据转换到Model，但是大多数情况下当需要为View减负的时候我们却无能为力了，View的最大的任务就是向Controller传递用户动作事件。ViewController最终会承担一切代理和数据源的职责，还负责一些分发和取消网络请求以及一些其他的任务，因此它的名字的由来…你懂的。</p>
<p>你可能会看见过很多次这样的代码：</p>
<pre class="brush:js;toolbar:false">var&nbsp;userCell&nbsp;=&nbsp;tableView.dequeueReusableCellWithIdentifier("identifier")&nbsp;as&nbsp;UserCell
userCell.configureWithUser(user)</pre>

<p>这个cell,正是由View直接来调用Model，所以事实上MVC的原则已经违背了，但是这种情况是一直发生的甚至于人们不觉得这里有哪些不对。如果严格遵守MVC的话，你会把对cell的设置放在 Controller 中，不向View传递一个Model对象，这样就会大大增加Controller的体积。</p>
<p><span style="color: rgb(127, 127, 127); font-size: 16px;"><strong>“Cocoa 的MVC被写成Massive View Controller 是不无道理的。”</strong></span></p>
<p>直到进行<a href="http://nshipster.com/unit-testing/" target="_blank" rel="external">单元测试</a>的时候才会发现问题越来越明显。因为你的ViewController和View是紧密耦合的，对它们进行测试就显得很艰难–你得有足够的创造性来模拟View和它们的生命周期，在以这样的方式来写View Controller的同时，业务逻辑的代码也逐渐被分散到View的布局代码中去。</p>
<p>我们看下一些简单的例子:</p>
<pre class="brush:js;toolbar:false">import&nbsp;UIKit

struct&nbsp;Person&nbsp;{&nbsp;//&nbsp;Model
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;firstName:&nbsp;String
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;lastName:&nbsp;String
}

class&nbsp;GreetingViewController&nbsp;:&nbsp;UIViewController&nbsp;{&nbsp;//&nbsp;View&nbsp;+&nbsp;Controller
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;person:&nbsp;Person!
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;showGreetingButton&nbsp;=&nbsp;UIButton()
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;greetingLabel&nbsp;=&nbsp;UILabel()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;override&nbsp;func&nbsp;viewDidLoad()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.viewDidLoad()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.showGreetingButton.addTarget(self,&nbsp;action:&nbsp;"didTapButton:",&nbsp;forControlEvents:&nbsp;.TouchUpInside)
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;func&nbsp;didTapButton(button:&nbsp;UIButton)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;greeting&nbsp;=&nbsp;"Hello"&nbsp;+&nbsp;"&nbsp;"&nbsp;+&nbsp;self.person.firstName&nbsp;+&nbsp;"&nbsp;"&nbsp;+&nbsp;self.person.lastName
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.greetingLabel.text&nbsp;=&nbsp;greeting
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;layout&nbsp;code&nbsp;goes&nbsp;here
}
//&nbsp;Assembling&nbsp;of&nbsp;MVC
let&nbsp;model&nbsp;=&nbsp;Person(firstName:&nbsp;"David",&nbsp;lastName:&nbsp;"Blaine")
let&nbsp;view&nbsp;=&nbsp;GreetingViewController()
view.person&nbsp;=&nbsp;model;</pre>

<p><span style="font-size: 16px;"><strong><span style="color: rgb(127, 127, 127);">“MVC可以在一个正在显示的ViewController中实现”</span></strong></span></p>
<p>这段代码看起来可测试性并不强，我们可以把和greeting相关的都放到GreetingModel中然后分开测试，但是这样我们就无法通过直接调用在GreetingViewController中的UIView的方法（viewDidLoad和didTapButton方法）来测试页面的展示逻辑了，因为一旦调用则会使整个页面都变化，这对单元测试来讲并不是什么好消息。</p>
<p>事实上，在单独一个模拟器中（比如iPhone 4S）加载并测试UIView并不能保证在其他设备中也能正常工作，因此我建议在单元测试的Target的设置下移除”Host Application”项，并且不要在模拟器中测试你的应用。</p>
<p><span style="color: rgb(127, 127, 127); font-size: 16px;"><strong>“View和Controller的接口**</strong><a href="http://ashfurrow.com/blog/whats-worth-unit-testing-in-objective-c/" target="_blank" rel="external">并不适合单元测试</a>。”**</span></p>
<p>以上所述，似乎Cocoa MVC 看起来是一个相当差的架构方案。我们来重新评估一下文章开头我们提出的MVC一系列的特征:</p>
<ul>
<li><p><strong>任务均摊</strong>–View和Model确实是分开的，但是View和Controller却是紧密耦合的</p>
</li>
<li><p><strong>可测试性</strong>–由于糟糕的分散性，只能对Model进行测试</p>
</li>
<li><p><strong>易用性</strong>–与其他几种模式相比最小的代码量。熟悉的人很多，因而即使对于经验不那么丰富的开发者来讲维护起来也较为容易。</p>
</li>
</ul>
<p>如果你不想在架构选择上投入更多精力，那么Cocoa MVC无疑是最好的方案，而且你会发现一些其他维护成本较高的模式对于你所开发的小的应用是一个致命的打击。</p>
<p><span style="color: rgb(127, 127, 127);"><strong><span style="font-size: 16px;">“就开发速度而言，Cocoa MVC是最好的架构选择方案。”</span></strong></span></p>
<p><span style="font-size: 18px; color: rgb(0, 176, 80);"><strong>MVP&nbsp;<span style="font-size: 18px; line-height: 1.8;">实现了Cocoa的MVC的愿景</span></strong></span></p>
<p><img src="http://cc.cocimg.com/api/uploads/20160107/1452152673569726.png" alt="021.png" title="1452152673569726.png"></p>
<p>Passive View variant of MVP</p>
<p>这看起来不正是苹果所提出的MVC方案吗？确实是的，这种模式的名字叫做MVC，但是，这就是说苹果的MVC实际上就是<a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter" target="_blank" rel="external">MVP</a>了？不，并不是这样的。如果你仔细回忆一下，View是和Controller紧密耦合的，但是MVP的协调器Presenter并没有对ViewController的生命周期做任何改变，因此View可以很容易的被模拟出来。在Presenter中根本没有和布局有关的代码，但是它却负责更新View的数据和状态。</p>
<p><img src="http://cc.cocimg.com/api/uploads/20160107/1452152798105670.png" alt="QQ截图20160107154558.png" title="1452152798105670.png"></p>
<p><strong><span style="font-size: 18px; color: rgb(127, 127, 127);">“假如告诉你UIViewController就是View呢？”</span></strong></p>
<p>就MVP而言，UIViewController的子类实际上就是Views并不是Presenters。这点区别使得这种模式的可测试性得到了极大的提高，付出的代价是开发速度的一些降低，因为必须要做一些手动的数据和事件绑定，从下例中可以看出：</p>
<pre class="brush:js;toolbar:false">import&nbsp;UIKit

struct&nbsp;Person&nbsp;{&nbsp;//&nbsp;Model
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;firstName:&nbsp;String
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;lastName:&nbsp;String
}

protocol&nbsp;GreetingView:&nbsp;class&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;func&nbsp;setGreeting(greeting:&nbsp;String)
}

protocol&nbsp;GreetingViewPresenter&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;init(view:&nbsp;GreetingView,&nbsp;person:&nbsp;Person)
&nbsp;&nbsp;&nbsp;&nbsp;func&nbsp;showGreeting()
}

class&nbsp;GreetingPresenter&nbsp;:&nbsp;GreetingViewPresenter&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;unowned&nbsp;let&nbsp;view:&nbsp;GreetingView
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;person:&nbsp;Person
&nbsp;&nbsp;&nbsp;&nbsp;required&nbsp;init(view:&nbsp;GreetingView,&nbsp;person:&nbsp;Person)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.view&nbsp;=&nbsp;view
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.person&nbsp;=&nbsp;person
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;func&nbsp;showGreeting()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;greeting&nbsp;=&nbsp;"Hello"&nbsp;+&nbsp;"&nbsp;"&nbsp;+&nbsp;self.person.firstName&nbsp;+&nbsp;"&nbsp;"&nbsp;+&nbsp;self.person.lastName
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.view.setGreeting(greeting)
&nbsp;&nbsp;&nbsp;&nbsp;}
}

class&nbsp;GreetingViewController&nbsp;:&nbsp;UIViewController,&nbsp;GreetingView&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;presenter:&nbsp;GreetingViewPresenter!
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;showGreetingButton&nbsp;=&nbsp;UIButton()
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;greetingLabel&nbsp;=&nbsp;UILabel()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;override&nbsp;func&nbsp;viewDidLoad()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.viewDidLoad()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.showGreetingButton.addTarget(self,&nbsp;action:&nbsp;"didTapButton:",&nbsp;forControlEvents:&nbsp;.TouchUpInside)
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;func&nbsp;didTapButton(button:&nbsp;UIButton)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.presenter.showGreeting()
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;func&nbsp;setGreeting(greeting:&nbsp;String)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.greetingLabel.text&nbsp;=&nbsp;greeting
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;layout&nbsp;code&nbsp;goes&nbsp;here
}
//&nbsp;Assembling&nbsp;of&nbsp;MVP
let&nbsp;model&nbsp;=&nbsp;Person(firstName:&nbsp;"David",&nbsp;lastName:&nbsp;"Blaine")
let&nbsp;view&nbsp;=&nbsp;GreetingViewController()
let&nbsp;presenter&nbsp;=&nbsp;GreetingPresenter(view:&nbsp;view,&nbsp;person:&nbsp;model)
view.presenter&nbsp;=&nbsp;presenter</pre>

<p><strong>关于整合问题的重要说明</strong></p>
<p>MVP是第一个如何协调整合三个实际上分离的层次的架构模式，既然我们不希望View涉及到Model，那么在显示的View Controller（其实就是View）中处理这种协调的逻辑就是不正确的，因此我们需要在其他地方来做这些事情。例如，我们可以做基于整个App范围内的路由服务，由它来负责执行协调任务，以及View到View的展示。这个出现并且必须处理的问题不仅仅是在MVP模式中，同时也存在于以下集中方案中。</p>
<p>我们来看下MVP模式下的三个特性的分析：</p>
<ul>
<li><p>任务均摊–我们将最主要的任务划分到Presenter和Model，而View的功能较少（虽然上述例子中Model的任务也并不多）。</p>
</li>
<li><p>可测试性–非常好，由于一个功能简单的View层，所以测试大多数业务逻辑也变得简单</p>
</li>
<li><p>易用性–在我们上边不切实际的简单的例子中，代码量是MVC模式的2倍，但同时MVP的概念却非常清晰</p>
</li>
</ul>
<p><span style="font-size: 18px; color: rgb(127, 127, 127);"><strong>“iOS 中的MVP意味着可测试性强、代码量大。”</strong></span></p>
<p><span style="font-size: 18px; color: rgb(0, 176, 80);"><strong>MVP–<span style="font-size: 18px; line-height: 1.8;">绑定和信号</span></strong></span></p>
<p>还有一些其他形态的MVP–监控控制器的MVP。</p>
<p>这个变体包含了View和Model之间的直接绑定，但是Presenter仍然来管理来自View的动作事件，同时也能胜任对View的更新。</p>
<p><img src="http://cc.cocimg.com/api/uploads/20160107/1452152939657296.png" alt="022.png" title="1452152939657296.png"></p>
<p>Supervising Presenter variant of the MVP</p>
<p>但是我们之前就了解到，模糊的职责划分是非常糟糕的，更何况将View和Model紧密的联系起来。这和Cocoa的桌面开发的原理有些相似。</p>
<p>和传统的MVC一样，写这样的例子没有什么价值，故不再给出。</p>
<p><span style="color: rgb(0, 176, 80); font-size: 18px;"><strong>MVVM–<span style="color: rgb(0, 176, 80); line-height: 1.8;">最新且是最伟大的MV(X)系列的一员</span></strong></span></p>
<p><a href="https://en.wikipedia.org/wiki/Model_View_ViewModel" target="_blank" rel="external">MVVM</a>架构是MV(X)系列最新的一员，因此让我们希望它已经考虑到MV(X)系列中之前已经出现的问题。</p>
<p>从理论层面来讲MVVM看起来不错，我们已经非常熟悉View和Model，以及Meditor，在MVVM中它是View Model。</p>
<p><img src="http://cc.cocimg.com/api/uploads/20160107/1452153249521047.png" alt="023.png" title="1452153249521047.png"></p>
<p>MVVM</p>
<p>它和MVP模式看起来非常像:</p>
<ul>
<li><p>MVVM将ViewController视作View</p>
</li>
<li><p>在View和Model之间没有紧密的联系</p>
</li>
</ul>
<p>此外，它还有像监管版本的MVP那样的绑定功能，但这个绑定不是在View和Model之间而是在View和ViewModel之间。</p>
<p>那么问题来了，在iOS中ViewModel实际上代表什么？它基本上就是UIKit下的每个控件以及控件的状态。ViewModel调用会改变Model同时会将Model的改变更新到自身并且因为我们绑定了View和ViewModel，第一步就是相应的更新状态。</p>
<p><strong>绑定</strong></p>
<p>我在MVP部分已经提到这点了，但是该部分我们仍会继续讨论。</p>
<p><span style="line-height: 1.8;">如果我们自己不想自己实现，那么我们有两种选择:</span></p>
<ul>
<li><p>基于KVO的绑定库如 <a href="https://github.com/Raizlabs/RZDataBinding">RZDataBinding</a> 和 <a href="https://github.com/SwiftBond/Bond">SwiftBond</a></p>
</li>
<li><p>完全的<a href="https://gist.github.com/JaviLorbada/4a7bd6129275ebefd5a6" target="_blank" rel="external">函数响应式编程</a>，比如像<a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a><span style="line-height: 1.8;">、<a href="https://github.com/ReactiveX/RxSwift/">RxSwift</a>或者 <a href="https://github.com/mxcl/PromiseKit">PromiseKit</a></span></p>
</li>
</ul>
<p><span style="line-height: 1.8;">事实上，尤其是最近，你听到MVVM就会想到ReactiveCoca，反之亦然。尽管通过简单的绑定来使用MVVM是可实现的，但是ReactiveCocoa却能更好的发挥MVVM的特点。</span></p>
<p>但是关于这个框架有一个不得不说的事实：强大的能力来自于巨大的责任。当你开始使用Reactive的时候有很大的可能就会把事情搞砸。换句话来说就是，如果发现了一些错误，调试出这个bug可能会花费大量的时间，看下函数调用栈：</p>
<p><img src="http://cc.cocimg.com/api/uploads/20160107/1452153404430638.png" alt="1-WGIs3XQL1MtKiyApr-m9bg.png" title="1452153404430638.png"></p>
<p>Reactive Debugging</p>
<p>在我们简单的例子中，FRF框架和KVO被过渡禁用，取而代之地我们直接去调用showGreeting方法更新ViewModel，以及通过greetingDidChange 回调函数使用属性。</p>
<pre class="brush:js;toolbar:false">import&nbsp;UIKit

struct&nbsp;Person&nbsp;{&nbsp;//&nbsp;Model
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;firstName:&nbsp;String
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;lastName:&nbsp;String
}

protocol&nbsp;GreetingViewModelProtocol:&nbsp;class&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;greeting:&nbsp;String?&nbsp;{&nbsp;get&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;greetingDidChange:&nbsp;((GreetingViewModelProtocol)&nbsp;->&nbsp;())?&nbsp;{&nbsp;get&nbsp;set&nbsp;}&nbsp;//&nbsp;function&nbsp;to&nbsp;call&nbsp;when&nbsp;greeting&nbsp;did&nbsp;change
&nbsp;&nbsp;&nbsp;&nbsp;init(person:&nbsp;Person)
&nbsp;&nbsp;&nbsp;&nbsp;func&nbsp;showGreeting()
}

class&nbsp;GreetingViewModel&nbsp;:&nbsp;GreetingViewModelProtocol&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;person:&nbsp;Person
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;greeting:&nbsp;String?&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;didSet&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.greetingDidChange?(self)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;greetingDidChange:&nbsp;((GreetingViewModelProtocol)&nbsp;->&nbsp;())?
&nbsp;&nbsp;&nbsp;&nbsp;required&nbsp;init(person:&nbsp;Person)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.person&nbsp;=&nbsp;person
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;func&nbsp;showGreeting()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.greeting&nbsp;=&nbsp;"Hello"&nbsp;+&nbsp;"&nbsp;"&nbsp;+&nbsp;self.person.firstName&nbsp;+&nbsp;"&nbsp;"&nbsp;+&nbsp;self.person.lastName
&nbsp;&nbsp;&nbsp;&nbsp;}
}

class&nbsp;GreetingViewController&nbsp;:&nbsp;UIViewController&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;viewModel:&nbsp;GreetingViewModelProtocol!&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;didSet&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.viewModel.greetingDidChange&nbsp;=&nbsp;{&nbsp;[unowned&nbsp;self]&nbsp;viewModel&nbsp;in
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.greetingLabel.text&nbsp;=&nbsp;viewModel.greeting
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;showGreetingButton&nbsp;=&nbsp;UIButton()
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;greetingLabel&nbsp;=&nbsp;UILabel()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;override&nbsp;func&nbsp;viewDidLoad()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.viewDidLoad()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.showGreetingButton.addTarget(self.viewModel,&nbsp;action:&nbsp;"showGreeting",&nbsp;forControlEvents:&nbsp;.TouchUpInside)
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;layout&nbsp;code&nbsp;goes&nbsp;here
}
//&nbsp;Assembling&nbsp;of&nbsp;MVVM
let&nbsp;model&nbsp;=&nbsp;Person(firstName:&nbsp;"David",&nbsp;lastName:&nbsp;"Blaine")
let&nbsp;viewModel&nbsp;=&nbsp;GreetingViewModel(person:&nbsp;model)
let&nbsp;view&nbsp;=&nbsp;GreetingViewController()
view.viewModel&nbsp;=&nbsp;viewModel</pre>

<p>让我们再来看看关于三个特性的评估：</p>
<ul>
<li><p>任务均摊 – 在例子中并不是很清晰，但是事实上，MVVM的View要比MVP中的View承担的责任多。因为前者通过ViewModel的设置绑定来更新状态，而后者只监听Presenter的事件但并不会对自己有什么更新。</p>
</li>
<li><p>可测试性 – ViewModel不知道关于View的任何事情，这允许我们可以轻易的测试ViewModel。同时View也可以被测试，但是由于属于UIKit的范畴，对他们的测试通常会被忽略。</p>
</li>
<li><p>易用性 – 在我们例子中的代码量和MVP的差不多，但是在实际开发中，我们必须把View中的事件指向Presenter并且手动的来更新View，如果使用绑定的话，MVVM代码量将会小的多。</p>
</li>
</ul>
<p><span style="font-size: 16px; color: rgb(127, 127, 127);"><strong>“MVVM很诱人，因为它集合了上述方法的优点，并且由于在View层的绑定，它并不需要其他附加的代码来更新View，尽管这样，可测试性依然很强。”</strong></span></p>
<p><span style="font-size: 18px; color: rgb(0, 176, 80);"><strong>VIPER–<span style="font-size: 18px; line-height: 1.8;">把LEGO建筑经验迁移到iOS app的设计</span></strong></span></p>
<p><a href="https://www.objc.io/issues/13-architecture/viper/" target="_blank" rel="external">VIPER</a>是我们最后要介绍的，由于不是来自于MV(X)系列，它具备一定的趣味性。</p>
<p>迄今为止，划分责任的粒度是很好的选择。VIPER在责任划分层面进行了迭代，VIPER分为五个层次:</p>
<p><img src="http://cc.cocimg.com/api/uploads/20160107/1452153564205784.png" alt="024.png" title="1452153564205784.png"></p>
<p>V<span style="line-height: 1.8;">IPER</span></p>
<ul>
<li><p><strong>交互器 </strong>– 包括关于数据和网络请求的业务逻辑，例如创建一个实体（数据），或者从服务器中获取一些数据。为了实现这些功能，需要使用服务、管理器，但是他们并不被认为是VIPER架构内的模块，而是外部依赖。</p>
</li>
<li><p><strong>展示器</strong> – 包含UI层面的业务逻辑以及在交互器层面的方法调用。</p>
</li>
<li><p><strong>实体</strong> – 普通的数据对象，不属于数据访问层次，因为数据访问属于交互器的职责。</p>
</li>
<li><p><strong>路由器</strong> – 用来连接VIPER的各个模块。</p>
</li>
</ul>
<p>基本上，VIPER模块可以是一个屏幕或者用户使用应用的整个过程–想想认证过程，可以由一屏完成或者需要几步才能完成，你的模块期望是多大的，这取决于你。</p>
<p>当我们把VIPER和MV(X)系列作比较时，我们会在任务均摊性方面发现一些不同:</p>
<ul>
<li><p><strong>Model</strong> 逻辑通过把实体作为最小的数据结构转换到交互器中。</p>
</li>
<li><p><strong>Controller/Presenter/ViewModel</strong>的UI展示方面的职责移到了Presenter中，但是并没有数据转换相关的操作。</p>
</li>
<li><p><strong>VIPER</strong>是第一个通过路由器实现明确的地址导航模式。</p>
</li>
</ul>
<p><span style="font-size: 16px; color: rgb(127, 127, 127);"><strong>“找到一个适合的方法来实现路由对于iOS应用是一个挑战，MV(X)系列避开了这个问题。”</strong></span></p>
<p>例子中并不包含路由和模块之间的交互，所以和MV(X)系列部分架构一样不再给出例子。</p>
<p><span style="white-space: nowrap;"></span></p>
<pre class="brush:js;toolbar:false">import&nbsp;UIKit

struct&nbsp;Person&nbsp;{&nbsp;//&nbsp;Entity&nbsp;(usually&nbsp;more&nbsp;complex&nbsp;e.g.&nbsp;NSManagedObject)
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;firstName:&nbsp;String
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;lastName:&nbsp;String
}

struct&nbsp;GreetingData&nbsp;{&nbsp;//&nbsp;Transport&nbsp;data&nbsp;structure&nbsp;(not&nbsp;Entity)
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;greeting:&nbsp;String
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;subject:&nbsp;String
}

protocol&nbsp;GreetingProvider&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;func&nbsp;provideGreetingData()
}

protocol&nbsp;GreetingOutput:&nbsp;class&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;func&nbsp;receiveGreetingData(greetingData:&nbsp;GreetingData)
}

class&nbsp;GreetingInteractor&nbsp;:&nbsp;GreetingProvider&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;weak&nbsp;var&nbsp;output:&nbsp;GreetingOutput!
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;func&nbsp;provideGreetingData()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;person&nbsp;=&nbsp;Person(firstName:&nbsp;"David",&nbsp;lastName:&nbsp;"Blaine")&nbsp;//&nbsp;usually&nbsp;comes&nbsp;from&nbsp;data&nbsp;access&nbsp;layer
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;subject&nbsp;=&nbsp;person.firstName&nbsp;+&nbsp;"&nbsp;"&nbsp;+&nbsp;person.lastName
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;greeting&nbsp;=&nbsp;GreetingData(greeting:&nbsp;"Hello",&nbsp;subject:&nbsp;subject)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.output.receiveGreetingData(greeting)
&nbsp;&nbsp;&nbsp;&nbsp;}
}

protocol&nbsp;GreetingViewEventHandler&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;func&nbsp;didTapShowGreetingButton()
}

protocol&nbsp;GreetingView:&nbsp;class&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;func&nbsp;setGreeting(greeting:&nbsp;String)
}

class&nbsp;GreetingPresenter&nbsp;:&nbsp;GreetingOutput,&nbsp;GreetingViewEventHandler&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;weak&nbsp;var&nbsp;view:&nbsp;GreetingView!
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;greetingProvider:&nbsp;GreetingProvider!
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;func&nbsp;didTapShowGreetingButton()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.greetingProvider.provideGreetingData()
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;func&nbsp;receiveGreetingData(greetingData:&nbsp;GreetingData)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;greeting&nbsp;=&nbsp;greetingData.greeting&nbsp;+&nbsp;"&nbsp;"&nbsp;+&nbsp;greetingData.subject
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.view.setGreeting(greeting)
&nbsp;&nbsp;&nbsp;&nbsp;}
}

class&nbsp;GreetingViewController&nbsp;:&nbsp;UIViewController,&nbsp;GreetingView&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;eventHandler:&nbsp;GreetingViewEventHandler!
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;showGreetingButton&nbsp;=&nbsp;UIButton()
&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;greetingLabel&nbsp;=&nbsp;UILabel()
&nbsp;&nbsp;&nbsp;&nbsp;override&nbsp;func&nbsp;viewDidLoad()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.viewDidLoad()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.showGreetingButton.addTarget(self,&nbsp;action:&nbsp;"didTapButton:",&nbsp;forControlEvents:&nbsp;.TouchUpInside)
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;func&nbsp;didTapButton(button:&nbsp;UIButton)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.eventHandler.didTapShowGreetingButton()
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;func&nbsp;setGreeting(greeting:&nbsp;String)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.greetingLabel.text&nbsp;=&nbsp;greeting
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;layout&nbsp;code&nbsp;goes&nbsp;here
}
//&nbsp;Assembling&nbsp;of&nbsp;VIPER&nbsp;module,&nbsp;without&nbsp;Router
let&nbsp;view&nbsp;=&nbsp;GreetingViewController()
let&nbsp;presenter&nbsp;=&nbsp;GreetingPresenter()
let&nbsp;interactor&nbsp;=&nbsp;GreetingInteractor()
view.eventHandler&nbsp;=&nbsp;presenter
presenter.view&nbsp;=&nbsp;view
presenter.greetingProvider&nbsp;=&nbsp;interactor
interactor.output&nbsp;=&nbsp;presenter</pre>

<p><span style="line-height: 1.8;">让我们再来评估一下特性:</span></p>
<ul>
<li><p>任务均摊 – 毫无疑问，VIPER是任务划分中的佼佼者。</p>
</li>
<li><p>可测试性 – 不出意外地，更好的分布性就有更好的可测试性。</p>
</li>
<li><p>易用性 – 最后你可能已经猜到了维护成本方面的问题。你必须为很小功能的类写出大量的接口。</p>
</li>
</ul>
<p><strong>什么是LEGO</strong></p>
<p>当使用VIPER时，你的感觉就像是用乐高积木来搭建一个城堡，这也是一个表明当前存在一些问题的信号。可能现在就应用VIPER架构还为时过早，考虑一些更为简单的模式可能会更好。一些人会忽略这些<a href="https://inessential.com/2014/03/16/smaller_please" target="_blank" rel="external">问题</a>，大材小用。假定他们笃信VIPER架构会在未来给他们的应用带来一些好处，虽然现在维护起来确实是有些不合理。如果你也持这样的观点，我为你推荐 <a href="https://github.com/rambler-ios/Generamba">Generamba</a> 这个用来搭建VIPER架构的工具。虽然我个人感觉，使用起来就像加农炮的自动瞄准系统，而不是简单的像投石器那样的简单的抛掷。</p>
<p><span style="font-size: 18px; color: rgb(0, 176, 80);"><strong><span style="font-size: 18px; line-height: 1.8;">总结</span></strong></span></p>
<p>我们了解了集中架构模式，希望你已经找到了到底是什么在困扰你。毫无疑问通过阅读本篇文章，你已经了解到其实并没有完全的银弹。所以选择架构是一个根据实际情况具体分析利弊的过程。</p>
<p>因此，在同一个应用中包含着多种架构。比如，你开始的时候使用MVC，然后突然意识到一个页面在MVC模式下的变得越来越难以维护，然后就切换到MVVM架构，但是仅仅针对这一个页面。并没有必要对哪些MVC模式下运转良好的页面进行重构，因为二者是可以并存的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://www.cocoachina.com/ios/20160108/14916.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cocoachina.com/ios/20160108/1491
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/"/>
    
      <category term="架构模式" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/iOS/"/>
    
      <category term="架构" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="MVC" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/MVC/"/>
    
      <category term="MVP" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/MVP/"/>
    
      <category term="MVVM" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/MVVM/"/>
    
      <category term="VIPER" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/VIPER/"/>
    
  </entry>
  
  <entry>
    <title>[转]iOS可视化动态绘制八种排序过程</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2016/10/21/16.10.21_iOS%E5%8F%AF%E8%A7%86%E5%8C%96%E5%8A%A8%E6%80%81%E7%BB%98%E5%88%B6%E5%85%AB%E7%A7%8D%E6%8E%92%E5%BA%8F%E8%BF%87%E7%A8%8B/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2016/10/21/16.10.21_iOS可视化动态绘制八种排序过程/</id>
    <published>2016-10-21T02:44:53.000Z</published>
    <updated>2017-09-11T13:15:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://www.cocoachina.com/ios/20170105/18522.html" target="_blank" rel="external">http://www.cocoachina.com/ios/20170105/18522.html</a></p>
<p>前面几篇博客都是关于排序的，在之前陆陆续续发布的博客中，我们先后介绍了冒泡排序、选择排序、插入排序、希尔排序、堆排序、归并排序以及快速排序。俗话说的好，做事儿要善始善终，本篇博客就算是对之前那几篇博客的总结了。而本篇博客的示例Demo也是在之前那些博客Demo的基础上做的，也算是集成了各种排序的方法，然后给出了可视化的解决方案。今天博客的内容还是比较有趣的。</p>
<p>因为本猿是做iOS开发的，所以就使用iOS相关的组件来表示上述各种排序的过程。使用可视化方式来感受一下上述这些排序方法的异同。本篇博客所使用的相关的排序代码都是来自于之前的博客。因为我们在之前实现各种排序Demo时，我们定义了相应的排序接口SortType，所以上述的七种排序对外的调用方式是一致的，所以在此基础上给出相应排序的可视化解决方案并不困难。本篇博客就会给出其相应的扩展过程。</p>
<p>如果你想对上述7中排序进行详细的了解，请移步与之前的博客《<a href="http://www.cnblogs.com/ludashi/p/6031379.html" target="_blank" rel="external">冒泡排序、插入排序、希尔排序、选择排序</a>》、《<a href="http://www.cnblogs.com/ludashi/p/6043006.html" target="_blank" rel="external">堆排序</a>》、《<a href="http://www.cnblogs.com/ludashi/p/6051871.html" target="_blank" rel="external">归并排序</a>》、《<a href="http://www.cnblogs.com/ludashi/p/6051912.html" target="_blank" rel="external">快速排序</a>》、《<a href="http://www.cnblogs.com/ludashi/p/6069807.html" target="_blank" rel="external">基数排序</a>》。废话少说，开始今天的博客。</p>
<p><span style="font-size: 14px;"><strong>一、可视化解决方案综述</strong></span></p>
<p><strong>1.交互UI综述</strong></p>
<p>在本篇博客的第一部分我们先来整体的看一下我们Demo的功能。下方就是我们今天博客中的Demo的交互示意图。上方的输入框可以输入要排序元素的个数，下方输入的是300。程序会根据你输入的个数来随机生成数据，你输入300，就会随机生成300个数据提供排序使用。下方的SegmentControl可以选择不同的排序方式，本篇博客给出了7中常用的排序方式，选择完排序方式后可以点击右上方的排序按钮进行相应的排序。</p>
<p>下方显示的不同颜色的颜色条就是我们要排序的东西，我们会按照从小到大的方式对这些色条进行排序。左图中是未排序的状态，右图中是已经排序的状态。我们上面随机生成的数据反应到色条上就是色条的高度，我们按照色条的高度进行从小到大的排序。下方会给出每种排序的介绍。　</p>
<p><img src="http://cc.cocimg.com/api/uploads/20170104/1483541042427587.png" alt="5.png" title="1483541042427587.png"></p>
<p><strong>2、部分核心代码实现</strong></p>
<p>为了实现今天的Demo，我们需要对之前我们实现的那一些列的排序的方法进行扩展。因为我们之前在实现各种排序时，我们先定义了SortType接口，依据“开放封闭原则”，我们可以为各种排序的类创建一个“简单工厂”以供我们的视图层使用。关于设计模式更多以及更详细的内容，可以移步之前发布的设计模式系列博客《设计模式Swift版》。　　</p>
<p>上方就是为各种Sort类提供的“简单工厂”。上面这个简单工厂在视图控制器中点击SegmentControl时会使用，因为我们在选择不同排序类的时候需要使用不同的排序对象。下方就是我们视图控制器对“简单工厂”的调用，当然我们所有排序类都有父类，你也可以使用“工厂方法”来创建相应的对象，在此就不做过多赘述了。</p>
<p><img src="http://cc.cocimg.com/api/uploads/20170104/1483541057169487.png" alt="545446-20161115151207185-49120727.png" title="1483541057169487.png"></p>
<p>下方代码段就是点击SegmentControl要调用的方法，其中从“简单工厂”中获取到相应排序方式的对象后，然后在设置相应的闭包回调。</p>
<p><img src="http://cc.cocimg.com/api/uploads/20170104/1483541089985015.png" alt="545446-20161115163118092-560378900.png" title="1483541089985015.png">　　</p>
<p><strong>二、冒泡排序</strong></p>
<p>接下来我们来逐一看一下每种排序的具体效果。下方就是冒泡排序的效果，因为冒泡排序的时间复杂度是O(n^2)的，所以我们先设置元素个数是80， 如果太大的话会比较慢。因为我们在排序步骤结果输出时，每进行一次交换操作或者比较操作让排序线程休眠0.001秒，便于我们观察整个排序过程。</p>
<p>从下方这个动图上我们不难看出冒泡的整个过程，较小的数据从右往左以此往外冒。下方这个效果还是比较直观的，整个冒泡过程就是从后往前比较，如果后边的数要比前边的小就交换。冒泡过程如下所示：</p>
<p><img src="http://cc.cocimg.com/api/uploads/20170104/1483541263890536.gif" alt="202.gif" title="1483541263890536.gif"></p>
<p><strong>三、选择排序</strong></p>
<p>选择排序的时间复杂度也是O(n^2)。下方是“选择排序”的可视化过程，选择排序的过程就是从无序序列中找出最小的那个值放到有序序列中最后方。不断执行这个过程，我们的序列就是有序的了。下方就是选择排序的整个过程，元素的个数是80.</p>
<p><img src="http://cc.cocimg.com/api/uploads/20170104/1483541288284901.gif" alt="303.gif" title="1483541288284901.gif"></p>
<p><strong><span style="line-height: 1.8;">四、插入排序</span></strong></p>
<p>插入排序的复杂度与上述选择排序的时间复杂度一样，都是O(n^2)。下方就是插入排序的运行结果。插入排序是从无序序列中取出第一个值，然后插入到前方有序序列中相应的位置。每次插入后，有序序列就会增加1，无序序列就会减少1。下方就是插入排序的过程，如下所示：</p>
<p><img src="http://cc.cocimg.com/api/uploads/20170104/1483541303642900.gif" alt="404.gif" title="1483541303642900.gif"></p>
<p><strong>五、希尔排序</strong></p>
<p>希尔排序的效率要高一些，其时间复杂度是O(n^(3/2))。下方就是希尔排序的具体执行步骤，希尔排序又称为缩小增量排序。该排序方式是插入排序的升级版，等增量缩小到1时，我们的序列就是有序的了。下方就是希尔排序的具体执行步骤，如下所示：</p>
<p><img src="http://cc.cocimg.com/api/uploads/20170104/1483541325818326.gif" alt="505.gif" title="1483541325818326.gif"></p>
<p><strong>六、堆排序</strong></p>
<p>堆排序比希尔排序更为高效，其时间复杂度为O(nlog2n)。下方的“堆排序”是根据大顶堆来进行排序的，大顶堆第一个值是序列中最大的，我们可以利用这一点获取无序序列中最大的那个值。首先我们将序列调整为大顶堆，然后把大顶堆的第一个值与最后一个值进行交换，然后再将剩下的序列调整成大顶堆，然后进行下一轮的替换。</p>
<p><img src="http://cc.cocimg.com/api/uploads/20170104/1483541346957748.gif" alt="606.gif" title="1483541346957748.gif"></p>
<p><strong>七、归并排序</strong></p>
<p>归并排序的时间复杂度也是O(nlog2n)。归并排序就是将无序数组拆分成多个只有一个元素的数组，然后进行两两合并。在合并的过程中将两个数组中的元素进行比较，将较小的放在前方，两个有序的数组合并后依然是有序的，然后再次进行两两合并，直到合并成一个数组为止。下方就是归并排序的执行顺序，从执行过程中，我们可以清楚的看到在排序过程中被分割的小的有序序列。归并排序的执行过程如下所示：</p>
<p><img src="http://cc.cocimg.com/api/uploads/20170104/1483541367382388.gif" alt="707.gif" title="1483541367382388.gif"></p>
<p><strong>八、快速排序</strong></p>
<p>快速排序的时间复杂度为O(nlog2n)。下方是快速排序的执行步骤，快速排序是利用里分治法的思想。从无序序列中取出一个值，比该值大的放在前方，比该值小的放在后方。然后递归执行前半部分和后半部分依次递归下去，我们的序列就是有序的了。</p>
<p><img src="http://cc.cocimg.com/api/uploads/20170104/1483541384567939.gif" alt="808.gif" title="1483541384567939.gif"></p>
<p><strong>九、基数排序</strong></p>
<p>下方是基数排序的运行效果，我们先输入1000个元素，生成1000个随机数，选择基数排序。如下所示：</p>
<p><img src="http://cc.cocimg.com/api/uploads/20170104/1483541403606999.gif" alt="909.gif" title="1483541403606999.gif"></p>
<p><strong>十、上述排序的比较</strong></p>
<p>关于上述排序的比较，在此就不做过多赘述了，就引用“维基百科”中的表格来说明吧，如下所示:　　</p>
<p>今天博客中所涉及的Demo依然会在github上进行分享，分享地址如下。</p>
<p>github源码分享地址：<a href="https://github.com/lizelu/DataStruct-Swift/tree/master/AllKindsOfSortForiOS">https://github.com/lizelu/DataStruct-Swift/tree/master/AllKindsOfSortForiOS</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://www.cocoachina.com/ios/20170105/18522.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cocoachina.com/ios/20170105/1852
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/"/>
    
      <category term="swift" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/swift/"/>
    
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/iOS/"/>
    
      <category term="数据结构和算法" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
      <category term="swift" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/swift/"/>
    
      <category term="动画" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>[转]iOS Crash 分析</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2016/09/10/16.9.10_iOS_Crash%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2016/09/10/16.9.10_iOS_Crash分析/</id>
    <published>2016-09-10T04:44:53.000Z</published>
    <updated>2017-09-11T13:11:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://blog.csdn.net/diyagoanyhacker/article/details/41247367" target="_blank" rel="external">http://blog.csdn.net/diyagoanyhacker/article/details/41247367</a></p>
<p><a href="http://blog.csdn.net/diyagoanyhacker/article/details/41247367" target="_blank" rel="external">iOS Crash 分析（文一）- 开始</a><br><a href="http://blog.csdn.net/diyagoanyhacker/article/details/41247389" target="_blank" rel="external">iOS Crash 分析（文二）-崩溃日志组成</a><br><a href="http://blog.csdn.net/diyagoanyhacker/article/details/41247411" target="_blank" rel="external">iOS Crash 分析（文三）- 符号化崩溃日志</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://blog.csdn.net/diyagoanyhacker/article/details/41247367&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/diyagoanyh
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/"/>
    
      <category term="Crash" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/Crash/"/>
    
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/iOS/"/>
    
      <category term="Crash" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/Crash/"/>
    
  </entry>
  
  <entry>
    <title>[转]一步一步写算法（之 算法总结）</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2016/07/13/16.7.13%20_%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%86%99%E7%AE%97%E6%B3%95%EF%BC%88%E4%B9%8B%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%EF%BC%89/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2016/07/13/16.7.13 _一步一步写算法（之算法总结）/</id>
    <published>2016-07-13T00:44:10.000Z</published>
    <updated>2017-09-11T12:04:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://blog.csdn.net/feixiaoxing/article/details/6993718" target="_blank" rel="external">http://blog.csdn.net/feixiaoxing/article/details/6993718</a></p>
<p>&nbsp;&nbsp; &nbsp;自10月初编写算法系列的博客以来，陆陆续续以来写了几十篇。按照计划，还有三个部分的内容没有介绍，主要是（Dijkstra算法、二叉平衡树、红黑树）。这部分会在后面的博客补充完整。这里主要是做一个总结，有兴趣的朋友可以好好看看，欢迎大家提出宝贵意见。</p>
<p>&nbsp;&nbsp; &nbsp;<strong>（1） 排序算法</strong></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6845132" target="_blank" rel="external">快速排序 </a><br>&nbsp;&nbsp; &nbsp;&nbsp;</p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6846008" target="_blank" rel="external">合并排序</a></p>
<p>&nbsp;&nbsp; <a href="http://blog.csdn.net/feixiaoxing/article/details/6846664" target="_blank" rel="external">&nbsp;堆排序</a></p>
<p>&nbsp;&nbsp; <a href="http://blog.csdn.net/feixiaoxing/article/details/6874619" target="_blank" rel="external">&nbsp;选择排序</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6876831" target="_blank" rel="external">基数排序</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6844826" target="_blank" rel="external">冒泡排序</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6844826" target="_blank" rel="external">插入排序</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6844826" target="_blank" rel="external">希尔排序</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6905260" target="_blank" rel="external">链表排序</a></p>
<p>&nbsp;&nbsp; &nbsp;<strong>（2） 数据结构</strong></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6847885" target="_blank" rel="external">线性队列</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6847998" target="_blank" rel="external">线性堆栈</a></p>
<p>&nbsp;&nbsp; <a href="http://blog.csdn.net/feixiaoxing/article/details/6848077" target="_blank" rel="external">&nbsp;单向链表</a></p>
<p>&nbsp;&nbsp; <a href="http://blog.csdn.net/feixiaoxing/article/details/6849457" target="_blank" rel="external">&nbsp;双向链表</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6853455" target="_blank" rel="external">循环单向链表</a></p>
<p>&nbsp;&nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6860493" target="_blank" rel="external"> &nbsp;排序二叉树</a>（<a href="http://blog.csdn.net/feixiaoxing/article/details/6863946" target="_blank" rel="external">插入</a>，删除<a href="http://blog.csdn.net/feixiaoxing/article/details/6867460" target="_blank" rel="external">上</a>、<a href="http://blog.csdn.net/feixiaoxing/article/details/6867997" target="_blank" rel="external">中</a>、<a href="http://blog.csdn.net/feixiaoxing/article/details/6868221" target="_blank" rel="external">下</a>、<a href="http://blog.csdn.net/feixiaoxing/article/details/6892471" target="_blank" rel="external">保存和加载</a>）</p>
<p>&nbsp;&nbsp; <a href="http://blog.csdn.net/feixiaoxing/article/details/6885657" target="_blank" rel="external">&nbsp;哈希表</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6901584" target="_blank" rel="external">哈希二叉树</a></p>
<p>&nbsp;&nbsp; &nbsp;</p>
<p>&nbsp;&nbsp; &nbsp;<strong>（3）图</strong></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6918768" target="_blank" rel="external">图结构</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6922766" target="_blank" rel="external">图创建</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6926004" target="_blank" rel="external">图的添加、删除</a></p>
<p>&nbsp;&nbsp; <a href="http://blog.csdn.net/feixiaoxing/article/details/6929586" target="_blank" rel="external">&nbsp;图的保存</a></p>
<p>&nbsp;&nbsp; &nbsp;prim算法（<a href="http://blog.csdn.net/feixiaoxing/article/details/6937338" target="_blank" rel="external">上</a>、<a href="http://blog.csdn.net/feixiaoxing/article/details/6938916" target="_blank" rel="external">中</a>、<a href="http://blog.csdn.net/feixiaoxing/article/details/6940335" target="_blank" rel="external">下</a>）</p>
<p>&nbsp;&nbsp; &nbsp;哈夫曼树（<a href="http://blog.csdn.net/feixiaoxing/article/details/6960990" target="_blank" rel="external">上</a>、<a href="http://blog.csdn.net/feixiaoxing/article/details/6963136" target="_blank" rel="external">下</a>） &nbsp; &nbsp;</p>
<p>&nbsp;&nbsp; &nbsp;克鲁斯卡尔算法（<a href="http://blog.csdn.net/feixiaoxing/article/details/6969776" target="_blank" rel="external">上</a>、<a href="http://blog.csdn.net/feixiaoxing/article/details/6974826" target="_blank" rel="external">中</a>、<a href="http://blog.csdn.net/feixiaoxing/article/details/6978095" target="_blank" rel="external">下</a>）</p>
<p>&nbsp;&nbsp; &nbsp;</p>
<p>&nbsp;&nbsp; &nbsp;<strong>（4）常用算法</strong></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6844723" target="_blank" rel="external">查找</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6847808" target="_blank" rel="external">内存分配</a></p>
<p>&nbsp;&nbsp; &nbsp;字符串查找（<a href="http://blog.csdn.net/feixiaoxing/article/details/6908453" target="_blank" rel="external">上</a>、<a href="http://blog.csdn.net/feixiaoxing/article/details/6911730" target="_blank" rel="external">中</a>、<a href="http://blog.csdn.net/feixiaoxing/article/details/6915588" target="_blank" rel="external">下</a>）</p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6957546" target="_blank" rel="external">通用数据结构</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6953562" target="_blank" rel="external">通用算法</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6838362" target="_blank" rel="external">循环和递归</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6838773" target="_blank" rel="external">递归和堆栈</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6839301" target="_blank" rel="external">内存中的数据</a></p>
<p>&nbsp;&nbsp; <a href="http://blog.csdn.net/feixiaoxing/article/details/6982932" target="_blank" rel="external">&nbsp;A*算法</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6989591" target="_blank" rel="external">可变参数</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6933416" target="_blank" rel="external">函数堆栈</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6894981" target="_blank" rel="external">递归寻路</a></p>
<p>&nbsp;&nbsp; <a href="http://blog.csdn.net/feixiaoxing/article/details/6897095" target="_blank" rel="external">&nbsp;广度遍历</a>、<a href="http://blog.csdn.net/feixiaoxing/article/details/6897644" target="_blank" rel="external">深度遍历</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6889211" target="_blank" rel="external">排序二叉树线索化</a></p>
<p>&nbsp;&nbsp; &nbsp;<strong>（5）趣味算法题目</strong></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6933416" target="_blank" rel="external">链表逆转</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6856686" target="_blank" rel="external">大数计算</a></p>
<p>&nbsp;&nbsp; <a href="http://blog.csdn.net/feixiaoxing/article/details/6856936" target="_blank" rel="external">&nbsp;n！末位0个数计算</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6860339" target="_blank" rel="external">洗牌算法</a></p>
<p>&nbsp;&nbsp; <a href="http://blog.csdn.net/feixiaoxing/article/details/6917556" target="_blank" rel="external">&nbsp;“数星星”</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6877965" target="_blank" rel="external">八皇后</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6877461" target="_blank" rel="external">数据选择</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6871294" target="_blank" rel="external">单词统计</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6871148" target="_blank" rel="external">爬楼梯</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6871148" target="_blank" rel="external">回数</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6949758" target="_blank" rel="external">链表重合</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6945730" target="_blank" rel="external">寻找丢失的数</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6991770" target="_blank" rel="external">最大公约数、最小公倍数</a></p>
<p>&nbsp;&nbsp; &nbsp;<a href="http://blog.csdn.net/feixiaoxing/article/details/6882510" target="_blank" rel="external">挑选最大的n个数</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://blog.csdn.net/feixiaoxing/article/details/6993718&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/feixiaoxing/art
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/"/>
    
      <category term="c/c++" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/c-c/"/>
    
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/iOS/"/>
    
      <category term="c/c++" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/c-c/"/>
    
      <category term="数据结构和算法" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[转]iOS用CGContextRef画各种图形</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2016/06/01/16.6.1_IOS%E7%94%A8CGContextRef%E7%94%BB%E5%90%84%E7%A7%8D%E5%9B%BE%E5%BD%A2/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2016/06/01/16.6.1_IOS用CGContextRef画各种图形/</id>
    <published>2016-06-01T02:04:33.000Z</published>
    <updated>2017-09-11T12:04:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://blog.csdn.net/rhljiayou/article/details/9919713" target="_blank" rel="external">http://blog.csdn.net/rhljiayou/article/details/9919713</a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>首先了解一下CGContextRef:<br>An opaque type that represents a Quartz 2D drawing environment.<br>Graphics Context是图形上下文,可以将其理解为一块画布,我们可以在上面进行绘画操作,绘制完成后,将画布放到我们的view中显示即可,view看作是一个画框.<br>自己学习时实现的demo，希望对大家有帮助，具体的实现看代码，并有完美的注释解释，还有一些对我帮助的博文供大家参考。都在代码里面。<br>看一下demo效果图先：<br><a href="http://img.blog.csdn.net/20130812112413640?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcmhsamlheW91/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" target="_blank" rel="external"><img src="http://img.blog.csdn.net/20130812112413640?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcmhsamlheW91/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></a></p>
<p>自定义CustomView类,CustomView.h:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span>  </span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;QuartzCore/QuartzCore.h&gt;</span>  </span></div><div class="line"><span class="meta">#define PI 3.14159265358979323846  </span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CustomView</span> : <span class="title">UIView</span>  </span></div><div class="line">  </div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>实现类CustomView.m：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"CustomView.h"</span>  </span></div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CustomView</span>  </span></div><div class="line">  </div><div class="line">- (<span class="keyword">id</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];  </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="comment">// 覆盖drawRect方法，你可以在此自定义绘画和动画  </span></div><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect  </div><div class="line">&#123;  </div><div class="line">    <span class="comment">//An opaque type that represents a Quartz 2D drawing environment.  </span></div><div class="line">    <span class="comment">//一个不透明类型的Quartz 2D绘画环境,相当于一个画布,你可以在上面任意绘画  </span></div><div class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();  </div><div class="line">      </div><div class="line">    <span class="comment">/*写文字*/</span>  </div><div class="line">    <span class="built_in">CGContextSetRGBFillColor</span> (context,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>);<span class="comment">//设置填充颜色  </span></div><div class="line">    <span class="built_in">UIFont</span>  *font = [<span class="built_in">UIFont</span> boldSystemFontOfSize:<span class="number">15.0</span>];<span class="comment">//设置  </span></div><div class="line">    [<span class="string">@"画圆："</span> drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">80</span>, <span class="number">20</span>) withFont:font];  </div><div class="line">    [<span class="string">@"画线及孤线："</span> drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">80</span>, <span class="number">100</span>, <span class="number">20</span>) withFont:font];  </div><div class="line">    [<span class="string">@"画矩形："</span> drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">120</span>, <span class="number">80</span>, <span class="number">20</span>) withFont:font];  </div><div class="line">    [<span class="string">@"画扇形和椭圆："</span> drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">160</span>, <span class="number">110</span>, <span class="number">20</span>) withFont:font];  </div><div class="line">    [<span class="string">@"画三角形："</span> drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">220</span>, <span class="number">80</span>, <span class="number">20</span>) withFont:font];  </div><div class="line">    [<span class="string">@"画圆角矩形："</span> drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">260</span>, <span class="number">100</span>, <span class="number">20</span>) withFont:font];  </div><div class="line">    [<span class="string">@"画贝塞尔曲线："</span> drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">300</span>, <span class="number">100</span>, <span class="number">20</span>) withFont:font];  </div><div class="line">    [<span class="string">@"图片："</span> drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">340</span>, <span class="number">80</span>, <span class="number">20</span>) withFont:font];  </div><div class="line">  </div><div class="line">    <span class="comment">/*画圆*/</span>  </div><div class="line">    <span class="comment">//边框圆  </span></div><div class="line">    <span class="built_in">CGContextSetRGBStrokeColor</span>(context,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1.0</span>);<span class="comment">//画笔线的颜色  </span></div><div class="line">    <span class="built_in">CGContextSetLineWidth</span>(context, <span class="number">1.0</span>);<span class="comment">//线的宽度  </span></div><div class="line">    <span class="comment">//void CGContextAddArc(CGContextRef c,CGFloat x, CGFloat y,CGFloat radius,CGFloat startAngle,CGFloat endAngle, int clockwise)1弧度＝180°/π （≈57.3°） 度＝弧度×180°/π 360°＝360×π/180 ＝2π 弧度   </span></div><div class="line">    <span class="comment">// x,y为圆点坐标，radius半径，startAngle为开始的弧度，endAngle为 结束的弧度，clockwise 0为顺时针，1为逆时针。  </span></div><div class="line">    <span class="built_in">CGContextAddArc</span>(context, <span class="number">100</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">2</span>*PI, <span class="number">0</span>); <span class="comment">//添加一个圆  </span></div><div class="line">    <span class="built_in">CGContextDrawPath</span>(context, kCGPathStroke); <span class="comment">//绘制路径  </span></div><div class="line">      </div><div class="line">    <span class="comment">//填充圆，无边框  </span></div><div class="line">    <span class="built_in">CGContextAddArc</span>(context, <span class="number">150</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">0</span>, <span class="number">2</span>*PI, <span class="number">0</span>); <span class="comment">//添加一个圆  </span></div><div class="line">    <span class="built_in">CGContextDrawPath</span>(context, kCGPathFill);<span class="comment">//绘制填充  </span></div><div class="line">      </div><div class="line">    <span class="comment">//画大圆并填充颜  </span></div><div class="line">    <span class="built_in">UIColor</span>*aColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">1</span> green:<span class="number">0.0</span> blue:<span class="number">0</span> alpha:<span class="number">1</span>];  </div><div class="line">    <span class="built_in">CGContextSetFillColorWithColor</span>(context, aColor.CGColor);<span class="comment">//填充颜色  </span></div><div class="line">    <span class="built_in">CGContextSetLineWidth</span>(context, <span class="number">3.0</span>);<span class="comment">//线的宽度  </span></div><div class="line">    <span class="built_in">CGContextAddArc</span>(context, <span class="number">250</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">2</span>*PI, <span class="number">0</span>); <span class="comment">//添加一个圆  </span></div><div class="line">    <span class="comment">//kCGPathFill填充非零绕数规则,kCGPathEOFill表示用奇偶规则,kCGPathStroke路径,kCGPathFillStroke路径填充,kCGPathEOFillStroke表示描线，不是填充  </span></div><div class="line">    <span class="built_in">CGContextDrawPath</span>(context, kCGPathFillStroke); <span class="comment">//绘制路径加填充  </span></div><div class="line">      </div><div class="line">    <span class="comment">/*画线及孤线*/</span>  </div><div class="line">    <span class="comment">//画线  </span></div><div class="line">    <span class="built_in">CGPoint</span> aPoints[<span class="number">2</span>];<span class="comment">//坐标点  </span></div><div class="line">    aPoints[<span class="number">0</span>] =<span class="built_in">CGPointMake</span>(<span class="number">100</span>, <span class="number">80</span>);<span class="comment">//坐标1  </span></div><div class="line">    aPoints[<span class="number">1</span>] =<span class="built_in">CGPointMake</span>(<span class="number">130</span>, <span class="number">80</span>);<span class="comment">//坐标2  </span></div><div class="line">    <span class="comment">//CGContextAddLines(CGContextRef c, const CGPoint points[],size_t count)  </span></div><div class="line">    <span class="comment">//points[]坐标数组，和count大小  </span></div><div class="line">    <span class="built_in">CGContextAddLines</span>(context, aPoints, <span class="number">2</span>);<span class="comment">//添加线  </span></div><div class="line">    <span class="built_in">CGContextDrawPath</span>(context, kCGPathStroke); <span class="comment">//根据坐标绘制路径  </span></div><div class="line">      </div><div class="line">    <span class="comment">//画笑脸弧线  </span></div><div class="line">    <span class="comment">//左  </span></div><div class="line">    <span class="built_in">CGContextSetRGBStrokeColor</span>(context, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);<span class="comment">//改变画笔颜色  </span></div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(context, <span class="number">140</span>, <span class="number">80</span>);<span class="comment">//开始坐标p1  </span></div><div class="line">    <span class="comment">//CGContextAddArcToPoint(CGContextRef c, CGFloat x1, CGFloat y1,CGFloat x2, CGFloat y2, CGFloat radius)  </span></div><div class="line">    <span class="comment">//x1,y1跟p1形成一条线的坐标p2，x2,y2结束坐标跟p3形成一条线的p3,radius半径,注意, 需要算好半径的长度,  </span></div><div class="line">    <span class="built_in">CGContextAddArcToPoint</span>(context, <span class="number">148</span>, <span class="number">68</span>, <span class="number">156</span>, <span class="number">80</span>, <span class="number">10</span>);  </div><div class="line">    <span class="built_in">CGContextStrokePath</span>(context);<span class="comment">//绘画路径  </span></div><div class="line">      </div><div class="line">    <span class="comment">//右  </span></div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(context, <span class="number">160</span>, <span class="number">80</span>);<span class="comment">//开始坐标p1  </span></div><div class="line">    <span class="comment">//CGContextAddArcToPoint(CGContextRef c, CGFloat x1, CGFloat y1,CGFloat x2, CGFloat y2, CGFloat radius)  </span></div><div class="line">    <span class="comment">//x1,y1跟p1形成一条线的坐标p2，x2,y2结束坐标跟p3形成一条线的p3,radius半径,注意, 需要算好半径的长度,  </span></div><div class="line">    <span class="built_in">CGContextAddArcToPoint</span>(context, <span class="number">168</span>, <span class="number">68</span>, <span class="number">176</span>, <span class="number">80</span>, <span class="number">10</span>);  </div><div class="line">    <span class="built_in">CGContextStrokePath</span>(context);<span class="comment">//绘画路径  </span></div><div class="line">      </div><div class="line">    <span class="comment">//右  </span></div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(context, <span class="number">150</span>, <span class="number">90</span>);<span class="comment">//开始坐标p1  </span></div><div class="line">    <span class="comment">//CGContextAddArcToPoint(CGContextRef c, CGFloat x1, CGFloat y1,CGFloat x2, CGFloat y2, CGFloat radius)  </span></div><div class="line">    <span class="comment">//x1,y1跟p1形成一条线的坐标p2，x2,y2结束坐标跟p3形成一条线的p3,radius半径,注意, 需要算好半径的长度,  </span></div><div class="line">    <span class="built_in">CGContextAddArcToPoint</span>(context, <span class="number">158</span>, <span class="number">102</span>, <span class="number">166</span>, <span class="number">90</span>, <span class="number">10</span>);  </div><div class="line">    <span class="built_in">CGContextStrokePath</span>(context);<span class="comment">//绘画路径  </span></div><div class="line">    <span class="comment">//注，如果还是没弄明白怎么回事，请参考：http://donbe.blog.163.com/blog/static/138048021201052093633776/  </span></div><div class="line">      </div><div class="line">    <span class="comment">/*画矩形*/</span>  </div><div class="line">    <span class="built_in">CGContextStrokeRect</span>(context,<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">120</span>, <span class="number">10</span>, <span class="number">10</span>));<span class="comment">//画方框  </span></div><div class="line">    <span class="built_in">CGContextFillRect</span>(context,<span class="built_in">CGRectMake</span>(<span class="number">120</span>, <span class="number">120</span>, <span class="number">10</span>, <span class="number">10</span>));<span class="comment">//填充框  </span></div><div class="line">    <span class="comment">//矩形，并填弃颜色  </span></div><div class="line">    <span class="built_in">CGContextSetLineWidth</span>(context, <span class="number">2.0</span>);<span class="comment">//线的宽度  </span></div><div class="line">    aColor = [<span class="built_in">UIColor</span> blueColor];<span class="comment">//blue蓝色  </span></div><div class="line">    <span class="built_in">CGContextSetFillColorWithColor</span>(context, aColor.CGColor);<span class="comment">//填充颜色  </span></div><div class="line">    aColor = [<span class="built_in">UIColor</span> yellowColor];  </div><div class="line">    <span class="built_in">CGContextSetStrokeColorWithColor</span>(context, aColor.CGColor);<span class="comment">//线框颜色  </span></div><div class="line">    <span class="built_in">CGContextAddRect</span>(context,<span class="built_in">CGRectMake</span>(<span class="number">140</span>, <span class="number">120</span>, <span class="number">60</span>, <span class="number">30</span>));<span class="comment">//画方框  </span></div><div class="line">    <span class="built_in">CGContextDrawPath</span>(context, kCGPathFillStroke);<span class="comment">//绘画路径  </span></div><div class="line">      </div><div class="line">    <span class="comment">//矩形，并填弃渐变颜色  </span></div><div class="line">    <span class="comment">//关于颜色参考http://blog.sina.com.cn/s/blog_6ec3c9ce01015v3c.html  </span></div><div class="line">    <span class="comment">//http://blog.csdn.net/reylen/article/details/8622932  </span></div><div class="line">    <span class="comment">//第一种填充方式，第一种方式必须导入类库quartcore并#import &lt;QuartzCore/QuartzCore.h&gt;，这个就不属于在context上画，而是将层插入到view层上面。那么这里就设计到Quartz Core 图层编程了。  </span></div><div class="line">    <span class="built_in">CAGradientLayer</span> *gradient1 = [<span class="built_in">CAGradientLayer</span> layer];  </div><div class="line">    gradient1.frame = <span class="built_in">CGRectMake</span>(<span class="number">240</span>, <span class="number">120</span>, <span class="number">60</span>, <span class="number">30</span>);  </div><div class="line">    gradient1.colors = [<span class="built_in">NSArray</span> arrayWithObjects:(<span class="keyword">id</span>)[<span class="built_in">UIColor</span> whiteColor].CGColor,  </div><div class="line">                        (<span class="keyword">id</span>)[<span class="built_in">UIColor</span> grayColor].CGColor,  </div><div class="line">                        (<span class="keyword">id</span>)[<span class="built_in">UIColor</span> blackColor].CGColor,  </div><div class="line">                        (<span class="keyword">id</span>)[<span class="built_in">UIColor</span> yellowColor].CGColor,  </div><div class="line">                        (<span class="keyword">id</span>)[<span class="built_in">UIColor</span> blueColor].CGColor,  </div><div class="line">                        (<span class="keyword">id</span>)[<span class="built_in">UIColor</span> redColor].CGColor,  </div><div class="line">                        (<span class="keyword">id</span>)[<span class="built_in">UIColor</span> greenColor].CGColor,  </div><div class="line">                        (<span class="keyword">id</span>)[<span class="built_in">UIColor</span> orangeColor].CGColor,  </div><div class="line">                        (<span class="keyword">id</span>)[<span class="built_in">UIColor</span> brownColor].CGColor,<span class="literal">nil</span>];  </div><div class="line">    [<span class="keyword">self</span>.layer insertSublayer:gradient1 atIndex:<span class="number">0</span>];  </div><div class="line">    <span class="comment">//第二种填充方式   </span></div><div class="line">    <span class="built_in">CGColorSpaceRef</span> rgb = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();  </div><div class="line">    <span class="built_in">CGFloat</span> colors[] =  </div><div class="line">    &#123;  </div><div class="line">        <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>, <span class="number">1.00</span>,  </div><div class="line">        <span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>, <span class="number">1.00</span>,  </div><div class="line">        <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>, <span class="number">1.00</span>,  </div><div class="line">        <span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>, <span class="number">1.00</span>,  </div><div class="line">        <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>, <span class="number">1.00</span>,  </div><div class="line">        <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>, <span class="number">1.00</span>,  </div><div class="line">        <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>, <span class="number">1.00</span>,  </div><div class="line">        <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, <span class="number">1.00</span>,  </div><div class="line">    &#125;;  </div><div class="line">    <span class="built_in">CGGradientRef</span> gradient = <span class="built_in">CGGradientCreateWithColorComponents</span>  </div><div class="line">    (rgb, colors, <span class="literal">NULL</span>, <span class="keyword">sizeof</span>(colors)/(<span class="keyword">sizeof</span>(colors[<span class="number">0</span>])*<span class="number">4</span>));<span class="comment">//形成梯形，渐变的效果   </span></div><div class="line">    <span class="built_in">CGColorSpaceRelease</span>(rgb);  </div><div class="line">    <span class="comment">//画线形成一个矩形  </span></div><div class="line">    <span class="comment">//CGContextSaveGState与CGContextRestoreGState的作用  </span></div><div class="line">    <span class="comment">/* </span></div><div class="line">     CGContextSaveGState函数的作用是将当前图形状态推入堆栈。之后，您对图形状态所做的修改会影响随后的描画操作，但不影响存储在堆栈中的拷贝。在修改完成后，您可以通过CGContextRestoreGState函数把堆栈顶部的状态弹出，返回到之前的图形状态。这种推入和弹出的方式是回到之前图形状态的快速方法，避免逐个撤消所有的状态修改；这也是将某些状态（比如裁剪路径）恢复到原有设置的唯一方式。 </div><div class="line">     */  </div><div class="line">    <span class="built_in">CGContextSaveGState</span>(context);  </div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(context, <span class="number">220</span>, <span class="number">90</span>);  </div><div class="line">    <span class="built_in">CGContextAddLineToPoint</span>(context, <span class="number">240</span>, <span class="number">90</span>);  </div><div class="line">    <span class="built_in">CGContextAddLineToPoint</span>(context, <span class="number">240</span>, <span class="number">110</span>);  </div><div class="line">    <span class="built_in">CGContextAddLineToPoint</span>(context, <span class="number">220</span>, <span class="number">110</span>);  </div><div class="line">    <span class="built_in">CGContextClip</span>(context);<span class="comment">//context裁剪路径,后续操作的路径  </span></div><div class="line">    <span class="comment">//CGContextDrawLinearGradient(CGContextRef context,CGGradientRef gradient, CGPoint startPoint, CGPoint endPoint,CGGradientDrawingOptions options)  </span></div><div class="line">    <span class="comment">//gradient渐变颜色,startPoint开始渐变的起始位置,endPoint结束坐标,options开始坐标之前or开始之后开始渐变  </span></div><div class="line">    <span class="built_in">CGContextDrawLinearGradient</span>(context, gradient,<span class="built_in">CGPointMake</span>  </div><div class="line">                                (<span class="number">220</span>,<span class="number">90</span>) ,<span class="built_in">CGPointMake</span>(<span class="number">240</span>,<span class="number">110</span>),  </div><div class="line">                                kCGGradientDrawsAfterEndLocation);  </div><div class="line">    <span class="built_in">CGContextRestoreGState</span>(context);<span class="comment">// 恢复到之前的context  </span></div><div class="line">      </div><div class="line">    <span class="comment">//再写一个看看效果  </span></div><div class="line">    <span class="built_in">CGContextSaveGState</span>(context);  </div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(context, <span class="number">260</span>, <span class="number">90</span>);  </div><div class="line">    <span class="built_in">CGContextAddLineToPoint</span>(context, <span class="number">280</span>, <span class="number">90</span>);  </div><div class="line">    <span class="built_in">CGContextAddLineToPoint</span>(context, <span class="number">280</span>, <span class="number">100</span>);  </div><div class="line">    <span class="built_in">CGContextAddLineToPoint</span>(context, <span class="number">260</span>, <span class="number">100</span>);  </div><div class="line">    <span class="built_in">CGContextClip</span>(context);<span class="comment">//裁剪路径  </span></div><div class="line">    <span class="comment">//说白了，开始坐标和结束坐标是控制渐变的方向和形状  </span></div><div class="line">    <span class="built_in">CGContextDrawLinearGradient</span>(context, gradient,<span class="built_in">CGPointMake</span>  </div><div class="line">                                (<span class="number">260</span>, <span class="number">90</span>) ,<span class="built_in">CGPointMake</span>(<span class="number">260</span>, <span class="number">100</span>),  </div><div class="line">                                kCGGradientDrawsAfterEndLocation);  </div><div class="line">    <span class="built_in">CGContextRestoreGState</span>(context);<span class="comment">// 恢复到之前的context  </span></div><div class="line">      </div><div class="line">    <span class="comment">//下面再看一个颜色渐变的圆  </span></div><div class="line">    <span class="built_in">CGContextDrawRadialGradient</span>(context, gradient, <span class="built_in">CGPointMake</span>(<span class="number">300</span>, <span class="number">100</span>), <span class="number">0.0</span>, <span class="built_in">CGPointMake</span>(<span class="number">300</span>, <span class="number">100</span>), <span class="number">10</span>, kCGGradientDrawsBeforeStartLocation);  </div><div class="line">      </div><div class="line">    <span class="comment">/*画扇形和椭圆*/</span>  </div><div class="line">    <span class="comment">//画扇形，也就画圆，只不过是设置角度的大小，形成一个扇形  </span></div><div class="line">    aColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">0</span> green:<span class="number">1</span> blue:<span class="number">1</span> alpha:<span class="number">1</span>];  </div><div class="line">    <span class="built_in">CGContextSetFillColorWithColor</span>(context, aColor.CGColor);<span class="comment">//填充颜色  </span></div><div class="line">    <span class="comment">//以10为半径围绕圆心画指定角度扇形  </span></div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(context, <span class="number">160</span>, <span class="number">180</span>);  </div><div class="line">    <span class="built_in">CGContextAddArc</span>(context, <span class="number">160</span>, <span class="number">180</span>, <span class="number">30</span>,  <span class="number">-60</span> * PI / <span class="number">180</span>, <span class="number">-120</span> * PI / <span class="number">180</span>, <span class="number">1</span>);  </div><div class="line">    <span class="built_in">CGContextClosePath</span>(context);  </div><div class="line">    <span class="built_in">CGContextDrawPath</span>(context, kCGPathFillStroke); <span class="comment">//绘制路径  </span></div><div class="line">  </div><div class="line">    <span class="comment">//画椭圆  </span></div><div class="line">    <span class="built_in">CGContextAddEllipseInRect</span>(context, <span class="built_in">CGRectMake</span>(<span class="number">160</span>, <span class="number">180</span>, <span class="number">20</span>, <span class="number">8</span>)); <span class="comment">//椭圆  </span></div><div class="line">    <span class="built_in">CGContextDrawPath</span>(context, kCGPathFillStroke);  </div><div class="line">      </div><div class="line">    <span class="comment">/*画三角形*/</span>  </div><div class="line">    <span class="comment">//只要三个点就行跟画一条线方式一样，把三点连接起来  </span></div><div class="line">    <span class="built_in">CGPoint</span> sPoints[<span class="number">3</span>];<span class="comment">//坐标点  </span></div><div class="line">    sPoints[<span class="number">0</span>] =<span class="built_in">CGPointMake</span>(<span class="number">100</span>, <span class="number">220</span>);<span class="comment">//坐标1  </span></div><div class="line">    sPoints[<span class="number">1</span>] =<span class="built_in">CGPointMake</span>(<span class="number">130</span>, <span class="number">220</span>);<span class="comment">//坐标2  </span></div><div class="line">    sPoints[<span class="number">2</span>] =<span class="built_in">CGPointMake</span>(<span class="number">130</span>, <span class="number">160</span>);<span class="comment">//坐标3  </span></div><div class="line">    <span class="built_in">CGContextAddLines</span>(context, sPoints, <span class="number">3</span>);<span class="comment">//添加线  </span></div><div class="line">    <span class="built_in">CGContextClosePath</span>(context);<span class="comment">//封起来  </span></div><div class="line">    <span class="built_in">CGContextDrawPath</span>(context, kCGPathFillStroke); <span class="comment">//根据坐标绘制路径  </span></div><div class="line">      </div><div class="line">    <span class="comment">/*画圆角矩形*/</span>  </div><div class="line">    <span class="keyword">float</span> fw = <span class="number">180</span>;  </div><div class="line">    <span class="keyword">float</span> fh = <span class="number">280</span>;  </div><div class="line">      </div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(context, fw, fh<span class="number">-20</span>);  <span class="comment">// 开始坐标右边开始  </span></div><div class="line">    <span class="built_in">CGContextAddArcToPoint</span>(context, fw, fh, fw<span class="number">-20</span>, fh, <span class="number">10</span>);  <span class="comment">// 右下角角度  </span></div><div class="line">    <span class="built_in">CGContextAddArcToPoint</span>(context, <span class="number">120</span>, fh, <span class="number">120</span>, fh<span class="number">-20</span>, <span class="number">10</span>); <span class="comment">// 左下角角度  </span></div><div class="line">    <span class="built_in">CGContextAddArcToPoint</span>(context, <span class="number">120</span>, <span class="number">250</span>, fw<span class="number">-20</span>, <span class="number">250</span>, <span class="number">10</span>); <span class="comment">// 左上角  </span></div><div class="line">    <span class="built_in">CGContextAddArcToPoint</span>(context, fw, <span class="number">250</span>, fw, fh<span class="number">-20</span>, <span class="number">10</span>); <span class="comment">// 右上角  </span></div><div class="line">    <span class="built_in">CGContextClosePath</span>(context);  </div><div class="line">    <span class="built_in">CGContextDrawPath</span>(context, kCGPathFillStroke); <span class="comment">//根据坐标绘制路径  </span></div><div class="line">      </div><div class="line">    <span class="comment">/*画贝塞尔曲线*/</span>  </div><div class="line">    <span class="comment">//二次曲线  </span></div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(context, <span class="number">120</span>, <span class="number">300</span>);<span class="comment">//设置Path的起点  </span></div><div class="line">    <span class="built_in">CGContextAddQuadCurveToPoint</span>(context,<span class="number">190</span>, <span class="number">310</span>, <span class="number">120</span>, <span class="number">390</span>);<span class="comment">//设置贝塞尔曲线的控制点坐标和终点坐标  </span></div><div class="line">    <span class="built_in">CGContextStrokePath</span>(context);  </div><div class="line">    <span class="comment">//三次曲线函数  </span></div><div class="line">    <span class="built_in">CGContextMoveToPoint</span>(context, <span class="number">200</span>, <span class="number">300</span>);<span class="comment">//设置Path的起点  </span></div><div class="line">    <span class="built_in">CGContextAddCurveToPoint</span>(context,<span class="number">250</span>, <span class="number">280</span>, <span class="number">250</span>, <span class="number">400</span>, <span class="number">280</span>, <span class="number">300</span>);<span class="comment">//设置贝塞尔曲线的控制点坐标和控制点坐标终点坐标  </span></div><div class="line">    <span class="built_in">CGContextStrokePath</span>(context);  </div><div class="line">      </div><div class="line">      </div><div class="line">    <span class="comment">/*图片*/</span>  </div><div class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"apple.jpg"</span>];  </div><div class="line">    [image drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">60</span>, <span class="number">340</span>, <span class="number">20</span>, <span class="number">20</span>)];<span class="comment">//在坐标中画出图片  </span></div><div class="line"><span class="comment">//    [image drawAtPoint:CGPointMake(100, 340)];//保持图片大小在point点开始画图片，可以把注释去掉看看  </span></div><div class="line">    <span class="built_in">CGContextDrawImage</span>(context, <span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">340</span>, <span class="number">20</span>, <span class="number">20</span>), image.CGImage);<span class="comment">//使用这个使图片上下颠倒了，参考http://blog.csdn.net/koupoo/article/details/8670024  </span></div><div class="line">      </div><div class="line"><span class="comment">//    CGContextDrawTiledImage(context, CGRectMake(0, 0, 20, 20), image.CGImage);//平铺图  </span></div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>用法：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CustomView *customView = [[CustomView alloc]initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">320</span>, <span class="keyword">self</span>.view.frame.size.height)];  </div><div class="line">    [<span class="keyword">self</span>.view addSubview:customView];</div></pre></td></tr></table></figure>
<p>ok，完成。<br>大家如果看过我的其它博客，会发现，这遍博客跟我的某一片博客很像，没错，就是<a href="http://blog.csdn.net/rhljiayou/article/details/7212620" target="_blank" rel="external">http://blog.csdn.net/rhljiayou/article/details/7212620</a><br>当年写andriod的时候写的一遍博客。<br>请大家尊重一下我的劳动成功，转载请注明原创地址！<br><a href="http://blog.csdn.net/rhljiayou/article/details/9919713" target="_blank" rel="external">http://blog.csdn.net/rhljiayou/article/details/9919713</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://blog.csdn.net/rhljiayou/article/details/9919713&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/rhljiayou/article
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/"/>
    
      <category term="图形绘制" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/"/>
    
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/iOS/"/>
    
      <category term="CGContextRef" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/CGContextRef/"/>
    
      <category term="图形绘制" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>[转]AFNetworking、ASIHTTPRequest中SSL的使用</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2016/05/20/16.5.20_AFNetworking%E3%80%81ASIHTTPRequest%E4%B8%ADSSL%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2016/05/20/16.5.20_AFNetworking、ASIHTTPRequest中SSL的使用/</id>
    <published>2016-05-20T02:10:13.000Z</published>
    <updated>2017-09-11T12:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://www.caijixia.net/jianzhanjingyan/2014080371676.html" target="_blank" rel="external">https://www.caijixia.net/jianzhanjingyan/2014080371676.html</a></p>
<p>首先介绍下AFNetworking中的使用：<br>2.0要注意个地方：IOS7及其以后，采用AFHTTPSessionManager，IOS7之前采用AFHTTPRequestOperationManager。<br>以AFHTTPSessionManager为例，代码如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AFHTTPSessionManager *httpClient = [AFHTTPSessionManager manager]; httpClient.requestSerializer = [AFHTTPRequestSerializer serializer]; httpClient.responseSerializer = [AFHTTPResponseSerializer serializer]; <span class="comment">// SSL Pinning NSString *certificatePath = [[NSBundle mainBundle] pathForResource:@certificate ofType:@der]; NSData *certificateData = [NSData dataWithContentsOfFile:certificatePath]; AFSecurityPolicy *securityPolicy = [[AFSecurityPolicy alloc] init]; [securityPolicy setAllowInvalidCertificates:YES]; [securityPolicy setPinnedCertificates:@[certificateData]]; [securityPolicy setSSLPinningMode:AFSSLPinningModeCertificate]; [httpClient setSecurityPolicy:securityPolicy]; [httpClient GET:@http://xxxx parameters:nil success:^(NSURLSessionDataTask *task, id responseObject) &#123; &#125; failure:^(NSURLSessionDataTask *task, NSError *error) &#123; //失败信息 &#125;];</span></div></pre></td></tr></table></figure></p>
<p>以AFHTTPRequestOperationManager为例，站群，代码如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">AFHTTPRequestOperationManager *httpClient1 = [AFHTTPRequestOperationManager manager]; </div><div class="line">httpClient1.requestSerializer = [AFHTTPRequestSerializer serializer]; httpClient1.responseSerializer = [AFHTTPResponseSerializer serializer]; <span class="comment">// SSL Pinning </span></div><div class="line"><span class="built_in">NSString</span> *certificatePath1 = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:@certificate ofType:@der]; </div><div class="line"><span class="built_in">NSData</span> *certificateData1 = [<span class="built_in">NSData</span> dataWithContentsOfFile:certificatePath1]; AFSecurityPolicy *securityPolicy1 = [[AFSecurityPolicy alloc] init]; </div><div class="line">[securityPolicy1 setAllowInvalidCertificates:<span class="literal">YES</span>]; [securityPolicy1 setPinnedCertificates:@[certificateData1]]; </div><div class="line">[securityPolicy1 setSSLPinningMode:AFSSLPinningModeCertificate]; </div><div class="line">[httpClient setSecurityPolicy:securityPolicy1];</div><div class="line">[httpClient1 GET:@http:<span class="comment">//xxxx parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) &#123; //成功信息 &#125; failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123; //失败信息 &#125;];</span></div></pre></td></tr></table></figure>
<p>下面来讲下ASI，<br>以ASIFormDataRequest为例，代码如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ASIFormDataRequest * request; request = [ASIFormDataRequest requestWithURL:[<span class="built_in">NSURL</span> URLWithString:@]]; </div><div class="line"><span class="built_in">NSData</span> *cerFile = [<span class="built_in">NSData</span> dataWithContentsOfFile:[[<span class="built_in">NSBundle</span> mainBundle] pathForResource:@d1 ofType:@cer]]; </div><div class="line">SecCertificateRef cert = SecCertificateCreateWithData(<span class="literal">NULL</span>, (__bridge <span class="built_in">CFDataRef</span>)cerFile); </div><div class="line"><span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithObjects:(__bridge <span class="keyword">id</span>)cert,<span class="literal">nil</span>];</div><div class="line">[request setClientCertificates:array]; </div><div class="line">[request setValidatesSecureCertificate:<span class="literal">NO</span>]; [request startSynchronous];</div></pre></td></tr></table></figure>
<p>ASIHTTPRequest的参考<a href="http://www.tuicool.com/articles/UN3AveR，代码就不贴了。" target="_blank" rel="external">http://www.tuicool.com/articles/UN3AveR，代码就不贴了。</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;https://www.caijixia.net/jianzhanjingyan/2014080371676.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.caijixia.net/jianzhan
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/"/>
    
      <category term="AFNetworking" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/AFNetworking/"/>
    
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/iOS/"/>
    
      <category term="AFNetworking" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/AFNetworking/"/>
    
      <category term="ASIHTTPRequest" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/ASIHTTPRequest/"/>
    
      <category term="SSL" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>[转]使用AFNetworking 3.0库进行网络请求时，取消单个队列和全部队列的方法(取消网络请求)</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2016/05/11/16.5.11_%E4%BD%BF%E7%94%A8AFNetworking3.0%E5%8F%96%E6%B6%88%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2016/05/11/16.5.11_使用AFNetworking3.0取消网络请求/</id>
    <published>2016-05-11T02:44:11.000Z</published>
    <updated>2017-09-11T12:04:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://blog.csdn.net/a645258072/article/details/51208360" target="_blank" rel="external">http://blog.csdn.net/a645258072/article/details/51208360</a></p>
<p>项目中有时会有这种情况，当界面正在请求数据，但数据为返回之前。返回到上一个界面，这种情况下，应取消此界面的网络请求。此篇就是为了处理此种情况下的操作，可        以取消单个请求队列，如果界面接口很多，可以一次性取消所有请求队列。</p>
<pre><code>AFHTTPSessionManager *manager = [AFHTTPSessionManagermanager];

NSURLSessionDataTask *ljTask = [manager GET:@&quot;url地址&quot;parameters:@&quot;入参&quot;progress:^(NSProgress *_Nonnull downloadProgress) {

    //数据请求进度

} success:^(NSURLSessionDataTask *_Nonnull task,id _Nullable responseObject) {

    //请求成功


} failure:^(NSURLSessionDataTask *_Nullable task,NSError *_Nonnull error) {

    //请求失败

}];

//取消单个网络请求
[ljTask cancel];

//取消所有的网络请求
[manager.operationQueuecancelAllOperations];
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://blog.csdn.net/a645258072/article/details/51208360&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/a645258072/arti
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/"/>
    
      <category term="AFNetworking" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/AFNetworking/"/>
    
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/iOS/"/>
    
      <category term="AFNetworking" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/AFNetworking/"/>
    
  </entry>
  
  <entry>
    <title>[转]让你快速上手Runtime</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2016/03/08/%E8%BD%AC-%E8%AE%A9%E4%BD%A0%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BRuntime/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2016/03/08/转-让你快速上手Runtime/</id>
    <published>2016-03-08T08:44:53.000Z</published>
    <updated>2017-09-10T13:29:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://www.jianshu.com/p/e071206103a4" target="_blank" rel="external">http://www.jianshu.com/p/e071206103a4</a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本篇主要介绍Runtime在开发中的一些使用场景，顺便讲解了下MJExtension的底层实现。如果喜欢我的文章，可以关注我微博:<a href="http://weibo.com/2034818060/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo" target="_blank" rel="external">袁峥Seemygo</a>,也可以来<a href="http://www.520it.com" target="_blank" rel="external">小码哥</a>，了解下我们的iOS培训课程。后续还会更新更多内容。。。</p>
<h3 id="一、runtime简介"><a href="#一、runtime简介" class="headerlink" title="一、runtime简介"></a>一、runtime简介</h3><ul>
<li>RunTime简称运行时。OC就是<code>运行时机制</code>，也就是在运行时候的一些机制，其中最主要的是消息机制。</li>
<li>对于C语言，<code>函数的调用在编译的时候会决定调用哪个函数</code>。</li>
<li>对于OC的函数，属于<code>动态调用过程</code>，在编译的时候并不能决定真正调用哪个函数，只有在真正运行的时候才会根据函数的名称找到对应的函数来调用。</li>
<li>事实证明：<ul>
<li>在编译阶段，OC可以<code>调用任何函数</code>，即使这个函数并未实现，只要声明过就不会报错。</li>
<li>在编译阶段，C语言调用<code>未实现的函数</code>就会报错。</li>
</ul>
</li>
</ul>
<h3 id="二、runtime作用"><a href="#二、runtime作用" class="headerlink" title="二、runtime作用"></a>二、runtime作用</h3><h4 id="1-发送消息"><a href="#1-发送消息" class="headerlink" title="1.发送消息"></a>1.发送消息</h4><ul>
<li><code>方法调用的本质</code>，就是让对象发送消息。</li>
<li>objc_msgSend,只有对象才能发送消息，因此以objc开头.</li>
<li>使用<code>消息机制</code>前提，必须导入#import <objc message.h=""></objc></li>
<li>消息机制简单使用</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 创建person对象</span></div><div class="line">Person *p = [[Person alloc] init];</div><div class="line"></div><div class="line"><span class="comment">// 调用对象方法</span></div><div class="line">[p eat];</div><div class="line"></div><div class="line"><span class="comment">// 本质：让对象发送消息</span></div><div class="line">objc_msgSend(p, <span class="keyword">@selector</span>(eat));</div><div class="line"></div><div class="line"><span class="comment">// 调用类方法的方式：两种</span></div><div class="line"><span class="comment">// 第一种通过类名调用</span></div><div class="line">[Person eat];</div><div class="line"><span class="comment">// 第二种通过类对象调用</span></div><div class="line">[[Person <span class="keyword">class</span>] eat];</div><div class="line"></div><div class="line"><span class="comment">// 用类名调用类方法，底层会自动把类名转换成类对象调用</span></div><div class="line"><span class="comment">// 本质：让类对象发送消息</span></div><div class="line">objc_msgSend([Person <span class="keyword">class</span>], <span class="keyword">@selector</span>(eat));</div></pre></td></tr></table></figure>
<ul>
<li>消息机制原理：对象根据方法编号SEL去映射表查找对应的方法实现</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/304825-eced87b260a7c5d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="2-交换方法"><a href="#2-交换方法" class="headerlink" title="2.交换方法"></a>2.交换方法</h4><ul>
<li><code>开发使用场景</code>:系统自带的方法功能不够，给系统自带的方法扩展一些功能，并且保持原有的功能。</li>
<li><code>方式一</code>:继承系统的类，重写方法.</li>
<li><code>方式二</code>:使用runtime,交换方法.</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    <span class="comment">// 需求：给imageNamed方法提供功能，每次加载图片就判断下图片是否加载成功。</span></div><div class="line">    <span class="comment">// 步骤一：先搞个分类，定义一个能加载图片并且能打印的方法+ (instancetype)imageWithName:(NSString *)name;</span></div><div class="line">    <span class="comment">// 步骤二：交换imageNamed和imageWithName的实现，就能调用imageWithName，间接调用imageWithName的实现。</span></div><div class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"123"</span>];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImage</span> (<span class="title">Image</span>)</span></div><div class="line"><span class="comment">// 加载分类到内存的时候调用</span></div><div class="line">+ (<span class="keyword">void</span>)load</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 交换方法</span></div><div class="line"></div><div class="line">    <span class="comment">// 获取imageWithName方法地址</span></div><div class="line">    Method imageWithName = class_getClassMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(imageWithName:));</div><div class="line"></div><div class="line">    <span class="comment">// 获取imageWithName方法地址</span></div><div class="line">    Method imageName = class_getClassMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(imageNamed:));</div><div class="line"></div><div class="line">    <span class="comment">// 交换方法地址，相当于交换实现方式</span></div><div class="line">    method_exchangeImplementations(imageWithName, imageName);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不能在分类中重写系统方法imageNamed，因为会把系统的功能给覆盖掉，而且分类中不能调用super.</span></div><div class="line"></div><div class="line"><span class="comment">// 既能加载图片又能打印</span></div><div class="line">+ (<span class="keyword">instancetype</span>)imageWithName:(<span class="built_in">NSString</span> *)name</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 这里调用imageWithName，相当于调用imageName</span></div><div class="line">    <span class="built_in">UIImage</span> *image = [<span class="keyword">self</span> imageWithName:name];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (image == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"加载空的图片"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> image;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li><p>交换原理：</p>
<ul>
<li>交换之前：</li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/304825-f53a2ea56804ad60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<pre><code>*   交换之后：
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/304825-c76afa4089255d93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="3-动态添加方法"><a href="#3-动态添加方法" class="headerlink" title="3.动态添加方法"></a>3.动态添加方法</h4><ul>
<li><code>开发使用场景</code>：如果一个类方法非常多，加载类到内存的时候也比较耗费资源，需要给每个方法生成映射表，可以使用动态给某个类，添加方法解决。</li>
<li><code>经典面试题</code>：有没有使用performSelector，其实主要想问你有没有动态添加过方法。</li>
<li><code>简单使用</code></li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line"></div><div class="line">    Person *p = [[Person alloc] init];</div><div class="line"></div><div class="line">    <span class="comment">// 默认person，没有实现eat方法，可以通过performSelector调用，但是会报错。</span></div><div class="line">    <span class="comment">// 动态添加方法就不会报错</span></div><div class="line">    [p performSelector:<span class="keyword">@selector</span>(eat)];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line"><span class="comment">// void(*)()</span></div><div class="line"><span class="comment">// 默认方法都有两个隐式参数，</span></div><div class="line"><span class="keyword">void</span> eat(<span class="keyword">id</span> <span class="keyword">self</span>,SEL sel)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ %@"</span>,<span class="keyword">self</span>,<span class="built_in">NSStringFromSelector</span>(sel));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 当一个对象调用未实现的方法，会调用这个方法处理,并且会把对应的方法列表传过来.</span></div><div class="line"><span class="comment">// 刚好可以用来判断，未实现的方法是不是我们想要动态添加的方法</span></div><div class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (sel == <span class="keyword">@selector</span>(eat)) &#123;</div><div class="line">        <span class="comment">// 动态添加eat方法</span></div><div class="line"></div><div class="line">        <span class="comment">// 第一个参数：给哪个类添加方法</span></div><div class="line">        <span class="comment">// 第二个参数：添加方法的方法编号</span></div><div class="line">        <span class="comment">// 第三个参数：添加方法的函数实现（函数地址）</span></div><div class="line">        <span class="comment">// 第四个参数：函数的类型，(返回值+参数类型) v:void @:对象-&gt;self :表示SEL-&gt;_cmd</span></div><div class="line">        class_addMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(eat), eat, <span class="string">"v@:"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="4-给分类添加属性"><a href="#4-给分类添加属性" class="headerlink" title="4.给分类添加属性"></a>4.给分类添加属性</h4><ul>
<li><code>原理</code>：给一个类声明属性，其实本质就是给这个类添加关联，并不是直接把这个值的内存空间添加到类存空间。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line"></div><div class="line">    <span class="comment">// 给系统NSObject类动态添加属性name</span></div><div class="line"></div><div class="line">    <span class="built_in">NSObject</span> *objc = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">    objc.name = <span class="string">@"小码哥"</span>;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,objc.name);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// 定义关联的key</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *key = <span class="string">"name"</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">Property</span>)</span></div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)name</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 根据关联的key，获取关联的值。</span></div><div class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, key);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 第一个参数：给哪个对象添加关联</span></div><div class="line">    <span class="comment">// 第二个参数：关联的key，通过这个key获取</span></div><div class="line">    <span class="comment">// 第三个参数：关联的value</span></div><div class="line">    <span class="comment">// 第四个参数:关联的策略</span></div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, key, name, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="5-字典转模型"><a href="#5-字典转模型" class="headerlink" title="5.字典转模型"></a>5.字典转模型</h4><ul>
<li><code>设计模型</code>：字典转模型的第一步<ul>
<li>模型属性，通常需要跟字典中的key一一对应</li>
<li>问题：一个一个的生成模型属性，很慢？</li>
<li>需求：能不能自动根据一个字典，生成对应的属性。</li>
<li>解决：提供一个分类，专门根据字典生成对应的属性字符串。</li>
</ul>
</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">    <span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">Log</span>)</span></div><div class="line"></div><div class="line"><span class="comment">// 自动打印属性字符串</span></div><div class="line">+ (<span class="keyword">void</span>)resolveDict:(<span class="built_in">NSDictionary</span> *)dict&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 拼接属性字符串代码</span></div><div class="line">    <span class="built_in">NSMutableString</span> *strM = [<span class="built_in">NSMutableString</span> string];</div><div class="line"></div><div class="line">    <span class="comment">// 1.遍历字典，把字典中的所有key取出来，生成对应的属性代码</span></div><div class="line">    [dict enumerateKeysAndObjectsUsingBlock:^(<span class="keyword">id</span>  _Nonnull key, <span class="keyword">id</span>  _Nonnull obj, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// 类型经常变，抽出来</span></div><div class="line">         <span class="built_in">NSString</span> *type;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ([obj isKindOfClass:<span class="built_in">NSClassFromString</span>(<span class="string">@"__NSCFString"</span>)]) &#123;</div><div class="line">            type = <span class="string">@"NSString"</span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([obj isKindOfClass:<span class="built_in">NSClassFromString</span>(<span class="string">@"__NSCFArray"</span>)])&#123;</div><div class="line">            type = <span class="string">@"NSArray"</span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([obj isKindOfClass:<span class="built_in">NSClassFromString</span>(<span class="string">@"__NSCFNumber"</span>)])&#123;</div><div class="line">            type = <span class="string">@"int"</span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([obj isKindOfClass:<span class="built_in">NSClassFromString</span>(<span class="string">@"__NSCFDictionary"</span>)])&#123;</div><div class="line">            type = <span class="string">@"NSDictionary"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 属性字符串</span></div><div class="line">        <span class="built_in">NSString</span> *str;</div><div class="line">        <span class="keyword">if</span> ([type containsString:<span class="string">@"NS"</span>]) &#123;</div><div class="line">            str = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"@property (nonatomic, strong) %@ *%@;"</span>,type,key];</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            str = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"@property (nonatomic, assign) %@ %@;"</span>,type,key];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 每生成属性字符串，就自动换行。</span></div><div class="line">        [strM appendFormat:<span class="string">@"\n%@\n"</span>,str];</div><div class="line"></div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    <span class="comment">// 把拼接好的字符串打印出来，就好了。</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,strM);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>字典转模型的方式一：KVC</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Status</span></span></div><div class="line"></div><div class="line">+ (<span class="keyword">instancetype</span>)statusWithDict:(<span class="built_in">NSDictionary</span> *)dict</div><div class="line">&#123;</div><div class="line">    Status *status = [[<span class="keyword">self</span> alloc] init];</div><div class="line"></div><div class="line">    [status setValuesForKeysWithDictionary:dict];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> status;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li><code>KVC字典转模型弊端</code>：必须保证，模型中的属性和字典中的key一一对应。<ul>
<li>如果不一致，就会调用<code>[&lt;Status 0x7fa74b545d60&gt; setValue:forUndefinedKey:]</code><br>报<code>key</code>找不到的错。</li>
<li>分析:模型中的属性和字典的key不一一对应，系统就会调用<code>setValue:forUndefinedKey:</code>报错。</li>
<li>解决:重写对象的<code>setValue:forUndefinedKey:</code>,把系统的方法覆盖，<br>就能继续使用KVC，字典转模型了。</li>
</ul>
</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">id</span>)value forUndefinedKey:(<span class="built_in">NSString</span> *)key</div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>字典转模型的方式二</code>：Runtime<ul>
<li>思路：利用运行时，遍历模型中所有属性，根据模型的属性名，去字典中查找key，取出对应的值，给模型的属性赋值。</li>
<li>步骤：提供一个NSObject分类，专门字典转模型，以后所有模型都可以通过这个分类转。</li>
</ul>
</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line"></div><div class="line">    <span class="comment">// 解析Plist文件</span></div><div class="line">    <span class="built_in">NSString</span> *filePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"status.plist"</span> ofType:<span class="literal">nil</span>];</div><div class="line"></div><div class="line">    <span class="built_in">NSDictionary</span> *statusDict = [<span class="built_in">NSDictionary</span> dictionaryWithContentsOfFile:filePath];</div><div class="line"></div><div class="line">    <span class="comment">// 获取字典数组</span></div><div class="line">    <span class="built_in">NSArray</span> *dictArr = statusDict[<span class="string">@"statuses"</span>];</div><div class="line"></div><div class="line">    <span class="comment">// 自动生成模型的属性字符串</span></div><div class="line"><span class="comment">//    [NSObject resolveDict:dictArr[0][@"user"]];</span></div><div class="line"></div><div class="line">    _statuses = [<span class="built_in">NSMutableArray</span> array];</div><div class="line"></div><div class="line">    <span class="comment">// 遍历字典数组</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSDictionary</span> *dict <span class="keyword">in</span> dictArr) &#123;</div><div class="line"></div><div class="line">        Status *status = [Status modelWithDict:dict];</div><div class="line"></div><div class="line">        [_statuses addObject:status];</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测试数据</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ %@"</span>,_statuses,[_statuses[<span class="number">0</span>] user]);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">Model</span>)</span></div><div class="line"></div><div class="line">+ (<span class="keyword">instancetype</span>)modelWithDict:(<span class="built_in">NSDictionary</span> *)dict</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 思路：遍历模型中所有属性-》使用运行时</span></div><div class="line"></div><div class="line">    <span class="comment">// 0.创建对应的对象</span></div><div class="line">    <span class="keyword">id</span> objc = [[<span class="keyword">self</span> alloc] init];</div><div class="line"></div><div class="line">    <span class="comment">// 1.利用runtime给对象中的成员属性赋值</span></div><div class="line"></div><div class="line">    <span class="comment">// class_copyIvarList:获取类中的所有成员属性</span></div><div class="line">    <span class="comment">// Ivar：成员属性的意思</span></div><div class="line">    <span class="comment">// 第一个参数：表示获取哪个类中的成员属性</span></div><div class="line">    <span class="comment">// 第二个参数：表示这个类有多少成员属性，传入一个Int变量地址，会自动给这个变量赋值</span></div><div class="line">    <span class="comment">// 返回值Ivar *：指的是一个ivar数组，会把所有成员属性放在一个数组中，通过返回的数组就能全部获取到。</span></div><div class="line">    <span class="comment">/* 类似下面这种写法</span></div><div class="line"></div><div class="line">     Ivar ivar;</div><div class="line">     Ivar ivar1;</div><div class="line">     Ivar ivar2;</div><div class="line">     // 定义一个ivar的数组a</div><div class="line">     Ivar a[] = &#123;ivar,ivar1,ivar2&#125;;</div><div class="line"></div><div class="line">     // 用一个Ivar *指针指向数组第一个元素</div><div class="line">     Ivar *ivarList = a;</div><div class="line"></div><div class="line">     // 根据指针访问数组第一个元素</div><div class="line">     ivarList[0];</div><div class="line"></div><div class="line">     */</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count;</div><div class="line"></div><div class="line">    <span class="comment">// 获取类中的所有成员属性</span></div><div class="line">    Ivar *ivarList = class_copyIvarList(<span class="keyword">self</span>, &amp;count);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="comment">// 根据角标，从数组取出对应的成员属性</span></div><div class="line">        Ivar ivar = ivarList[i];</div><div class="line"></div><div class="line">        <span class="comment">// 获取成员属性名</span></div><div class="line">        <span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</div><div class="line"></div><div class="line">        <span class="comment">// 处理成员属性名-&gt;字典中的key</span></div><div class="line">        <span class="comment">// 从第一个角标开始截取</span></div><div class="line">        <span class="built_in">NSString</span> *key = [name substringFromIndex:<span class="number">1</span>];</div><div class="line"></div><div class="line">        <span class="comment">// 根据成员属性名去字典中查找对应的value</span></div><div class="line">        <span class="keyword">id</span> value = dict[key];</div><div class="line"></div><div class="line">        <span class="comment">// 二级转换:如果字典中还有字典，也需要把对应的字典转换成模型</span></div><div class="line">        <span class="comment">// 判断下value是否是字典</span></div><div class="line">        <span class="keyword">if</span> ([value isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">            <span class="comment">// 字典转模型</span></div><div class="line">            <span class="comment">// 获取模型的类对象，调用modelWithDict</span></div><div class="line">            <span class="comment">// 模型的类名已知，就是成员属性的类型</span></div><div class="line"></div><div class="line">            <span class="comment">// 获取成员属性类型</span></div><div class="line">           <span class="built_in">NSString</span> *type = [<span class="built_in">NSString</span> stringWithUTF8String:ivar_getTypeEncoding(ivar)];</div><div class="line">          <span class="comment">// 生成的是这种@"@\"User\"" 类型 -》 @"User"  在OC字符串中 \" -&gt; "，\是转义的意思，不占用字符</span></div><div class="line">            <span class="comment">// 裁剪类型字符串</span></div><div class="line">            <span class="built_in">NSRange</span> range = [type rangeOfString:<span class="string">@"\""</span>];</div><div class="line"></div><div class="line">           type = [type substringFromIndex:range.location + range.length];</div><div class="line"></div><div class="line">            range = [type rangeOfString:<span class="string">@"\""</span>];</div><div class="line"></div><div class="line">            <span class="comment">// 裁剪到哪个角标，不包括当前角标</span></div><div class="line">          type = [type substringToIndex:range.location];</div><div class="line"></div><div class="line">            <span class="comment">// 根据字符串类名生成类对象</span></div><div class="line">            Class modelClass = <span class="built_in">NSClassFromString</span>(type);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (modelClass) &#123; <span class="comment">// 有对应的模型才需要转</span></div><div class="line"></div><div class="line">                <span class="comment">// 把字典转模型</span></div><div class="line">                value  =  [modelClass modelWithDict:value];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 三级转换：NSArray中也是字典，把数组中的字典转换成模型.</span></div><div class="line">        <span class="comment">// 判断值是否是数组</span></div><div class="line">        <span class="keyword">if</span> ([value isKindOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">            <span class="comment">// 判断对应类有没有实现字典数组转模型数组的协议</span></div><div class="line">            <span class="keyword">if</span> ([<span class="keyword">self</span> respondsToSelector:<span class="keyword">@selector</span>(arrayContainModelClass)]) &#123;</div><div class="line"></div><div class="line">                <span class="comment">// 转换成id类型，就能调用任何对象的方法</span></div><div class="line">                <span class="keyword">id</span> idSelf = <span class="keyword">self</span>;</div><div class="line"></div><div class="line">                <span class="comment">// 获取数组中字典对应的模型</span></div><div class="line">                <span class="built_in">NSString</span> *type =  [idSelf arrayContainModelClass][key];</div><div class="line"></div><div class="line">                <span class="comment">// 生成模型</span></div><div class="line">               Class classModel = <span class="built_in">NSClassFromString</span>(type);</div><div class="line">                <span class="built_in">NSMutableArray</span> *arrM = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">                <span class="comment">// 遍历字典数组，生成模型数组</span></div><div class="line">                <span class="keyword">for</span> (<span class="built_in">NSDictionary</span> *dict <span class="keyword">in</span> value) &#123;</div><div class="line">                    <span class="comment">// 字典转模型</span></div><div class="line">                  <span class="keyword">id</span> model =  [classModel modelWithDict:dict];</div><div class="line">                    [arrM addObject:model];</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// 把模型数组赋值给value</span></div><div class="line">                value = arrM;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (value) &#123; <span class="comment">// 有值，才需要给模型的属性赋值</span></div><div class="line">            <span class="comment">// 利用KVC给模型中的属性赋值</span></div><div class="line">            [objc setValue:value forKey:key];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> objc;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://www.jianshu.com/p/e071206103a4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/e071206103a4&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/"/>
    
      <category term="runtime" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/runtime/"/>
    
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/iOS/"/>
    
      <category term="移动开发" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="runtime" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/runtime/"/>
    
      <category term="动态运行时" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E5%8A%A8%E6%80%81%E8%BF%90%E8%A1%8C%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>[转]Convert to Objective-C ARC</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2015/12/11/15.12.11_Convert_to_Objective-C_ARC/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2015/12/11/15.12.11_Convert_to_Objective-C_ARC/</id>
    <published>2015-12-11T05:34:23.000Z</published>
    <updated>2017-09-11T12:03:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://www.cnblogs.com/tracy-e/p/3151459.html" target="_blank" rel="external">http://www.cnblogs.com/tracy-e/p/3151459.html</a></p>
<p>今天在进行代码走查时，竟然发现了下面这段代码：</p><p></p>
<p></p><p><a class="fancybox" title="Bad Code" href="http://esoftmobile.com/image/convert_to_objective-c_arc_bad_code.png" rel="external" target="_blank"><img src="http://esoftmobile.com/image/convert_to_objective-c_arc_bad_code.png" alt="Bad Code"></a><span class="caption">Bad Code</span></p><p></p>
<p></p><p>顿时感觉吐槽无力，虽然我反复强调内存管理问题，无非就是谁申请谁释放，利用强弱引用避免 retain-cycles，但是还是会有这样那样的问题，leaks 每次就是一片红。本来是计划等他们交易都开发完了，进行一次集体代码走查，好好给他们上一课，集中来解决内存问题。但是由于个人原因我 7 月份会离开项目组，恐怕没有时间来这么做了，所以最终还是决定将工程转成 ARC 模式。</p><p></p>
<p></p><p>该项目是某行手机银行客户端，iOS 开发这块除了我，其他的所有 7 个开发人员都是项目组临时招聘的，技术参差不齐，毕竟公司招聘标准就是：便宜 + 能干事。我的职责就是负责客户端架构，公共机制的设计与实现，公共组件的封装，开发过程中的解疑。其他开发人员每人负责一两个模块的交易开发，其实无非就剩下请求数据绘界面的事了。</p><p></p>
<p></p><p>其实项目开始时就打算尝试用 ARC 的，但是项目组内其他人员之前都没接触过 ARC，迫于项目进度压力也没有时间做培训，就使用大家比较熟悉的 MRR，还是太信任他们了。</p><p></p>
<p></p><p><a name="more"></a></p><p></p>
<p></p><h2>Convertion Steps</h2><p></p>
<p></p><p>1.<strong>将不要转成 ARC 的代码标注一下</strong></p><p></p>
<p></p><p>如开源代码 AFNetworking(因为项目需要支持 4.3，所以用的 AFNetworking 是支持 4.3 的非 ARC 版本)、GDataXML、RegexKitLite、Reachability 等，其实这些也能转，但是感觉没有必要，将这些源文件在 Build Phases / Complie Sources 中标注为<code>-fno-objc-arc</code>，如果之前用到了使用 ARC 的代码，现在可以将<code>-fobjc-arc</code>标记去掉了。</p><p></p>
<p></p><p><a class="fancybox" title="setp1" href="http://esoftmobile.com/image/convert_to_objective-c_arc_step1.png" rel="external" target="_blank"><img src="http://esoftmobile.com/image/convert_to_objective-c_arc_step1.png" alt="setp1"></a><span class="caption">setp1</span></p><p></p>
<p></p><p>2.<strong>工程检查</strong></p><p></p>
<p></p><p>我选择使用 Xcode5.0_DP 版本来转，之前使用 Xcode4.6 在转换过程中电脑经常会假死，或者 Xcode4.6 直接崩溃，不知道什么原因。而 Xcode5.0 默认就是 ARC 模式，我想为了能让之前的程序都转换为 ARC，它的转换工具一定比之前强化了不少。</p><p></p>
<p></p><p>Xcode -&gt; Edit -&gt; Refactor -&gt; Convert to Objective-C ARC&hellip;</p><p></p>
<p></p><p>选择要转换的 Target，工程 target，如果有单元测试也会出现单元测试的 target，点击&ldquo;Check&rdquo;。</p><p></p>
<p></p><p>3.<strong>解决 ARC 不允许的问题</strong></p><p></p>
<p></p><p><a class="fancybox" title="setp3" href="http://esoftmobile.com/image/convert_to_objective-c_arc_step3.png" rel="external" target="_blank"><img src="http://esoftmobile.com/image/convert_to_objective-c_arc_step3.png" alt="setp3"></a><span class="caption">setp3</span></p><p></p>
<p></p><p>转换工具会自动将代码里面的 retain、release、autorelease 等操作去掉，属性中的 retain、copy、assign 转为为对应的关键字（retain、copy -&gt; strong, assign 会根据工程是否支持 5.0 一下版本转出 weak，或 unsafe_unretained）。</p><p></p>
<p></p><p>但是如果你在宏里面定义如：</p><p></p>
<p></p><p><code>#define MB_RELEASE_SAFELY(<strong>POINTER) { [</strong>POINTER release]; __POINTER = nil; }</code></p><p></p>
<p></p><p>转换工具是不会自动处理里面的 release 的，需要手动将<code>[__POINTER release];</code>去掉。（我工程里面 4201 个问题基本上都是因为这个导致的）</p><p></p>
<p></p><p>此外在 CF 对象与 NS 对象之间转换的需要加上关键字<code>__bridge</code>，这个也需要手动来来修改。</p><p></p>
<p></p><p>4.<strong>开始转换</strong></p><p></p>
<p></p><p><a class="fancybox" title="setp4" href="http://esoftmobile.com/image/convert_to_objective-c_arc_step4.png" rel="external" target="_blank"><img src="http://esoftmobile.com/image/convert_to_objective-c_arc_step4.png" alt="setp4"></a><span class="caption">setp4</span></p><p></p>
<p></p><p>解决完所有的冲突，再次选择&ldquo;Convert to Objective-C ARC&hellip;&rdquo;，你就能看到这个界面，点击&ldquo;Next&rdquo;后，再次经过漫长的等待， 工具会列出了将会为了转换的代码的对照列表。默认所有出现在列表里面的文件都是选中的，你可以选在不要转换的文件，去掉对勾。确认完后，点击&ldquo;Save&rdquo;就完成了整个工程的转换工作, Congratulations!</p><p></p>
<p></p><p>(我在完成后编译时，发现之前被我标为<code>-fno-objc-arc</code>的文件会有报错，原来在转换过程中工具将之前的标记都去掉了，无奈再次标记了一遍。)</p><p></p>
<p></p><p>5.<strong>其他处理</strong></p><p></p>
<p></p><p>因为我们工程支持 4.3，所以 weak, __weak 关键字不能用， 可以通过宏定义将 5.0 以下时 weak 关键字定义为 unsafe_unretained:</p><p></p>
<p><pre><span class="preprocessor">#if (!<strong>has_feature(objc_arc)) || \</strong></span><br>(defined IPHONE_OS_VERSION_MIN_REQUIRED &amp;&amp; \<br><strong>IPHONE_OS_VERSION_MIN_REQUIRED &lt; </strong>IPHONE_5_0) || \<br>(defined <strong>MAC_OS_X_VERSION_MIN_REQUIRED &amp;&amp; \
</strong>MAC_OS_X_VERSION_MIN_REQUIRED &lt; <strong>MAC_10_7)<br><span class="preprocessor">#undef weak</span><br><span class="preprocessor">#define weak unsafe_unretained</span><br><span class="preprocessor">#undef </span></strong>weak<br><span class="preprocessor">#define <strong>weak </strong>unsafe_unretained</span><br><span class="preprocessor">#endif</span><br></pre></p>
<p></p><p><span>在 ARC 模式下，使用 performSelector 方法会有编译警告：PerformSelector may cause a leak because its selector is unknown，作为有洁癖的程序员是不能容许程序中有警告的：</span></p><p></p>
<p><pre><span class="preprocessor">#progma clang diagnostic push</span><br><span class="preprocessor">#progma clang disgnostic ignored “-Warc-performSelecotr-leaks”</span><br>[<span class="keyword">self</span> performSelector:@<span class="keyword">selector</span>(mySelector:) withObject:object];<br><span class="preprocessor">#progma clang disgnostic pop</span><br></pre></p>
<p></p><p><span>Posted by&nbsp;<a href="http://weibo.com/534072785" target="_blank" rel="external"><strong>XiaoYi_HD</strong></a>&nbsp;- 6月 19 2013</span><br><span>如需转载，请注明： 本文来自&nbsp;<a href="http://esoftmobile.com/" target="_blank" rel="external"><strong>Esoft Mobile</strong></a></span></p><div id="MySignature"></div><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://www.cnblogs.com/tracy-e/p/3151459.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/tracy-e/p/3151459.html&lt;/
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/"/>
    
      <category term="ARC" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/ARC/"/>
    
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/iOS/"/>
    
      <category term="ARC" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/ARC/"/>
    
      <category term="MRC" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/MRC/"/>
    
  </entry>
  
  <entry>
    <title>[转]AFNetworking 3.0迁移指南</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2015/12/09/15.12.09_AFNetworking%203.0%E8%BF%81%E7%A7%BB%E6%8C%87%E5%8D%97/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2015/12/09/15.12.09_AFNetworking 3.0迁移指南/</id>
    <published>2015-12-09T08:44:53.000Z</published>
    <updated>2017-09-11T12:04:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://www.jianshu.com/p/047463a7ce9b" target="_blank" rel="external">http://www.jianshu.com/p/047463a7ce9b</a></p>
<h2 id="AFNetworking-3-0"><a href="#AFNetworking-3-0" class="headerlink" title="AFNetworking 3.0"></a>AFNetworking 3.0</h2><blockquote>
<p>AFNetworking是一款在OS X和iOS下都令人喜爱的网络库。为了迎合iOS新版本的升级, AFNetworking在3.0版本中删除了基于 <del><strong>NSURLConnection</strong></del> API的所有支持。如果你的项目以前使用过这些API，建议您立即升级到基于 <strong>NSURLSession</strong> 的API的AFNetworking的版本。本指南将引导您完成这个过程。</p>
</blockquote>
<p>本指南是为了引导使用AFNetworking 2.x升级到最新的版本API，以达到过渡的目的，并且解释了新增和更改的设计结构。</p>
<h2 id="新设备要求-iOS-7-Mac-OS-X-10-9-watchOS-2-tvOS-9-amp-Xcode-7"><a href="#新设备要求-iOS-7-Mac-OS-X-10-9-watchOS-2-tvOS-9-amp-Xcode-7" class="headerlink" title="新设备要求: iOS 7, Mac OS X 10.9, watchOS 2, tvOS 9, &amp; Xcode 7"></a>新设备要求: iOS 7, Mac OS X 10.9, watchOS 2, tvOS 9, &amp; Xcode 7</h2><p>AFNetworking 3.0正式支持的iOS 7， Mac OS X的10.9， watchOS 2 ， tvOS 9 和Xcode 7。如果你想使用AFNetworking在针对较旧版本的SDK项目，请检查<a href="https://github.com/AFNetworking/AFNetworking/blob/master/README.md#requirements">README</a>的兼容性信息。</p>
<h2 id="NSURLConnection的API已废弃"><a href="#NSURLConnection的API已废弃" class="headerlink" title="NSURLConnection的API已废弃"></a>NSURLConnection的API已废弃</h2><p>AFNetworking 1.0建立在NSURLConnection的基础API之上 ，AFNetworking 2.0开始使用NSURLConnection的基础API ，以及较新基于NSURLSession的API的选项。 AFNetworking 3.0现已完全基于NSURLSession的API，这降低了维护的负担，同时支持苹果增强关于NSURLSession提供的任何额外功能。由于Xcode 7中，NSURLConnection的API已经正式被苹果弃用。虽然该API将继续运行，但将没有新功能将被添加，并且苹果已经通知所有基于网络的功能，以充分使NSURLSession向前发展。</p>
<p>AFNetworking 2.X将继续获得关键的隐患和安全补丁，但没有新的功能将被添加。Alamofire(Swift下的网络请求)软件基金会建议，所有的项目迁移到基于NSURLSession的API。</p>
<h2 id="弃用的类"><a href="#弃用的类" class="headerlink" title="弃用的类"></a>弃用的类</h2><p>下面的类已从AFNetworking 3.0中废弃：</p>
<ul>
<li>AFURLConnectionOperation</li>
<li>AFHTTPRequestOperation</li>
<li>AFHTTPRequestOperationManager</li>
</ul>
<h2 id="修改的类"><a href="#修改的类" class="headerlink" title="修改的类"></a>修改的类</h2><p>下面的类包含基于NSURLConnection的API的内部实现。他们已经被使用NSURLSession重构:</p>
<ul>
<li>UIImageView+AFNetworking</li>
<li>UIWebView+AFNetworking</li>
<li>UIButton+AFNetworking</li>
</ul>
<h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><hr>
<h4 id="AFHTTPRequestOperationManager-核心代码"><a href="#AFHTTPRequestOperationManager-核心代码" class="headerlink" title="AFHTTPRequestOperationManager 核心代码"></a>AFHTTPRequestOperationManager 核心代码</h4><p>如果你以前使用 <strong>AFHTTPRequestOperationManager</strong> ， 你将需要迁移去使用 <strong>AFHTTPSessionManager</strong>。 以下的类在两者过渡间并没有变化：</p>
<ul>
<li>securityPolicy</li>
<li>requestSerializer</li>
<li>responseSerializer</li>
</ul>
<p>接下来举一个关于AFHTTPSessionManager的简单例子。<strong>注意</strong>HTTP网络请求返回的不再是AFHTTPRequestOperation, 修改成为了NSURLSessionTask，并且成功和失败的Block块中的参数也变更为了NSURLSessionTask，而不再是AFHTTPRequestOperation。</p>
<h5 id="AFNetworking-2-x"><a href="#AFNetworking-2-x" class="headerlink" title="AFNetworking 2.x"></a>AFNetworking 2.x</h5><pre><code>AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
[manager GET:@&quot;请求的url&quot; parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) {
        NSLog(@&quot;成功&quot;);
} failure:^(AFHTTPRequestOperation *operation, NSError*error) {
        NSLog(@&quot;失败&quot;);
}];`&lt;/pre&gt;

##### AFNetworking 3.0

&lt;pre&gt;`AFHTTPSessionManager *session = [AFHTTPSessionManager manager];
[session GET:@&quot;请求的url&quot; parameters:nil success:^(NSURLSessionDataTask *task, id responseObject) {
        NSLog(@&quot;成功&quot;);
} failure:^(NSURLSessionDataTask *task, NSError *error) {
        NSLog(@&quot;失败&quot;);        
}];`&lt;/pre&gt;

#### AFHTTPRequestOperation 核心代码

与NSURLConnection对象不同，每个共享应用范围的设置如会话管理、缓存策略、Cookie存储以及URL协议等，这些NSURLSession对象都可以单独进行配置。使用特定的配置来初始化会话，它可以发送任务来获取数据，并上传或下载文件。

在AFNetworking 2.0中，使用AFHTTPRequestOperation，有可能创建一个没有额外开销的独立的网络请求来获取数据。NSURLSession则需要更多的开销，为了获得所要请求的数据。

接下来，将要通过AFHTTPSessionManager创建一个对象，并创建一个任务和启动它。

##### AFNetworking 2.x

&lt;pre&gt;`NSURL *URL = [NSURL URLWithString:@&quot;&quot;];
NSURLRequest *request = [NSURLRequest requestWithURL:URL];
AFHTTPRequestOperation *op = [[AFHTTPRequestOperation alloc] initWithRequest:request];
op.responseSerializer = [AFJSONResponseSerializer serializer];
[op setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) {
        NSLog(@&quot;JSON: %@&quot;, responseObject);
} failure:^(AFHTTPRequestOperation *operation, NSError *error) {
        NSLog(@&quot;Error: %@&quot;, error);
}];
[[NSOperationQueue mainQueue] addOperation:op];`&lt;/pre&gt;

##### AFNetworking 3.0

&lt;pre&gt;`NSURL *URL = [NSURL URLWithString:@&quot;&quot;];
AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
[manager GET:URL.absoluteString parameters:nil success:^(NSURLSessionTask *task, id responseObject) {
        NSLog(@&quot;JSON: %@&quot;, responseObject);
} failure:^(NSURLSessionTask *operation, NSError *error) {
        NSLog(@&quot;Error: %@&quot;, error);
}];
</code></pre><h4 id="UIKit的迁移"><a href="#UIKit的迁移" class="headerlink" title="UIKit的迁移"></a>UIKit的迁移</h4><p>图片下载已经被重构，以遵循AlamofireImage架构与新的AFImageDownloader类。这个类的图片下载职责的代理人是UIButton与UIImageView的类目，并且提供了一些方法，在必要时可以自定义。类别中，下载远程图片的实际方法没有改变。</p>
<p>UIWebView的类目被重构为使用AFHTTPSessionManager作为其网络请求。</p>
<h4 id="UIAlertView的类目被废弃"><a href="#UIAlertView的类目被废弃" class="headerlink" title="UIAlertView的类目被废弃"></a>UIAlertView的类目被废弃</h4><p>从AFNetworking 3.0后UIAlertView的类目因过时而被废弃。并没有提供UIAlertController类目的计划，因为这是应用程序应处理的逻辑，而不是这个库。</p>
<p>原文链接: <a href="https://github.com/AFNetworking/AFNetworking/wiki/AFNetworking-3.0-Migration-Guide#new-requirements-ios-7-mac-os-x-109-watchos-2-tvos-9--xcode-7">AFNetworking 3.0</a><br>纯属个人翻译，如有错误，还请纠正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://www.jianshu.com/p/047463a7ce9b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/047463a7ce9b&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/"/>
    
      <category term="AFNetworking" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/AFNetworking/"/>
    
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/iOS/"/>
    
      <category term="AFNetworking" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/AFNetworking/"/>
    
  </entry>
  
  <entry>
    <title>[转]使用AFNetworking, SDWebimage和OHHTTPStubs</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2015/11/20/15.11.20_%E4%BD%BF%E7%94%A8AFNetworking,%20SDWebimage%E5%92%8COHHTTPStubs/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2015/11/20/15.11.20_使用AFNetworking, SDWebimage和OHHTTPStubs/</id>
    <published>2015-11-20T09:44:53.000Z</published>
    <updated>2017-09-11T12:03:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://blog.shiqichan.com/using-afnetworking-sdwebimage-and-ohhttpstubs/" target="_blank" rel="external">http://blog.shiqichan.com/using-afnetworking-sdwebimage-and-ohhttpstubs/</a></p>
<p>写了个示例，放在<a href="https://github.com/MarshalW/AFNetworkingDemo">GitHub</a>上。</p>
<p>这是运行的动画：<br><img src="http://shiqichan.qiniudn.com//using-afnetworking-sdwebimage-and-ohhttpstubs/af1.gif" alt=""><br>以下内容主要介绍：</p>
<ul>
<li>基于AFNetworking的HTTP操作，GET获取网页和JSON数据，上传文件，下载文件，以及加载图片</li>
<li>基于SDWebimage的加载图片</li>
<li>基于OHHTTPStubs的伪造网络响应用于测试（stub），而且可以模拟出网络的延时<br><a id="more"></a></li>
</ul>
<h2 id="使用基于NSURLSession的AFNetworking-API"><a href="#使用基于NSURLSession的AFNetworking-API" class="headerlink" title="使用基于NSURLSession的AFNetworking API"></a>使用基于NSURLSession的AFNetworking API</h2><p>AFNetworking有2套用于网络操作的API：</p>
<ul>
<li>基于NSURLConnection</li>
<li>基于NSURLSession</li>
</ul>
<p>后者是新的API，用于iOS 7 / Mac OS X 10.9及以上版本。</p>
<p>这篇文章写的很好：<a href="http://objccn.io/issue-5-4/" target="_blank" rel="external">从 NSURLConnection 到 NSURLSession</a>，说明后者做了哪些改善和加强。</p>
<p>现在越来越多的iOS项目最低要求iOS 7，让我们可以开始尝试使用这种新的方式。</p>
<h2 id="GET请求，获取普通网页文本"><a href="#GET请求，获取普通网页文本" class="headerlink" title="GET请求，获取普通网页文本"></a>GET请求，获取普通网页文本</h2><p>AFHTTPSessionManager是使用NSURLSession的API。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURL</span> <em>baseURL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@”<a href="http://localhost/" target="_blank" rel="external">http://localhost/</a>“</span>];</em></span><br><span class="line">    </span><br><span class="line"><span class="comment">//设置和加入头信息</span></span><br><span class="line"><span class="built_in">NSURLSessionConfiguration</span> config = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</span><br><span class="line">[config setHTTPAdditionalHeaders:@&#123; <span class="string">@”User-Agent”</span> : <span class="string">@”My Browser”</span>&#125;];</span><br><span class="line"></span><br><span class="line">AFHTTPSessionManager <em>manager=[[AFHTTPSessionManager alloc] initWithBaseURL:baseURL sessionConfiguration:config];</em></span><br><span class="line">manager<span class="variable">.responseSerializer</span> = [AFHTTPResponseSerializer serializer];</span><br><span class="line">manager<span class="variable">.responseSerializer</span><span class="variable">.acceptableContentTypes</span> = [<span class="built_in">NSSet</span> setWithObject:<span class="string">@”text/html”</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置GET请求的参数</span></span><br><span class="line"><span class="built_in">NSDictionary</span> params=[[<span class="built_in">NSDictionary</span> alloc] initWithObjectsAndKeys:<span class="string">@”3”</span>,<span class="string">@”id”</span>,<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//发起GET请求</span></span><br><span class="line">[manager GET:<span class="string">@””</span> parameters:params success:^(<span class="built_in">NSURLSessionDataTask</span> <em>task, <span class="keyword">id</span> responseObject) &#123;</em></span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@”HTML: %@”</span>, [[<span class="built_in">NSString</span> alloc]initWithData:responseObject encoding:<span class="built_in">NSUTF8StringEncoding</span>]);</span><br><span class="line">&#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> task, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@”visit error: %@”</span>,error);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>为了方便测试，这个示例里写了个简单的Web Server，<a href="https://github.com/MarshalW/AFNetworkingDemo/blob/master/httpServer.js">httpServer.js</a>。</p>
<p>运行httpServer.js，需要安装node.js环境。然后：</p>
<pre><code>&lt;span class=&quot;title&quot;&gt;sudo&lt;/span&gt; node httpServer
</code></pre><p>我使用了80端口，在Mac环境下是需要root权限的。</p>
<h2 id="GET请求，获取JSON数据"><a href="#GET请求，获取JSON数据" class="headerlink" title="GET请求，获取JSON数据"></a>GET请求，获取JSON数据</h2><p>方法和GET请求网页文本大同小异，个别参数或者设置对象上有不同：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURL</span> <em>baseURL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@”<a href="http://localhost/" target="_blank" rel="external">http://localhost/</a>“</span>];</em></span><br><span class="line"><span class="built_in">NSURLSessionConfiguration</span> config = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</span><br><span class="line">[config setHTTPAdditionalHeaders:@&#123; <span class="string">@”User-Agent”</span> : <span class="string">@”My Browser”</span>&#125;];</span><br><span class="line"></span><br><span class="line">AFHTTPSessionManager <em>manager=[[AFHTTPSessionManager alloc] initWithBaseURL:baseURL sessionConfiguration:config];</em></span><br><span class="line"><span class="built_in">NSDictionary</span> params=[[<span class="built_in">NSDictionary</span> alloc] initWithObjectsAndKeys:<span class="string">@”8”</span>,<span class="string">@”id”</span>,<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">[manager GET:<span class="string">@”/json”</span> parameters:params success:^(<span class="built_in">NSURLSessionDataTask</span> <em>task, <span class="keyword">id</span> responseObject) &#123;</em></span><br><span class="line">    <span class="built_in">NSDictionary</span>  object=(<span class="built_in">NSDictionary</span> <em>)responseObject;</em></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@”response message: %@”</span>,object[<span class="string">@”message”</span>]);</span><br><span class="line">&#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> task, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@”visit error: %@”</span>,error);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><p>AFNetworking API会返回<code>NSURLSessionDownloadTask</code>，可用于网络请求的取消、暂停和恢复。</p>
<p>其实上文中的GET方法也返回了这个对象，只不过下载文件时间可能会较长，有可能有这方面的需求。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURLSessionConfiguration</span> <em>configuration = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</em></span><br><span class="line">AFURLSessionManager manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSURL</span> <em>URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@”<a href="http://www.baidu.com/img/bdlogo.png" target="_blank" rel="external">http://www.baidu.com/img/bdlogo.png</a>“</span>];</em></span><br><span class="line"><span class="built_in">NSURLRequest</span> request = [<span class="built_in">NSURLRequest</span> requestWithURL:URL];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSURLSessionDownloadTask</span> <em>downloadTask = [manager downloadTaskWithRequest:request progress:<span class="literal">nil</span> destination:^<span class="built_in">NSURL</span> </em>(<span class="built_in">NSURL</span> <em>targetPath, <span class="built_in">NSURLResponse</span> </em>response) &#123;</span><br><span class="line">    <span class="built_in">NSURL</span> <em>documentsDirectoryURL = [[<span class="built_in">NSFileManager</span> defaultManager] URLForDirectory:<span class="built_in">NSDocumentDirectory</span> inDomain:<span class="built_in">NSUserDomainMask</span> appropriateForURL:<span class="literal">nil</span> create:<span class="literal">NO</span> error:<span class="literal">nil</span>];</em></span><br><span class="line">    <span class="keyword">return</span> [documentsDirectoryURL URLByAppendingPathComponent:[response suggestedFilename]];</span><br><span class="line">&#125; completionHandler:^(<span class="built_in">NSURLResponse</span> response, <span class="built_in">NSURL</span> <em>filePath, <span class="built_in">NSError</span> </em>error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@”File downloaded to: %@”</span>, filePath);</span><br><span class="line">    uploadFilePath=filePath;</span><br><span class="line">&#125;];</span><br><span class="line">[downloadTask resume];</span><br></pre></td></tr></table></figure>

<h2 id="使用AFNetworking加载图片"><a href="#使用AFNetworking加载图片" class="headerlink" title="使用AFNetworking加载图片"></a>使用AFNetworking加载图片</h2><p>需要引入一下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;UIImageView+AFNetworking.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>然后，UIImageView就会有setImageWithURL供使用。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURL</span> *URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@”<a href="http://www.baidu.com/img/bdlogo.png" target="_blank" rel="external">http://www.baidu.com/img/bdlogo.png</a>“</span>];</span><br><span class="line">[imageView setImageWithURL:URL];</span><br></pre></td></tr></table></figure>

<p>另外，提供了其他方法，可设置占位图片，图片下载成功和失败的处理，以及停止图片下载的方法。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">– <span class="string">setImageWithURL:</span></span><br><span class="line">– <span class="string">setImageWithURL:</span><span class="string">placeholderImage:</span></span><br><span class="line">– <span class="string">setImageWithURLRequest:</span><span class="string">placeholderImage:</span><span class="string">success:</span><span class="string">failure:</span></span><br><span class="line">– cancelImageRequestOperation</span><br></pre></td></tr></table></figure>

<h2 id="使用SDWebimage加载图片"><a href="#使用SDWebimage加载图片" class="headerlink" title="使用SDWebimage加载图片"></a>使用SDWebimage加载图片</h2><p><a href="https://github.com/rs/SDWebImage">SDWebImage</a>，调用方式和AFNetworking类似，功能更强大，使用也很普及。</p>
<p>需要引入：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;SDWebImage/UIImageView+WebCache.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURL</span> *URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@”<a href="http://www.sogou.com/images/logo/new/sogou.png" target="_blank" rel="external">http://www.sogou.com/images/logo/new/sogou.png</a>“</span>];</span><br><span class="line">[imageView sd_setImageWithURL:URL];</span><br></pre></td></tr></table></figure>

<p>下面是完整的方法列表：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">– sd_imageURL</span><br><span class="line">– <span class="string">sd_setImageWithURL:</span></span><br><span class="line">– <span class="string">sd_setImageWithURL:</span><span class="string">placeholderImage:</span></span><br><span class="line">– <span class="string">sd_setImageWithURL:</span><span class="string">placeholderImage:</span><span class="string">options:</span></span><br><span class="line">– <span class="string">sd_setImageWithURL:</span><span class="string">completed:</span></span><br><span class="line">– <span class="string">sd_setImageWithURL:</span><span class="string">placeholderImage:</span><span class="string">completed:</span></span><br><span class="line">– <span class="string">sd_setImageWithURL:</span><span class="string">placeholderImage:</span><span class="string">options:</span><span class="string">completed:</span></span><br><span class="line">– <span class="string">sd_setImageWithURL:</span><span class="string">placeholderImage:</span><span class="string">options:</span><span class="string">progress:</span><span class="string">completed:</span></span><br><span class="line">– <span class="string">sd_setImageWithPreviousCachedImageWithURL:</span><span class="string">andPlaceholderImage:</span><span class="string">options:</span><span class="string">progress:</span><span class="string">completed:</span></span><br><span class="line">– <span class="string">sd_setAnimationImagesWithURLs:</span></span><br><span class="line">– sd_cancelCurrentImageLoad</span><br><span class="line">– sd_cancelCurrentAnimationImagesLoad</span><br></pre></td></tr></table></figure>

<p>比AFNetworking选项更多一些，比如可以设置<code>SDWebImageOptions</code>：</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_OPTIONS(NSUInteger, SDWebImageOptions ) &#123;</span><br><span class="line">   <span class="variable">SDWebImageRetryFailed =</span> <span class="number">1</span> &lt; &lt; <span class="number">0</span>,</span><br><span class="line">   <span class="variable">SDWebImageLowPriority =</span> <span class="number">1</span> &lt; &lt; <span class="number">1</span>,</span><br><span class="line">   <span class="variable">SDWebImageCacheMemoryOnly =</span> <span class="number">1</span> &lt; &lt; <span class="number">2</span>,</span><br><span class="line">   <span class="variable">SDWebImageProgressiveDownload =</span> <span class="number">1</span> &lt; &lt; <span class="number">3</span>,</span><br><span class="line">   <span class="variable">SDWebImageRefreshCached =</span> <span class="number">1</span> &lt; &lt; <span class="number">4</span>,</span><br><span class="line">   <span class="variable">SDWebImageContinueInBackground =</span> <span class="number">1</span> &lt; &lt; <span class="number">5</span>,</span><br><span class="line">   <span class="variable">SDWebImageHandleCookies =</span> <span class="number">1</span> &lt; &lt; <span class="number">6</span>,</span><br><span class="line">   <span class="variable">SDWebImageAllowInvalidSSLCertificates =</span> <span class="number">1</span> &lt; &lt; <span class="number">7</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>还有：typedef void(^SDWebImageDownloaderProgressBlock)(NSInteger receivedSize, NSInteger expectedSize)</p>
<ul>
<li>可以用一组图片生成动画：sd_setAnimationImagesWithURLs</li>
<li>使用之前的Cache先显示图片？sd_setImageWithPreviousCachedImageWithURL，这个我从字面意思理解，还没有使用</li>
<li>有个process block，<code>sd_setImageWithURL:placeholderImage:options:progress:completed:</code>，可以获得<code>receivedSize</code>和<code>expectedSize</code>字节参数，用来显示进程百分比</li>
</ul>
<p>另外，<a href="http://bpoplauschi.wordpress.com/2014/03/21/ios-image-caching-sdwebimage-vs-fastimage/" target="_blank" rel="external">iOS image caching. Libraries benchmark (SDWebImage vs FastImageCache)</a>，这篇文章测试和对比，结论也是SDWebimage更好一些。</p>
<h2 id="AFNetworking上传文件"><a href="#AFNetworking上传文件" class="headerlink" title="AFNetworking上传文件"></a>AFNetworking上传文件</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSMutableURLRequest</span> <em>request = [[AFHTTPRequestSerializer serializer] multipartFormRequestWithMethod:<span class="string">@”POST”</span> URLString:<span class="string">@”<a href="http://localhost/upload" target="_blank" rel="external">http://localhost/upload</a>“</span> parameters:<span class="literal">nil</span> constructingBodyWithBlock:^(<span class="keyword">id</span>&lt;AFMultipartFormData&gt; formData) &#123;</em></span><br><span class="line">    [formData appendPartWithFileURL:uploadFilePath name:<span class="string">@”file”</span> fileName:<span class="string">@”filename.jpg”</span> mimeType:<span class="string">@”image/jpeg”</span> error:<span class="literal">nil</span>];</span><br><span class="line">&#125; error:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">AFURLSessionManager manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</span><br><span class="line"><span class="built_in">NSProgress</span> <em>progress = <span class="literal">nil</span>;</em></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSURLSessionUploadTask</span> uploadTask = [manager uploadTaskWithStreamedRequest:request progress:&amp;progress completionHandler:^(<span class="built_in">NSURLResponse</span> <em>response, <span class="keyword">id</span> responseObject, <span class="built_in">NSError</span> </em>error) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@”Error: %@”</span>, error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@”%@ %@”</span>, response, responseObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[uploadTask resume];</span><br></pre></td></tr></table></figure>

<p>可以通过<code>NSProgress</code>获取上传进度（具体怎么做呢？）</p>
<h2 id="使用OHHTTPStubs伪造HTTP响应"><a href="#使用OHHTTPStubs伪造HTTP响应" class="headerlink" title="使用OHHTTPStubs伪造HTTP响应"></a>使用OHHTTPStubs伪造HTTP响应</h2><p><a href="https://github.com/AliSoftware/OHHTTPStubs">OHHTTPStubs</a>，可用来伪造HTTP响应，这样不依赖服务器端，iOS的开发人员就可以测试网络服务了。</p>
<p>这个API，同时支持：</p>
<ul>
<li>NSURLConnection</li>
<li>NSURLSession</li>
</ul>
<p>不过，有个问题需要注意，如果App要上AppStore，是不能连接OHHTTPStubs的。</p>
<p>下面说下怎么使用，先看代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> <em>baseUrl=<span class="string">@”<a href="http://localhost" target="_blank" rel="external">http://localhost</a>“</span>;</em></span><br><span class="line"></span><br><span class="line"><span class="comment">//针对<a href="http://locahost/json请求的mock" target="_blank" rel="external">http://locahost/json请求的mock</a></span></span><br><span class="line">[OHHTTPStubs stubRequestsPassingTest:^<span class="built_in">BOOL</span>(<span class="built_in">NSURLRequest</span> request) &#123;        </span><br><span class="line">    <span class="built_in">NSDictionary</span> <em>params=[<span class="built_in">NSDictionary</span> objectsFromURLQueryString:request<span class="variable">.URL</span><span class="variable">.query</span>];</em></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@”id: %@”</span>,params[<span class="string">@”id”</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [[request<span class="variable">.URL</span> absoluteString] rangeOfString:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@”%@/json”</span>,baseUrl]]<span class="variable">.location</span>==<span class="number">0</span>;</span><br><span class="line">&#125; withStubResponse:^OHHTTPStubsResponse(<span class="built_in">NSURLRequest</span> <em>request) &#123;</em></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@”reqeust: %@”</span>,request);</span><br><span class="line">    <span class="built_in">NSString</span> fixture = OHPathForFileInBundle(<span class="string">@”test.json”</span>,<span class="literal">nil</span>);</span><br><span class="line">    <span class="keyword">return</span> [[OHHTTPStubsResponse responseWithFileAtPath:fixture</span><br><span class="line">                                             statusCode:<span class="number">200</span> headers:@&#123;<span class="string">@”Content-Type”</span>:<span class="string">@”text/json”</span>&#125;</span><br><span class="line">             ]requestTime:<span class="number">0</span> responseTime:<span class="number">0</span>];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>基本思路是，调用方法，通过2个回调（Block）实现对指定HTTP请求的响应伪造：</p>
<ul>
<li>是否是要拦截的请求</li>
<li>拦截后，创建一个响应</li>
</ul>
<p>在上述代码里还演示了：</p>
<ul>
<li>如何从URL中提取GET请求的参数，这里用到了：<a href="https://github.com/anegmawad/URLQueryToCocoa">URLQueryToCocoa</a></li>
<li>使用本地文件作为JSON数据，加入到HTTP响应中</li>
<li>可以设置请求和响应的延时，<code>requestTime:0 responseTime:0</code>，这个相当有用</li>
</ul>
<p>## </p>
<p>还可以用于伪造图片的响应，测试了一下，上述的AFNetworking以及SDWebimage都有效。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GET image with sdwebimage</span></span><br><span class="line">[OHHTTPStubs stubRequestsPassingTest:^<span class="built_in">BOOL</span>(<span class="built_in">NSURLRequest</span> <em>request) &#123;</em></span><br><span class="line">    <span class="keyword">return</span> [[request<span class="variable">.URL</span> absoluteString] isEqualToString:<span class="string">@”<a href="http://www.sogou.com/images/logo/new/sogou.png" target="_blank" rel="external">http://www.sogou.com/images/logo/new/sogou.png</a>“</span>];</span><br><span class="line">&#125; withStubResponse:^OHHTTPStubsResponse(<span class="built_in">NSURLRequest</span> <em>request) &#123;</em></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@”reqeust: %@”</span>,request);</span><br><span class="line">    <span class="built_in">NSString</span> fixture = OHPathForFileInBundle(<span class="string">@”taobao.png”</span>,<span class="literal">nil</span>);</span><br><span class="line">    <span class="keyword">return</span> [[OHHTTPStubsResponse responseWithFileAtPath:fixture</span><br><span class="line">                                             statusCode:<span class="number">200</span> headers:@&#123;<span class="string">@”Content-Type”</span>:<span class="string">@”image/png”</span>&#125;</span><br><span class="line">             ]requestTime:<span class="number">0</span> responseTime:<span class="number">0</span>];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>测试的时候，要注意，之前可能是通过真实网络获取的，因此会有缓存。需要把App删除，重新安装测试。</p>
<p>应该能看到类似下面的效果（使用的时本地图片了）：</p>
<p><img src="http://shiqichan.qiniudn.com//using-afnetworking-sdwebimage-and-ohhttpstubs/p1.png" alt=""></p>
<p>## </p>
<p>OHHTTPStubs这些代码，只需在App启动加载一次即可，可写在<code>AppDelegate</code>中：</p>
<p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">-</span> (BOOL)<span class="tag">application</span>:(UIApplication <em>)<span class="tag">application</span> <span class="tag">didFinishLaunchingWithOptions</span>:(NSDictionary </em>)<span class="tag">launchOptions</span> &#123;</span><br><span class="line">    <span class="attr_selector">[[AFNetworkReachabilityManager sharedManager]</span> <span class="tag">startMonitoring</span>];</span><br><span class="line">    <span class="attr_selector">[HttpMock initMock]</span>;</span><br><span class="line"><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;代码屏蔽掉，自然就使用真实网络了。&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;编译正式使用代码的时候，可以考虑条件编译。&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;## &lt;span class=&quot;tag&quot;&gt;AFNetworking&lt;/span&gt;的网络监控&lt;span class=&quot;tag&quot;&gt;API&lt;/span&gt;&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;提供的`&lt;span class=&quot;tag&quot;&gt;AFNetworkReachabilityManager&lt;/span&gt;`可以单独使用，很方便，用于监控网络变化。&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;比如，可以在&lt;span class=&quot;tag&quot;&gt;App&lt;/span&gt;启动后执行下面操作，启动监控器：&lt;/span&gt;</div><div class="line">&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</div><div class="line"></div><div class="line">*   (BOOL)application:(UIApplication _)application didFinishLaunchingWithOptions:(NSDictionary _)launchOptions &#123;</div><div class="line">  [[AFNetworkReachabilityManager sharedManager] startMonitoring];&lt;figure class=&quot;highlight asciidoc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;</div><div class="line">&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;header&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;span class=&quot;line&quot;&gt;在ViewController中：&lt;/span&gt;</div><div class="line">&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</div><div class="line"></div><div class="line">-(void)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [[AFNetworkReachabilityManager sharedManager] setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) &#123;</div><div class="line">        NSLog(@”Reachability: %@”, AFStringFromNetworkReachabilityStatus(status));</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure></span></pre></td></tr></table></figure></p>
<p>监听网络变化，做出相应的操作，比如弹出提示框。</p>
<p>## </p>
<p>正式使用时：</p>
<ul>
<li>可考虑在AppDelegate中<code>setReachabilityStatusChangeBlock</code>，当状态变化后，通过<code>NSNotification</code>发出通知</li>
<li>在各个ViewController的<code>viewDidAppear</code>和<code>viewWillDisappear</code>中监听和取消监听通知</li>
</ul>
<p>这是设想，还没有付诸实施，也许还有问题。</p>
<p>不过至少不应该像本例中的，在ViewController中使用<code>setReachabilityStatusChangeBlock</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://blog.shiqichan.com/using-afnetworking-sdwebimage-and-ohhttpstubs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.shiqicha
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/"/>
    
      <category term="AFNetworking" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/AFNetworking/"/>
    
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/iOS/"/>
    
      <category term="AFNetworking" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/AFNetworking/"/>
    
      <category term="SDWebimage" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/SDWebimage/"/>
    
      <category term="OHHTTPStubs" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/OHHTTPStubs/"/>
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2015/11/12/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2015/11/12/第一篇文章/</id>
    <published>2015-11-12T11:37:40.000Z</published>
    <updated>2017-09-11T12:45:06.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>NSLog(@&quot;Hello World&quot;);
</code></pre><ul>
<li><p>捣腾了两天的终于出炉了，一路走来坑坑洼洼，实属不易！此时的心情犹如刚学OC时，控制台打印出“Hello World”一般。</p>
</li>
<li><p>后期会将珍藏已久的好文章陆续放上去，文章主要以技术分享为主，但时而也会有一些自己的小心情、小想法之类的！恭请敬阅。 </p>
</li>
<li><p>由于刚开始弄所以排版和功能肯定有不足之处，欢迎批评指正。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;NSLog(@&amp;quot;Hello World&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;捣腾了两天的终于出炉了，一路走来坑坑洼洼，实属不易！此时的心情犹如刚学OC时，控制台打印出“Hello World”一般。&lt;/p&gt;
&lt;/li&gt;
    
    </summary>
    
      <category term="杂记" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
      <category term="生活" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/%E6%9D%82%E8%AE%B0/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="杂记" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
      <category term="博客" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
