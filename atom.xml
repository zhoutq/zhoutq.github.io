<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>统乾</title>
  <subtitle>ZhouTongqian&#39;s Blog</subtitle>
  <link href="/zhoutq.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/zhoutq/zhoutq.github.io/"/>
  <updated>2017-09-10T13:06:13.000Z</updated>
  <id>https://github.com/zhoutq/zhoutq.github.io/</id>
  
  <author>
    <name>zhoutq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[转]教你搭建App内测下载平台</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2017/08/10/%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BAApp%E5%86%85%E6%B5%8B%E4%B8%8B%E8%BD%BD%E5%B9%B3%E5%8F%B0/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2017/08/10/教你搭建App内测下载平台/</id>
    <published>2017-08-10T03:22:13.000Z</published>
    <updated>2017-09-10T13:06:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自简书作者:<a href="http://www.jianshu.com/p/48b38a2d0bbb" target="_blank" rel="external">zhao0</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>App开发测试过程中，我们会把安装包传到各种第三方的内测分发平台方便下载。这些平台或多或少有这样那样的限制，比如下载量啊、付费啊、不能方便找到历史版本啊。还有一方面，我们经常会打Debug版本的包方便调试，又不希望Debug包流传到外部去，这样就很有必要自己搭一个下载平台，于是就有了这个项目(<a href="https://github.com/zhao0/ipapk-server">github地址</a>)。</p>
<div class="image-package"><br><img src="http://upload-images.jianshu.io/upload_images/2057602-ba63d6a985727af3.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><div class="image-caption"></div><br></div>

<h2 id="技术调研"><a href="#技术调研" class="headerlink" title="技术调研"></a>技术调研</h2><h5 id="怎么下载"><a href="#怎么下载" class="headerlink" title="怎么下载"></a>怎么下载</h5><p>先说安卓，apk文件通过最简单的http/ftp下载就可以安装了，略过。<br>iOS稍微复杂一点，需要两步才能完成。<br>第一，下载链接必须是这样的格式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">itms-services://?action=download-manifest&amp;amp;url=一个plist文件的地址</div></pre></td></tr></table></figure>
<p>第二，plist内容如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;</div><div class="line">&amp;lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&amp;gt;</div><div class="line">&amp;lt;plist version="1.0"&amp;gt;</div><div class="line">&amp;lt;dict&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;items&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;array&amp;gt;</div><div class="line">&amp;lt;dict&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;assets&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;array&amp;gt;</div><div class="line">&amp;lt;dict&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;kind&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;string&amp;gt;software-package&amp;lt;/string&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;url&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;string&amp;gt;ipa文件的地址&amp;lt;/string&amp;gt;</div><div class="line">&amp;lt;/dict&amp;gt;</div><div class="line">&amp;lt;/array&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;metadata&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;dict&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;bundle-identifier&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;string&amp;gt;bundleID&amp;lt;/string&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;bundle-version&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;string&amp;gt;1.0&amp;lt;/string&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;kind&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;string&amp;gt;software&amp;lt;/string&amp;gt;</div><div class="line">&amp;lt;key&amp;gt;title&amp;lt;/key&amp;gt;</div><div class="line">&amp;lt;string&amp;gt;AppTitle&amp;lt;/string&amp;gt;</div><div class="line">&amp;lt;/dict&amp;gt;</div><div class="line">&amp;lt;/dict&amp;gt;</div><div class="line">&amp;lt;/array&amp;gt;</div><div class="line">&amp;lt;/dict&amp;gt;</div><div class="line">&amp;lt;/plist&amp;gt;</div></pre></td></tr></table></figure></p>
<p>其中，最重要的就是ipa文件的地址，要求必须是https协议，那就需要SSL证书，幸运的是我们可以信任自签名的证书。下载的过程就是这样，当然我们希望这个链接和plist的生成是自动完成的。</p>
<h5 id="自签名证书"><a href="#自签名证书" class="headerlink" title="自签名证书"></a>自签名证书</h5><p>参考<a href="http://www.cnblogs.com/lihuang/articles/4205540.html" target="_blank" rel="external">如何创建一个自签名的SSL证书(X509)</a></p>
<h5 id="包信息提取"><a href="#包信息提取" class="headerlink" title="包信息提取"></a>包信息提取</h5><p>单单只能下载还不够，我们希望看到更多的信息：App名字、版本号、build号、更新时间、图标等。这些信息虽然可以留给上传者在上传的时候一并带上，但是作为有追求的程序员，把方便留给别人的最基本的，因此我们要从ipa/apk中提取这些信息。<br>无论是ipa还是apk，本质都是zip压缩文件。<br>对于iOS的ipa，包信息都放在Info.plist中，主要有CFBundleVersion、CFBundleIdentifier、CFBundleShortVersionString、CFBundleName等。图标文件的名字也是固定的，只要解压就可以得到。不过，苹果对png图片进行了了自定义的<a href="http://pmt.sourceforge.net/pngcrush/" target="_blank" rel="external">pngcrush</a>压缩，有压缩自然就有还原工具<a href="http://www.jongware.com/pngdefry.html" target="_blank" rel="external">pngdefry</a>。<br>对于Android的apk，解压后还能看到AndroidManifest.xml，但是里面的内容经过编码显示为乱码，不方便查看，需要借助开发工具aapt(Android Asset Packaging Tool)，方法如下<br><code>aapt dump badging apkPath</code><br>输出的文本格式如下，不是标准的歌声，需要手动转换一下。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">package: name='com.jianshu.haruki' versionCode='16070101' versionName='1.11.2'</div><div class="line">sdkVersion:'14'</div><div class="line">targetSdkVersion:'22'</div><div class="line">...</div><div class="line">application: label='简书' icon='res/drawable-hdpi-v4/icon_jianshu_new.png'</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="找轮子"><a href="#找轮子" class="headerlink" title="找轮子"></a>找轮子</h2><p>程序员有一个习惯，需要某个东西的时候会先一番搜索，直接用别人写好的，用着用着发现别人写的东西有这样那样的不足，然后撸起袖子自己造一个。这次也不例外，我在github上找到了一个<a href="https://github.com/bumaociyuan/ios-ipa-server">ios-ipa-server</a>，它的特点是简单，ipa文件存储在一个目录下，没有数据库，包信息只有上传时间(其实就是文件更新时间)，不能对app归类，只靠文件名区别，不支持上传，如下图：</p>
<div class="image-package"><br><img src="http://upload-images.jianshu.io/upload_images/2057602-31224eefc821b5a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><div class="image-caption"></div><br></div>

<p>浏览器访问下载页面时，后端实时解析包信息、解压icon图片，这样做效率是非常低的。<br>这么多不足我们就有了造轮子的理由了。</p>
<h2 id="自己造一个"><a href="#自己造一个" class="headerlink" title="自己造一个"></a>自己造一个</h2><p>既然<a href="https://github.com/bumaociyuan/ios-ipa-server">ios-ipa-server</a>是基于node-express写的，正好我<strong>没写过</strong>nodejs，那就在它的基础上继续写吧，借机学(zhuang)习(bi)一下。<br>整个项目的结构是这样的，提供四个API：包上传、获取所有App最新版本、获取某个App的所有版本、动态生成plist文件，数据存储使用sqlite3。</p>
<h5 id="包上传"><a href="#包上传" class="headerlink" title="包上传"></a>包上传</h5><p>接口设计如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">path:</div><div class="line">POST /upload</div><div class="line"></div><div class="line">param: </div><div class="line">package:安装包文件</div><div class="line"></div><div class="line">response:</div><div class="line">&#123;</div><div class="line">id: 6,</div><div class="line">guid: "46269d71-9fda-76fc-3442-a118d6b08bf1",</div><div class="line">bundleID: "com.jianshu.Hugo",</div><div class="line">version: "2.11.4",</div><div class="line">build: "1608051045",</div><div class="line">icon: "https://10.20.30.233:1234/icon/46269d71-9fda-76fc-3442-a118d6b08bf1.png",</div><div class="line">name: "Hugo",</div><div class="line">uploadTime: "2016-12-01 20:50:05",</div><div class="line">platform: "ios",</div><div class="line">url: "itms-services://?action=download-manifest&amp;amp;url=https://10.20.30.233:1234/plist/46269d71-9fda-76fc-3442-a118d6b08bf1"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后端需要拿到安装包，提取出包信息和png图标图片，然后插入到数据库中，最后存储安装包文件和png图片，这也是最关键、最复杂的一个API。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">app.post('/upload', function(req, res) &#123;</div><div class="line">var form = new multiparty.Form();</div><div class="line">form.parse(req, function(err, fields, files) &#123;</div><div class="line">var obj = files.package[0];</div><div class="line">var tmp_path = obj.path;</div><div class="line">parseAppAndInsertToDb(tmp_path, info =&amp;gt; &#123;</div><div class="line">storeApp(tmp_path, info["guid"], error =&amp;gt; &#123;</div><div class="line">if (error) &#123;</div><div class="line">errorHandler(error,res)</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">console.log(info)</div><div class="line">res.send(info)</div><div class="line">&#125;, error =&amp;gt; &#123;</div><div class="line">errorHandler(error,res)</div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>接收表单信息用到了multiparty模块，<code>parseAppAndInsertToDb</code>内部完成了包信息的提取和存储，<code>storeApp</code>存储包文件。<br><code>parseAppAndInsertToDb</code>的实现如下，</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">function parseAppAndInsertToDb(filePath, callback, errorCallback) &#123;</div><div class="line">var guid = Guid.create().toString();</div><div class="line">var parse, extract</div><div class="line">if (path.extname(filePath) === ".ipa") &#123;</div><div class="line">parse = parseIpa</div><div class="line">extract = extractIpaIcon</div><div class="line">&#125; else if (path.extname(filePath) === ".apk") &#123;</div><div class="line">parse = parseApk</div><div class="line">extract = extractApkIcon</div><div class="line">&#125;</div><div class="line">Promise.all([parse(filePath),extract(filePath,guid)]).then(values =&amp;gt; &#123;</div><div class="line">var info = values[0]</div><div class="line">info["guid"] = guid</div><div class="line">excuteDB("INSERT INTO info (guid, platform, build, bundleID, version, name) VALUES (?, ?, ?, ?, ?, ?);",</div><div class="line">[info["guid"], info["platform"], info["build"], info["bundleID"], info["version"], info["name"]],function(error)&#123;</div><div class="line">if (!error)&#123;</div><div class="line">callback(info)</div><div class="line">&#125; else &#123;</div><div class="line">errorCallback(error)</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;, reason =&amp;gt; &#123;</div><div class="line">errorCallback(reason)</div><div class="line">&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先根据文件后缀名判断安装包类型，因为ipa和apk的处理逻辑不一样，所以分别对应两个方法，包信息的提取和icon提取可以同时进行，所以这里用了<code>Promise.all</code>。<code>parseIpa</code>和<code>parseApk</code>就是包信息的提取。<code>extractApkIcon</code>和<code>extractIpaIcon</code>则是icon的提取，<code>extractIpaIcon</code>多了一步还原png图片的处理。<br><code>parseIpa</code>用到了<code>ipa-extract-info</code>模块，<code>parseApk</code>则使用了<code>apk-parser3</code>，代码都非常简单。详细可进入<a href="https://github.com/zhao0/ipapk-server">github地址</a>。</p>
<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>其他三个API则比较简单了，无非就是根据参数取数据，不再赘述。</p>
<h2 id="集成和使用"><a href="#集成和使用" class="headerlink" title="集成和使用"></a>集成和使用</h2><p>安装步骤非常简单，首先需要安装node，有了node之后只要一行命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g ipapk-server</div></pre></td></tr></table></figure>
<p>安装完成之后输入命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ipapk-server</div></pre></td></tr></table></figure>
<p>手机浏览器访问<a href="https://ip:port" target="_blank" rel="external">https://ip:port</a> 即可打开下载页面</p>
<div class="image-package"><br><img src="http://upload-images.jianshu.io/upload_images/2057602-778cdf6e0a5be67b.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><div class="image-caption"></div><br></div><div class="image-package"><br><img src="http://upload-images.jianshu.io/upload_images/2057602-ba63d6a985727af3.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><div class="image-caption"></div><br></div>

<p>App的信息获取都设计成了API，提供给开发者更灵活的接入方式，可以做web页面，也可以做成App，我的好朋友mask(<a href="http://www.jianshu.com/users/98ca2b6009b9" target="_blank" rel="external">人格分裂术</a>)贡献了不少工作，完成默认的web下载页面。<br>更详细的内容请参考<a href="https://github.com/zhao0/ipapk-server">github</a>。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>简书作为一个优质原创内容社区，拥有大量优质原创内容，提供了极佳的阅读和书写体验，吸引了大量文字爱好者和程序员。<a href="http://www.jianshu.com/collection/5e84f0a4fbb0" target="_blank" rel="external">简书技术团队</a>在这里分享技术心得体会，是希望抛砖引玉，吸引更多的程序员大神来简书记录、分享、交流自己的心得体会。<a href="http://www.jianshu.com/collection/5e84f0a4fbb0" target="_blank" rel="external">这个专题</a>以后会不定期更新简书技术团队的文章，包括Android、iOS、前端、后端等等，欢迎大家关注。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自简书作者:&lt;a href=&quot;http://www.jianshu.com/p/48b38a2d0bbb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zhao0&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;head
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/"/>
    
      <category term="App内测下载平台" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/App%E5%86%85%E6%B5%8B%E4%B8%8B%E8%BD%BD%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="App内测下载平台" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/App%E5%86%85%E6%B5%8B%E4%B8%8B%E8%BD%BD%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="移动开发" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>[转]简单监测iOS卡顿的demo</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2017/06/21/%E7%AE%80%E5%8D%95%E7%9B%91%E6%B5%8BiOS%E5%8D%A1%E9%A1%BF%E7%9A%84demo/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2017/06/21/简单监测iOS卡顿的demo/</id>
    <published>2017-06-21T10:13:24.000Z</published>
    <updated>2017-09-10T13:06:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自简书作者:<a href="http://www.jianshu.com/p/71cfbcb15842" target="_blank" rel="external">game3108</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文的demo代码也会更新到<a href="https://github.com/game3108/RunloopMonitorDemo">github</a>上。</p>
<p>做这个demo思路来源于微信team的：<a href="http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207890859&amp;idx=1&amp;sn=e98dd604cdb854e7a5808d2072c29162&amp;scene=4#wechat_redirect" target="_blank" rel="external">微信iOS卡顿监控系统</a>。<br>主要思路:通过监测Runloop的kCFRunLoopAfterWaiting，用一个子线程去检查，一次循环是否时间太长。<br>其中主要涉及到了runloop的原理。关于整个原理：<a href="http://blog.ibireme.com/2015/05/18/runloop/" target="_blank" rel="external">深入理解RunLoop</a>讲解的比较仔细。<br>以下就是runloop大概的运行方式：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 1. 通知Observers，即将进入RunLoop</span></div><div class="line"><span class="comment">/// 此处有Observer会创建AutoreleasePool: _objc_autoreleasePoolPush();</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopEntry);</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line"></div><div class="line"><span class="comment">/// 2. 通知 Observers: 即将触发 Timer 回调。</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeTimers);</div><div class="line"><span class="comment">/// 3. 通知 Observers: 即将触发 Source (非基于port的,Source0) 回调。</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeSources);</div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);</div><div class="line"></div><div class="line"><span class="comment">/// 4. 触发 Source0 (非基于port的) 回调。</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__(source0);</div><div class="line"></div><div class="line"><span class="comment">/// 5. GCD处理main block</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);</div><div class="line"></div><div class="line"><span class="comment">/// 6. 通知Observers，即将进入休眠</span></div><div class="line"><span class="comment">/// 此处有Observer释放并新建AutoreleasePool: _objc_autoreleasePoolPop(); _objc_autoreleasePoolPush();</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeWaiting);</div><div class="line"></div><div class="line"><span class="comment">/// 7. sleep to wait msg.</span></div><div class="line">mach_msg() -&amp;gt; mach_msg_trap();</div><div class="line"></div><div class="line"><span class="comment">/// 8. 通知Observers，线程被唤醒</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopAfterWaiting);</div><div class="line"></div><div class="line"><span class="comment">/// 9. 如果是被Timer唤醒的，回调Timer</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__(timer);</div><div class="line"></div><div class="line"><span class="comment">/// 9. 如果是被dispatch唤醒的，执行所有调用 dispatch_async 等方法放入main queue 的 block</span></div><div class="line">__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(dispatched_block);</div><div class="line"></div><div class="line"><span class="comment">/// 9. 如果如果Runloop是被 Source1 (基于port的) 的事件唤醒了，处理这个事件</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__(source1);</div><div class="line"></div><div class="line">&#125; <span class="keyword">while</span> (...);</div><div class="line"></div><div class="line"><span class="comment">/// 10. 通知Observers，即将退出RunLoop</span></div><div class="line"><span class="comment">/// 此处有Observer释放AutoreleasePool: _objc_autoreleasePoolPop();</span></div><div class="line">__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopExit);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中UI主要集中在<code>__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__(source0);</code><br>和<code>__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__(source1);</code>之前。<br>获取<code>kCFRunLoopBeforeSources</code>到<code>kCFRunLoopBeforeWaiting</code>再到<code>kCFRunLoopAfterWaiting</code>的状态就可以知道是否有卡顿的情况。</p>
<h2 id="NSTimer的实现"><a href="#NSTimer的实现" class="headerlink" title="NSTimer的实现"></a>NSTimer的实现</h2><p>具体代码如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    <span class="comment">//  MonitorController.h</span></div><div class="line">    <span class="comment">//  RunloopMonitorDemo</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">//  Created by game3108 on 16/4/13.</span></div><div class="line">    <span class="comment">//  Copyright © 2016年 game3108. All rights reserved.</span></div><div class="line">    <span class="comment">//</span></div><div class="line"></div><div class="line">    <span class="meta">#import &amp;lt;Foundation/Foundation.h&amp;gt;</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">@interface</span> <span class="title">MonitorController</span> : <span class="title">NSObject</span></span></div><div class="line">    + (<span class="keyword">instancetype</span>) sharedInstance;</div><div class="line">    - (<span class="keyword">void</span>) startMonitor;</div><div class="line">    - (<span class="keyword">void</span>) endMonitor;</div><div class="line">    - (<span class="keyword">void</span>) printLogTrace;</div><div class="line">    <span class="keyword">@end</span></div><div class="line"></div><div class="line">``` </div><div class="line"></div><div class="line">``` objectivec</div><div class="line"></div><div class="line">    <span class="comment">//  MonitorController.m</span></div><div class="line">    <span class="comment">//  RunloopMonitorDemo</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">//  Created by game3108 on 16/4/13.</span></div><div class="line">    <span class="comment">//  Copyright © 2016年 game3108. All rights reserved.</span></div><div class="line">    <span class="comment">//</span></div><div class="line"></div><div class="line">    <span class="meta">#import <span class="meta-string">"MonitorController.h"</span></span></div><div class="line">    <span class="meta">#include &amp;lt;libkern/OSAtomic.h&amp;gt;</span></div><div class="line">    <span class="meta">#include &amp;lt;execinfo.h&amp;gt;</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">@interface</span> <span class="title">MonitorController</span>()</span>&#123;</div><div class="line">    <span class="built_in">CFRunLoopObserverRef</span> _observer;</div><div class="line">    <span class="keyword">double</span> _lastRecordTime;</div><div class="line">    <span class="built_in">NSMutableArray</span> *_backtrace;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">@end</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">@implementation</span> <span class="title">MonitorController</span></span></div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">double</span> _waitStartTime;</div><div class="line"></div><div class="line">    + (<span class="keyword">instancetype</span>) sharedInstance&#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> once;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">id</span> sharedInstance;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;amp;once, ^&#123;</div><div class="line">    sharedInstance = [[<span class="keyword">self</span> alloc] init];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> sharedInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    - (<span class="keyword">void</span>) startMonitor&#123;</div><div class="line">    [<span class="keyword">self</span> addMainThreadObserver];</div><div class="line">    [<span class="keyword">self</span> addSecondaryThreadAndObserver];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    - (<span class="keyword">void</span>) endMonitor&#123;</div><div class="line">    <span class="keyword">if</span> (!_observer) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">CFRunLoopRemoveObserver</span>(<span class="built_in">CFRunLoopGetMain</span>(), _observer, kCFRunLoopCommonModes);</div><div class="line">    <span class="built_in">CFRelease</span>(_observer);</div><div class="line">    _observer = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">#pragma mark printLogTrace</span></div><div class="line">    - (<span class="keyword">void</span>)printLogTrace&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"====================堆栈\n %@ \n"</span>,_backtrace);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">#pragma mark addMainThreadObserver</span></div><div class="line">    - (<span class="keyword">void</span>) addMainThreadObserver &#123;</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">    <span class="comment">//建立自动释放池</span></div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">    <span class="comment">//获得当前thread的Run loop</span></div><div class="line">    <span class="built_in">NSRunLoop</span> *myRunLoop = [<span class="built_in">NSRunLoop</span> currentRunLoop];</div><div class="line"></div><div class="line">    <span class="comment">//设置Run loop observer的运行环境</span></div><div class="line">    <span class="built_in">CFRunLoopObserverContext</span> context = &#123;<span class="number">0</span>, (__bridge <span class="keyword">void</span> *)(<span class="keyword">self</span>), <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line"></div><div class="line">    <span class="comment">//创建Run loop observer对象</span></div><div class="line">    <span class="comment">//第一个参数用于分配observer对象的内存</span></div><div class="line">    <span class="comment">//第二个参数用以设置observer所要关注的事件，详见回调函数myRunLoopObserver中注释</span></div><div class="line">    <span class="comment">//第三个参数用于标识该observer是在第一次进入run loop时执行还是每次进入run loop处理时均执行</span></div><div class="line">    <span class="comment">//第四个参数用于设置该observer的优先级</span></div><div class="line">    <span class="comment">//第五个参数用于设置该observer的回调函数</span></div><div class="line">    <span class="comment">//第六个参数用于设置该observer的运行环境</span></div><div class="line">    _observer = <span class="built_in">CFRunLoopObserverCreate</span>(kCFAllocatorDefault, kCFRunLoopAllActivities, <span class="literal">YES</span>, <span class="number">0</span>, &amp;amp;myRunLoopObserver, &amp;amp;context);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (_observer) &#123;</div><div class="line">    <span class="comment">//将Cocoa的NSRunLoop类型转换成Core Foundation的CFRunLoopRef类型</span></div><div class="line">    <span class="built_in">CFRunLoopRef</span> cfRunLoop = [myRunLoop getCFRunLoop];</div><div class="line">    <span class="comment">//将新建的observer加入到当前thread的run loop</span></div><div class="line">    <span class="built_in">CFRunLoopAddObserver</span>(cfRunLoop, _observer, kCFRunLoopDefaultMode);</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">void</span> myRunLoopObserver(<span class="built_in">CFRunLoopObserverRef</span> observer, <span class="built_in">CFRunLoopActivity</span> activity, <span class="keyword">void</span> *info) &#123;</div><div class="line">    <span class="keyword">switch</span> (activity) &#123;</div><div class="line">    <span class="comment">//The entrance of the run loop, before entering the event processing loop.</span></div><div class="line">    <span class="comment">//This activity occurs once for each call to CFRunLoopRun and CFRunLoopRunInMode</span></div><div class="line">    <span class="keyword">case</span> kCFRunLoopEntry:</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"run loop entry"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    <span class="comment">//Inside the event processing loop before any timers are processed</span></div><div class="line">    <span class="keyword">case</span> kCFRunLoopBeforeTimers:</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"run loop before timers"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    <span class="comment">//Inside the event processing loop before any sources are processed</span></div><div class="line">    <span class="keyword">case</span> kCFRunLoopBeforeSources:</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"run loop before sources"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    <span class="comment">//Inside the event processing loop before the run loop sleeps, waiting for a source or timer to fire.</span></div><div class="line">    <span class="comment">//This activity does not occur if CFRunLoopRunInMode is called with a timeout of 0 seconds.</span></div><div class="line">    <span class="comment">//It also does not occur in a particular iteration of the event processing loop if a version 0 source fires</span></div><div class="line">    <span class="keyword">case</span> kCFRunLoopBeforeWaiting:&#123;</div><div class="line">    _waitStartTime = <span class="number">0</span>;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"run loop before waiting"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//Inside the event processing loop after the run loop wakes up, but before processing the event that woke it up.</span></div><div class="line">    <span class="comment">//This activity occurs only if the run loop did in fact go to sleep during the current loop</span></div><div class="line">    <span class="keyword">case</span> kCFRunLoopAfterWaiting:&#123;</div><div class="line">    _waitStartTime = [[<span class="built_in">NSDate</span> date] timeIntervalSince1970];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"run loop after waiting"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//The exit of the run loop, after exiting the event processing loop.</span></div><div class="line">    <span class="comment">//This activity occurs once for each call to CFRunLoopRun and CFRunLoopRunInMode</span></div><div class="line">    <span class="keyword">case</span> kCFRunLoopExit:</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"run loop exit"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    A combination of all the preceding stages</div><div class="line">    case kCFRunLoopAllActivities:</div><div class="line">    break;</div><div class="line">    */</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">#pragma mark addSecondaryThreadAndObserver</span></div><div class="line">    - (<span class="keyword">void</span>) addSecondaryThreadAndObserver&#123;</div><div class="line">    <span class="built_in">NSThread</span> *thread = [<span class="keyword">self</span> secondaryThread];</div><div class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(addSecondaryTimer) onThread:thread withObject:<span class="literal">nil</span> waitUntilDone:<span class="literal">YES</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    - (<span class="built_in">NSThread</span> *)secondaryThread &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">NSThread</span> *_secondaryThread = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> oncePredicate;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;amp;oncePredicate, ^&#123;</div><div class="line">    _secondaryThread =</div><div class="line">    [[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span></div><div class="line">    selector:<span class="keyword">@selector</span>(networkRequestThreadEntryPoint:)</div><div class="line">    object:<span class="literal">nil</span>];</div><div class="line">    [_secondaryThread start];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> _secondaryThread;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    - (<span class="keyword">void</span>)networkRequestThreadEntryPoint:(<span class="keyword">id</span>)__unused object &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">    [[<span class="built_in">NSThread</span> currentThread] setName:<span class="string">@"monitorControllerThread"</span>];</div><div class="line">    <span class="built_in">NSRunLoop</span> *runLoop = [<span class="built_in">NSRunLoop</span> currentRunLoop];</div><div class="line">    [runLoop addPort:[<span class="built_in">NSMachPort</span> port] forMode:<span class="built_in">NSRunLoopCommonModes</span>];</div><div class="line">    [runLoop run];</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    - (<span class="keyword">void</span>) addSecondaryTimer&#123;</div><div class="line">    <span class="built_in">NSTimer</span> *myTimer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">0.5</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timerFired:) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</div><div class="line">    [[<span class="built_in">NSRunLoop</span> currentRunLoop] addTimer:myTimer forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    - (<span class="keyword">void</span>)timerFired:(<span class="built_in">NSTimer</span> *)timer&#123;</div><div class="line">    <span class="keyword">if</span> ( _waitStartTime &amp;lt; <span class="number">1</span> )&#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> currentTime = [[<span class="built_in">NSDate</span> date] timeIntervalSince1970];</div><div class="line">    <span class="keyword">double</span> timeDiff = currentTime - _waitStartTime;</div><div class="line">    <span class="keyword">if</span> (timeDiff &amp;gt; <span class="number">2.0</span>)&#123;</div><div class="line">    <span class="keyword">if</span> (_lastRecordTime - _waitStartTime &amp;lt; <span class="number">0.001</span> &amp;amp;&amp;amp; _lastRecordTime != <span class="number">0</span>)&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"last time no :%f %f"</span>,timeDiff, _waitStartTime);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span> logStack];</div><div class="line">    _lastRecordTime = _waitStartTime;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    - (<span class="keyword">void</span>)logStack&#123;</div><div class="line">    <span class="keyword">void</span>* callstack[<span class="number">128</span>];</div><div class="line">    <span class="keyword">int</span> frames = backtrace(callstack, <span class="number">128</span>);</div><div class="line">    <span class="keyword">char</span> **strs = backtrace_symbols(callstack, frames);</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    _backtrace = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:frames];</div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &amp;lt; frames ; i++ )&#123;</div><div class="line">    [_backtrace addObject:[<span class="built_in">NSString</span> stringWithUTF8String:strs[i]]];</div><div class="line">    &#125;</div><div class="line">    free(strs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>主要内容是首先在主线程注册了runloop observer的回调<code>myRunLoopObserver</code><br>每次小循环都会记录一下<code>kCFRunLoopAfterWaiting</code>的时间<code>_waitStartTime</code>，并且在<code>kCFRunLoopBeforeWaiting</code>制空。</p>
<p>另外开了一个子线程并开启他的runloop（模仿了AFNetworking的方式），并加上一个timer每隔1秒去进行监测。</p>
<p>如果当前时长与<code>_waitStartTime</code>差距大于2秒，则认为有卡顿情况，并记录了当前堆栈信息。</p>
<p>PS:整个demo写的比较简单，最后获取堆栈也仅获取了当前线程的堆栈信息(<code>[NSThread callStackSymbols]</code>有同样效果)，也在寻找获取所有线程堆栈的方法，欢迎指点一下。</p>
<hr>
<h4 id="更新："><a href="#更新：" class="headerlink" title="更新："></a>更新：</h4><p>了解到 plcrashreporter (<a href="https://github.com/plausiblelabs/plcrashreporter">github地址</a>) 可以做到获取所有线程堆栈。</p>
<hr>
<h4 id="更新2"><a href="#更新2" class="headerlink" title="更新2:"></a>更新2:</h4><p>这篇文章也介绍了监测卡顿的方法：<a href="http://www.starming.com/index.php?v=index&amp;view=91" target="_blank" rel="external">检测iOS的APP性能的一些方法</a><br>通过Dispatch Semaphore保证同步这里记录一下。</p>
<p>写一个Semaphore版本的代码，也放在<a href="https://github.com/game3108/RunloopMonitorDemo">github</a>上：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//  SeMonitorController.h</span></div><div class="line"><span class="comment">//  RunloopMonitorDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by game3108 on 16/4/14.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 game3108. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import &amp;lt;Foundation/Foundation.h&amp;gt;</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SeMonitorController</span> : <span class="title">NSObject</span></span></div><div class="line">+ (<span class="keyword">instancetype</span>) sharedInstance;</div><div class="line">- (<span class="keyword">void</span>) startMonitor;</div><div class="line">- (<span class="keyword">void</span>) endMonitor;</div><div class="line">- (<span class="keyword">void</span>) printLogTrace;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//  SeMonitorController.m</span></div><div class="line"><span class="comment">//  RunloopMonitorDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by game3108 on 16/4/14.</span></div><div class="line"><span class="comment">//  Copyright © 2016年 game3108. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"SeMonitorController.h"</span></span></div><div class="line"><span class="meta">#import &amp;lt;libkern/OSAtomic.h&amp;gt;</span></div><div class="line"><span class="meta">#import &amp;lt;execinfo.h&amp;gt;</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SeMonitorController</span>()</span>&#123;</div><div class="line"><span class="built_in">CFRunLoopObserverRef</span> _observer;</div><div class="line">dispatch_semaphore_t _semaphore;</div><div class="line"><span class="built_in">CFRunLoopActivity</span> _activity;</div><div class="line"><span class="built_in">NSInteger</span> _countTime;</div><div class="line"><span class="built_in">NSMutableArray</span> *_backtrace;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SeMonitorController</span></span></div><div class="line"></div><div class="line">+ (<span class="keyword">instancetype</span>) sharedInstance&#123;</div><div class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> once;</div><div class="line"><span class="keyword">static</span> <span class="keyword">id</span> sharedInstance;</div><div class="line"><span class="built_in">dispatch_once</span>(&amp;amp;once, ^&#123;</div><div class="line">sharedInstance = [[<span class="keyword">self</span> alloc] init];</div><div class="line">&#125;);</div><div class="line"><span class="keyword">return</span> sharedInstance;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>) startMonitor&#123;</div><div class="line">[<span class="keyword">self</span> registerObserver];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>) endMonitor&#123;</div><div class="line"><span class="keyword">if</span> (!_observer) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">CFRunLoopRemoveObserver</span>(<span class="built_in">CFRunLoopGetMain</span>(), _observer, kCFRunLoopCommonModes);</div><div class="line"><span class="built_in">CFRelease</span>(_observer);</div><div class="line">_observer = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>) printLogTrace&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"====================堆栈\n %@ \n"</span>,_backtrace);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> runLoopObserverCallBack(<span class="built_in">CFRunLoopObserverRef</span> observer, <span class="built_in">CFRunLoopActivity</span> activity, <span class="keyword">void</span> *info)</div><div class="line">&#123;</div><div class="line">SeMonitorController *instrance = [SeMonitorController sharedInstance];</div><div class="line">instrance-&amp;gt;_activity = activity;</div><div class="line"><span class="comment">// 发送信号</span></div><div class="line">dispatch_semaphore_t semaphore = instrance-&amp;gt;_semaphore;</div><div class="line">dispatch_semaphore_signal(semaphore);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)registerObserver</div><div class="line">&#123;</div><div class="line"><span class="built_in">CFRunLoopObserverContext</span> context = &#123;<span class="number">0</span>,(__bridge <span class="keyword">void</span>*)<span class="keyword">self</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;;</div><div class="line">_observer = <span class="built_in">CFRunLoopObserverCreate</span>(kCFAllocatorDefault,</div><div class="line">kCFRunLoopAllActivities,</div><div class="line"><span class="literal">YES</span>,</div><div class="line"><span class="number">0</span>,</div><div class="line">&amp;amp;runLoopObserverCallBack,</div><div class="line">&amp;amp;context);</div><div class="line"><span class="built_in">CFRunLoopAddObserver</span>(<span class="built_in">CFRunLoopGetMain</span>(), _observer, kCFRunLoopCommonModes);</div><div class="line"></div><div class="line"><span class="comment">// 创建信号</span></div><div class="line">_semaphore = dispatch_semaphore_create(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">// 在子线程监控时长</span></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line"><span class="keyword">while</span> (<span class="literal">YES</span>)</div><div class="line">&#123;</div><div class="line"><span class="comment">// 假定连续5次超时50ms认为卡顿(当然也包含了单次超时250ms)</span></div><div class="line"><span class="keyword">long</span> st = dispatch_semaphore_wait(_semaphore, dispatch_time(DISPATCH_TIME_NOW, <span class="number">50</span>*<span class="built_in">NSEC_PER_MSEC</span>));</div><div class="line"><span class="keyword">if</span> (st != <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (_activity==kCFRunLoopBeforeSources || _activity==kCFRunLoopAfterWaiting)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (++_countTime &amp;lt; <span class="number">5</span>)</div><div class="line"><span class="keyword">continue</span>;</div><div class="line">[<span class="keyword">self</span> logStack];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"something lag"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">_countTime = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)logStack&#123;</div><div class="line"><span class="keyword">void</span>* callstack[<span class="number">128</span>];</div><div class="line"><span class="keyword">int</span> frames = backtrace(callstack, <span class="number">128</span>);</div><div class="line"><span class="keyword">char</span> **strs = backtrace_symbols(callstack, frames);</div><div class="line"><span class="keyword">int</span> i;</div><div class="line">_backtrace = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:frames];</div><div class="line"><span class="keyword">for</span> ( i = <span class="number">0</span> ; i &amp;lt; frames ; i++ )&#123;</div><div class="line">[_backtrace addObject:[<span class="built_in">NSString</span> stringWithUTF8String:strs[i]]];</div><div class="line">&#125;</div><div class="line">free(strs);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>用Dispatch Semaphore简化了代码复杂度，更加简洁。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/game3108/article/details/51147946" target="_blank" rel="external">本文csdn地址</a><br>1.<a href="http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207890859&amp;idx=1&amp;sn=e98dd604cdb854e7a5808d2072c29162&amp;scene=4#wechat_redirect" target="_blank" rel="external">微信iOS卡顿监控系统</a><br>2.<a href="http://blog.csdn.net/lingedeng/article/details/6870692" target="_blank" rel="external"> </a><a href="http://blog.csdn.net/lingedeng/article/details/6870692" target="_blank" rel="external">iphone——使用run loop对象</a><br>3.<a href="http://blog.ibireme.com/2015/05/18/runloop/" target="_blank" rel="external">深入理解RunLoop</a><br>4.<a href="http://www.starming.com/index.php?v=index&amp;view=91" target="_blank" rel="external">检测iOS的APP性能的一些方法</a><br>5.<a href="http://www.tanhao.me/code/151113.html/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">iOS实时卡顿监控</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自简书作者:&lt;a href=&quot;http://www.jianshu.com/p/71cfbcb15842&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;game3108&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;h
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/"/>
    
      <category term="性能优化" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="移动开发" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/iOS/"/>
    
      <category term="性能优化" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>[转]让你快速上手Runtime</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2017/03/08/%E8%BD%AC-%E8%AE%A9%E4%BD%A0%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BRuntime/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2017/03/08/转-让你快速上手Runtime/</id>
    <published>2017-03-08T08:44:53.000Z</published>
    <updated>2017-09-10T13:06:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://www.jianshu.com/p/e071206103a4" target="_blank" rel="external">http://www.jianshu.com/p/e071206103a4</a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本篇主要介绍Runtime在开发中的一些使用场景，顺便讲解了下MJExtension的底层实现。如果喜欢我的文章，可以关注我微博:<a href="http://weibo.com/2034818060/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo" target="_blank" rel="external">袁峥Seemygo</a>,也可以来<a href="http://www.520it.com" target="_blank" rel="external">小码哥</a>，了解下我们的iOS培训课程。后续还会更新更多内容。。。</p>
<h3 id="一、runtime简介"><a href="#一、runtime简介" class="headerlink" title="一、runtime简介"></a>一、runtime简介</h3><ul>
<li>RunTime简称运行时。OC就是<code>运行时机制</code>，也就是在运行时候的一些机制，其中最主要的是消息机制。</li>
<li>对于C语言，<code>函数的调用在编译的时候会决定调用哪个函数</code>。</li>
<li>对于OC的函数，属于<code>动态调用过程</code>，在编译的时候并不能决定真正调用哪个函数，只有在真正运行的时候才会根据函数的名称找到对应的函数来调用。</li>
<li>事实证明：<ul>
<li>在编译阶段，OC可以<code>调用任何函数</code>，即使这个函数并未实现，只要声明过就不会报错。</li>
<li>在编译阶段，C语言调用<code>未实现的函数</code>就会报错。</li>
</ul>
</li>
</ul>
<h3 id="二、runtime作用"><a href="#二、runtime作用" class="headerlink" title="二、runtime作用"></a>二、runtime作用</h3><h4 id="1-发送消息"><a href="#1-发送消息" class="headerlink" title="1.发送消息"></a>1.发送消息</h4><ul>
<li><code>方法调用的本质</code>，就是让对象发送消息。</li>
<li>objc_msgSend,只有对象才能发送消息，因此以objc开头.</li>
<li>使用<code>消息机制</code>前提，必须导入#import <objc message.h=""></objc></li>
<li>消息机制简单使用</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 创建person对象</span></div><div class="line">Person *p = [[Person alloc] init];</div><div class="line"></div><div class="line"><span class="comment">// 调用对象方法</span></div><div class="line">[p eat];</div><div class="line"></div><div class="line"><span class="comment">// 本质：让对象发送消息</span></div><div class="line">objc_msgSend(p, <span class="keyword">@selector</span>(eat));</div><div class="line"></div><div class="line"><span class="comment">// 调用类方法的方式：两种</span></div><div class="line"><span class="comment">// 第一种通过类名调用</span></div><div class="line">[Person eat];</div><div class="line"><span class="comment">// 第二种通过类对象调用</span></div><div class="line">[[Person <span class="keyword">class</span>] eat];</div><div class="line"></div><div class="line"><span class="comment">// 用类名调用类方法，底层会自动把类名转换成类对象调用</span></div><div class="line"><span class="comment">// 本质：让类对象发送消息</span></div><div class="line">objc_msgSend([Person <span class="keyword">class</span>], <span class="keyword">@selector</span>(eat));</div></pre></td></tr></table></figure>
<ul>
<li>消息机制原理：对象根据方法编号SEL去映射表查找对应的方法实现</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/304825-eced87b260a7c5d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="2-交换方法"><a href="#2-交换方法" class="headerlink" title="2.交换方法"></a>2.交换方法</h4><ul>
<li><code>开发使用场景</code>:系统自带的方法功能不够，给系统自带的方法扩展一些功能，并且保持原有的功能。</li>
<li><code>方式一</code>:继承系统的类，重写方法.</li>
<li><code>方式二</code>:使用runtime,交换方法.</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    <span class="comment">// 需求：给imageNamed方法提供功能，每次加载图片就判断下图片是否加载成功。</span></div><div class="line">    <span class="comment">// 步骤一：先搞个分类，定义一个能加载图片并且能打印的方法+ (instancetype)imageWithName:(NSString *)name;</span></div><div class="line">    <span class="comment">// 步骤二：交换imageNamed和imageWithName的实现，就能调用imageWithName，间接调用imageWithName的实现。</span></div><div class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"123"</span>];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImage</span> (<span class="title">Image</span>)</span></div><div class="line"><span class="comment">// 加载分类到内存的时候调用</span></div><div class="line">+ (<span class="keyword">void</span>)load</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 交换方法</span></div><div class="line"></div><div class="line">    <span class="comment">// 获取imageWithName方法地址</span></div><div class="line">    Method imageWithName = class_getClassMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(imageWithName:));</div><div class="line"></div><div class="line">    <span class="comment">// 获取imageWithName方法地址</span></div><div class="line">    Method imageName = class_getClassMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(imageNamed:));</div><div class="line"></div><div class="line">    <span class="comment">// 交换方法地址，相当于交换实现方式</span></div><div class="line">    method_exchangeImplementations(imageWithName, imageName);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不能在分类中重写系统方法imageNamed，因为会把系统的功能给覆盖掉，而且分类中不能调用super.</span></div><div class="line"></div><div class="line"><span class="comment">// 既能加载图片又能打印</span></div><div class="line">+ (<span class="keyword">instancetype</span>)imageWithName:(<span class="built_in">NSString</span> *)name</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 这里调用imageWithName，相当于调用imageName</span></div><div class="line">    <span class="built_in">UIImage</span> *image = [<span class="keyword">self</span> imageWithName:name];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (image == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"加载空的图片"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> image;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li><p>交换原理：</p>
<ul>
<li>交换之前：</li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/304825-f53a2ea56804ad60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<pre><code>*   交换之后：
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/304825-c76afa4089255d93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="3-动态添加方法"><a href="#3-动态添加方法" class="headerlink" title="3.动态添加方法"></a>3.动态添加方法</h4><ul>
<li><code>开发使用场景</code>：如果一个类方法非常多，加载类到内存的时候也比较耗费资源，需要给每个方法生成映射表，可以使用动态给某个类，添加方法解决。</li>
<li><code>经典面试题</code>：有没有使用performSelector，其实主要想问你有没有动态添加过方法。</li>
<li><code>简单使用</code></li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line"></div><div class="line">    Person *p = [[Person alloc] init];</div><div class="line"></div><div class="line">    <span class="comment">// 默认person，没有实现eat方法，可以通过performSelector调用，但是会报错。</span></div><div class="line">    <span class="comment">// 动态添加方法就不会报错</span></div><div class="line">    [p performSelector:<span class="keyword">@selector</span>(eat)];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line"><span class="comment">// void(*)()</span></div><div class="line"><span class="comment">// 默认方法都有两个隐式参数，</span></div><div class="line"><span class="keyword">void</span> eat(<span class="keyword">id</span> <span class="keyword">self</span>,SEL sel)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ %@"</span>,<span class="keyword">self</span>,<span class="built_in">NSStringFromSelector</span>(sel));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 当一个对象调用未实现的方法，会调用这个方法处理,并且会把对应的方法列表传过来.</span></div><div class="line"><span class="comment">// 刚好可以用来判断，未实现的方法是不是我们想要动态添加的方法</span></div><div class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (sel == <span class="keyword">@selector</span>(eat)) &#123;</div><div class="line">        <span class="comment">// 动态添加eat方法</span></div><div class="line"></div><div class="line">        <span class="comment">// 第一个参数：给哪个类添加方法</span></div><div class="line">        <span class="comment">// 第二个参数：添加方法的方法编号</span></div><div class="line">        <span class="comment">// 第三个参数：添加方法的函数实现（函数地址）</span></div><div class="line">        <span class="comment">// 第四个参数：函数的类型，(返回值+参数类型) v:void @:对象-&gt;self :表示SEL-&gt;_cmd</span></div><div class="line">        class_addMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(eat), eat, <span class="string">"v@:"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="4-给分类添加属性"><a href="#4-给分类添加属性" class="headerlink" title="4.给分类添加属性"></a>4.给分类添加属性</h4><ul>
<li><code>原理</code>：给一个类声明属性，其实本质就是给这个类添加关联，并不是直接把这个值的内存空间添加到类存空间。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line"></div><div class="line">    <span class="comment">// 给系统NSObject类动态添加属性name</span></div><div class="line"></div><div class="line">    <span class="built_in">NSObject</span> *objc = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">    objc.name = <span class="string">@"小码哥"</span>;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,objc.name);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// 定义关联的key</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *key = <span class="string">"name"</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">Property</span>)</span></div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)name</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 根据关联的key，获取关联的值。</span></div><div class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, key);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 第一个参数：给哪个对象添加关联</span></div><div class="line">    <span class="comment">// 第二个参数：关联的key，通过这个key获取</span></div><div class="line">    <span class="comment">// 第三个参数：关联的value</span></div><div class="line">    <span class="comment">// 第四个参数:关联的策略</span></div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, key, name, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="5-字典转模型"><a href="#5-字典转模型" class="headerlink" title="5.字典转模型"></a>5.字典转模型</h4><ul>
<li><code>设计模型</code>：字典转模型的第一步<ul>
<li>模型属性，通常需要跟字典中的key一一对应</li>
<li>问题：一个一个的生成模型属性，很慢？</li>
<li>需求：能不能自动根据一个字典，生成对应的属性。</li>
<li>解决：提供一个分类，专门根据字典生成对应的属性字符串。</li>
</ul>
</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">    <span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">Log</span>)</span></div><div class="line"></div><div class="line"><span class="comment">// 自动打印属性字符串</span></div><div class="line">+ (<span class="keyword">void</span>)resolveDict:(<span class="built_in">NSDictionary</span> *)dict&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 拼接属性字符串代码</span></div><div class="line">    <span class="built_in">NSMutableString</span> *strM = [<span class="built_in">NSMutableString</span> string];</div><div class="line"></div><div class="line">    <span class="comment">// 1.遍历字典，把字典中的所有key取出来，生成对应的属性代码</span></div><div class="line">    [dict enumerateKeysAndObjectsUsingBlock:^(<span class="keyword">id</span>  _Nonnull key, <span class="keyword">id</span>  _Nonnull obj, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// 类型经常变，抽出来</span></div><div class="line">         <span class="built_in">NSString</span> *type;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ([obj isKindOfClass:<span class="built_in">NSClassFromString</span>(<span class="string">@"__NSCFString"</span>)]) &#123;</div><div class="line">            type = <span class="string">@"NSString"</span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([obj isKindOfClass:<span class="built_in">NSClassFromString</span>(<span class="string">@"__NSCFArray"</span>)])&#123;</div><div class="line">            type = <span class="string">@"NSArray"</span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([obj isKindOfClass:<span class="built_in">NSClassFromString</span>(<span class="string">@"__NSCFNumber"</span>)])&#123;</div><div class="line">            type = <span class="string">@"int"</span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([obj isKindOfClass:<span class="built_in">NSClassFromString</span>(<span class="string">@"__NSCFDictionary"</span>)])&#123;</div><div class="line">            type = <span class="string">@"NSDictionary"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 属性字符串</span></div><div class="line">        <span class="built_in">NSString</span> *str;</div><div class="line">        <span class="keyword">if</span> ([type containsString:<span class="string">@"NS"</span>]) &#123;</div><div class="line">            str = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"@property (nonatomic, strong) %@ *%@;"</span>,type,key];</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            str = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"@property (nonatomic, assign) %@ %@;"</span>,type,key];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 每生成属性字符串，就自动换行。</span></div><div class="line">        [strM appendFormat:<span class="string">@"\n%@\n"</span>,str];</div><div class="line"></div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    <span class="comment">// 把拼接好的字符串打印出来，就好了。</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,strM);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>字典转模型的方式一：KVC</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Status</span></span></div><div class="line"></div><div class="line">+ (<span class="keyword">instancetype</span>)statusWithDict:(<span class="built_in">NSDictionary</span> *)dict</div><div class="line">&#123;</div><div class="line">    Status *status = [[<span class="keyword">self</span> alloc] init];</div><div class="line"></div><div class="line">    [status setValuesForKeysWithDictionary:dict];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> status;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li><code>KVC字典转模型弊端</code>：必须保证，模型中的属性和字典中的key一一对应。<ul>
<li>如果不一致，就会调用<code>[&lt;Status 0x7fa74b545d60&gt; setValue:forUndefinedKey:]</code><br>报<code>key</code>找不到的错。</li>
<li>分析:模型中的属性和字典的key不一一对应，系统就会调用<code>setValue:forUndefinedKey:</code>报错。</li>
<li>解决:重写对象的<code>setValue:forUndefinedKey:</code>,把系统的方法覆盖，<br>就能继续使用KVC，字典转模型了。</li>
</ul>
</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">id</span>)value forUndefinedKey:(<span class="built_in">NSString</span> *)key</div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>字典转模型的方式二</code>：Runtime<ul>
<li>思路：利用运行时，遍历模型中所有属性，根据模型的属性名，去字典中查找key，取出对应的值，给模型的属性赋值。</li>
<li>步骤：提供一个NSObject分类，专门字典转模型，以后所有模型都可以通过这个分类转。</li>
</ul>
</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line"></div><div class="line">    <span class="comment">// 解析Plist文件</span></div><div class="line">    <span class="built_in">NSString</span> *filePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"status.plist"</span> ofType:<span class="literal">nil</span>];</div><div class="line"></div><div class="line">    <span class="built_in">NSDictionary</span> *statusDict = [<span class="built_in">NSDictionary</span> dictionaryWithContentsOfFile:filePath];</div><div class="line"></div><div class="line">    <span class="comment">// 获取字典数组</span></div><div class="line">    <span class="built_in">NSArray</span> *dictArr = statusDict[<span class="string">@"statuses"</span>];</div><div class="line"></div><div class="line">    <span class="comment">// 自动生成模型的属性字符串</span></div><div class="line"><span class="comment">//    [NSObject resolveDict:dictArr[0][@"user"]];</span></div><div class="line"></div><div class="line">    _statuses = [<span class="built_in">NSMutableArray</span> array];</div><div class="line"></div><div class="line">    <span class="comment">// 遍历字典数组</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSDictionary</span> *dict <span class="keyword">in</span> dictArr) &#123;</div><div class="line"></div><div class="line">        Status *status = [Status modelWithDict:dict];</div><div class="line"></div><div class="line">        [_statuses addObject:status];</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测试数据</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ %@"</span>,_statuses,[_statuses[<span class="number">0</span>] user]);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">Model</span>)</span></div><div class="line"></div><div class="line">+ (<span class="keyword">instancetype</span>)modelWithDict:(<span class="built_in">NSDictionary</span> *)dict</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 思路：遍历模型中所有属性-》使用运行时</span></div><div class="line"></div><div class="line">    <span class="comment">// 0.创建对应的对象</span></div><div class="line">    <span class="keyword">id</span> objc = [[<span class="keyword">self</span> alloc] init];</div><div class="line"></div><div class="line">    <span class="comment">// 1.利用runtime给对象中的成员属性赋值</span></div><div class="line"></div><div class="line">    <span class="comment">// class_copyIvarList:获取类中的所有成员属性</span></div><div class="line">    <span class="comment">// Ivar：成员属性的意思</span></div><div class="line">    <span class="comment">// 第一个参数：表示获取哪个类中的成员属性</span></div><div class="line">    <span class="comment">// 第二个参数：表示这个类有多少成员属性，传入一个Int变量地址，会自动给这个变量赋值</span></div><div class="line">    <span class="comment">// 返回值Ivar *：指的是一个ivar数组，会把所有成员属性放在一个数组中，通过返回的数组就能全部获取到。</span></div><div class="line">    <span class="comment">/* 类似下面这种写法</span></div><div class="line"></div><div class="line">     Ivar ivar;</div><div class="line">     Ivar ivar1;</div><div class="line">     Ivar ivar2;</div><div class="line">     // 定义一个ivar的数组a</div><div class="line">     Ivar a[] = &#123;ivar,ivar1,ivar2&#125;;</div><div class="line"></div><div class="line">     // 用一个Ivar *指针指向数组第一个元素</div><div class="line">     Ivar *ivarList = a;</div><div class="line"></div><div class="line">     // 根据指针访问数组第一个元素</div><div class="line">     ivarList[0];</div><div class="line"></div><div class="line">     */</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count;</div><div class="line"></div><div class="line">    <span class="comment">// 获取类中的所有成员属性</span></div><div class="line">    Ivar *ivarList = class_copyIvarList(<span class="keyword">self</span>, &amp;count);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="comment">// 根据角标，从数组取出对应的成员属性</span></div><div class="line">        Ivar ivar = ivarList[i];</div><div class="line"></div><div class="line">        <span class="comment">// 获取成员属性名</span></div><div class="line">        <span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</div><div class="line"></div><div class="line">        <span class="comment">// 处理成员属性名-&gt;字典中的key</span></div><div class="line">        <span class="comment">// 从第一个角标开始截取</span></div><div class="line">        <span class="built_in">NSString</span> *key = [name substringFromIndex:<span class="number">1</span>];</div><div class="line"></div><div class="line">        <span class="comment">// 根据成员属性名去字典中查找对应的value</span></div><div class="line">        <span class="keyword">id</span> value = dict[key];</div><div class="line"></div><div class="line">        <span class="comment">// 二级转换:如果字典中还有字典，也需要把对应的字典转换成模型</span></div><div class="line">        <span class="comment">// 判断下value是否是字典</span></div><div class="line">        <span class="keyword">if</span> ([value isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">            <span class="comment">// 字典转模型</span></div><div class="line">            <span class="comment">// 获取模型的类对象，调用modelWithDict</span></div><div class="line">            <span class="comment">// 模型的类名已知，就是成员属性的类型</span></div><div class="line"></div><div class="line">            <span class="comment">// 获取成员属性类型</span></div><div class="line">           <span class="built_in">NSString</span> *type = [<span class="built_in">NSString</span> stringWithUTF8String:ivar_getTypeEncoding(ivar)];</div><div class="line">          <span class="comment">// 生成的是这种@"@\"User\"" 类型 -》 @"User"  在OC字符串中 \" -&gt; "，\是转义的意思，不占用字符</span></div><div class="line">            <span class="comment">// 裁剪类型字符串</span></div><div class="line">            <span class="built_in">NSRange</span> range = [type rangeOfString:<span class="string">@"\""</span>];</div><div class="line"></div><div class="line">           type = [type substringFromIndex:range.location + range.length];</div><div class="line"></div><div class="line">            range = [type rangeOfString:<span class="string">@"\""</span>];</div><div class="line"></div><div class="line">            <span class="comment">// 裁剪到哪个角标，不包括当前角标</span></div><div class="line">          type = [type substringToIndex:range.location];</div><div class="line"></div><div class="line">            <span class="comment">// 根据字符串类名生成类对象</span></div><div class="line">            Class modelClass = <span class="built_in">NSClassFromString</span>(type);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (modelClass) &#123; <span class="comment">// 有对应的模型才需要转</span></div><div class="line"></div><div class="line">                <span class="comment">// 把字典转模型</span></div><div class="line">                value  =  [modelClass modelWithDict:value];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 三级转换：NSArray中也是字典，把数组中的字典转换成模型.</span></div><div class="line">        <span class="comment">// 判断值是否是数组</span></div><div class="line">        <span class="keyword">if</span> ([value isKindOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">            <span class="comment">// 判断对应类有没有实现字典数组转模型数组的协议</span></div><div class="line">            <span class="keyword">if</span> ([<span class="keyword">self</span> respondsToSelector:<span class="keyword">@selector</span>(arrayContainModelClass)]) &#123;</div><div class="line"></div><div class="line">                <span class="comment">// 转换成id类型，就能调用任何对象的方法</span></div><div class="line">                <span class="keyword">id</span> idSelf = <span class="keyword">self</span>;</div><div class="line"></div><div class="line">                <span class="comment">// 获取数组中字典对应的模型</span></div><div class="line">                <span class="built_in">NSString</span> *type =  [idSelf arrayContainModelClass][key];</div><div class="line"></div><div class="line">                <span class="comment">// 生成模型</span></div><div class="line">               Class classModel = <span class="built_in">NSClassFromString</span>(type);</div><div class="line">                <span class="built_in">NSMutableArray</span> *arrM = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">                <span class="comment">// 遍历字典数组，生成模型数组</span></div><div class="line">                <span class="keyword">for</span> (<span class="built_in">NSDictionary</span> *dict <span class="keyword">in</span> value) &#123;</div><div class="line">                    <span class="comment">// 字典转模型</span></div><div class="line">                  <span class="keyword">id</span> model =  [classModel modelWithDict:dict];</div><div class="line">                    [arrM addObject:model];</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// 把模型数组赋值给value</span></div><div class="line">                value = arrM;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (value) &#123; <span class="comment">// 有值，才需要给模型的属性赋值</span></div><div class="line">            <span class="comment">// 利用KVC给模型中的属性赋值</span></div><div class="line">            [objc setValue:value forKey:key];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> objc;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://www.jianshu.com/p/e071206103a4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/e071206103a4&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/"/>
    
      <category term="runtime" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/iOS/runtime/"/>
    
    
      <category term="移动开发" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="iOS" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/iOS/"/>
    
      <category term="runtime" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/runtime/"/>
    
      <category term="动态运行时" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E5%8A%A8%E6%80%81%E8%BF%90%E8%A1%8C%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="https://github.com/zhoutq/zhoutq.github.io/2015/11/12/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>https://github.com/zhoutq/zhoutq.github.io/2015/11/12/第一篇文章/</id>
    <published>2015-11-12T11:37:40.000Z</published>
    <updated>2017-09-10T13:26:43.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>NSLog(@&quot;Hello World&quot;);
</code></pre><ul>
<li><p>捣腾了两天的终于出炉了，一路走来坑坑洼洼，实属不易！此时的心情犹如刚学OC时，控制台打印出“Hello World”一般。</p>
</li>
<li><p>后期会将珍藏已久的好文章陆续放上去，文章主要以技术分享为主，但时而也会有一些自己的小心情、小想法之类的！恭请敬阅。 </p>
</li>
<li><p>由于刚开始弄所以排版和功能肯定有不足之处，欢迎批评指正。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;NSLog(@&amp;quot;Hello World&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;捣腾了两天的终于出炉了，一路走来坑坑洼洼，实属不易！此时的心情犹如刚学OC时，控制台打印出“Hello World”一般。&lt;/p&gt;
&lt;/li&gt;
    
    </summary>
    
      <category term="杂记" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
      <category term="生活" scheme="https://github.com/zhoutq/zhoutq.github.io/categories/%E6%9D%82%E8%AE%B0/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="杂记" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
      <category term="博客" scheme="https://github.com/zhoutq/zhoutq.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
